java version "1.7.0_231"
OpenJDK Runtime Environment (rhel-2.6.19.1.el7_6-x86_64 u231-b01)
OpenJDK 64-Bit Server VM (build 24.231-b01, mixed mode)
Check out 882556ea to /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j/ OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 882556ea:91e6ac58..................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Math-41b........................................ OK
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 1
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
/home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4
PURIFY IS FALSE
=================================================
Project : math_41	start : 19/10/28 16:20

Variable type inconsistancy of 'start' in method 'getSegments' with types : Vector2D and Vector3D
Variable type inconsistancy of 'end' in method 'getSegments' with types : Vector2D and Vector3D
Field type inconsistancy 'start' with types : Vector2D and Vector3D
Field type inconsistancy 'end' with types : Vector2D and Vector3D
readFailedTest: path is /mnt/nfs/work1/brun/mmotwani/SimFix/d4j-info/failed_tests/math/41.txt#ATTEMPTS: 1

# FAILING TESTS: 1
TIMEOUT : 18000000
===========
locations= [<org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,222>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,258>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,262>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,266>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,267>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,268>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,271>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,274>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,277>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,278>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,282>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,286>, <org.apache.commons.math.stat.descriptive.summary.Sum,159>, <org.apache.commons.math.stat.descriptive.summary.Sum,160>, <org.apache.commons.math.stat.descriptive.summary.Sum,161>, <org.apache.commons.math.stat.descriptive.summary.Sum,162>, <org.apache.commons.math.stat.descriptive.summary.Sum,163>, <org.apache.commons.math.stat.descriptive.summary.Sum,166>, <org.apache.commons.math.stat.descriptive.moment.Mean,205>, <org.apache.commons.math.stat.descriptive.moment.Mean,206>, <org.apache.commons.math.stat.descriptive.moment.Mean,209>, <org.apache.commons.math.stat.descriptive.moment.Mean,210>, <org.apache.commons.math.stat.descriptive.moment.Mean,213>, <org.apache.commons.math.stat.descriptive.moment.Mean,214>, <org.apache.commons.math.stat.descriptive.moment.Mean,215>, <org.apache.commons.math.stat.descriptive.moment.Mean,217>, <org.apache.commons.math.stat.descriptive.moment.Variance,316>, <org.apache.commons.math.stat.descriptive.moment.Variance,318>, <org.apache.commons.math.stat.descriptive.moment.Variance,319>, <org.apache.commons.math.stat.descriptive.moment.Variance,320>, <org.apache.commons.math.stat.descriptive.moment.Variance,322>, <org.apache.commons.math.stat.descriptive.moment.Variance,323>, <org.apache.commons.math.stat.descriptive.moment.Variance,324>, <org.apache.commons.math.stat.descriptive.moment.Variance,325>, <org.apache.commons.math.stat.descriptive.moment.Variance,328>, <org.apache.commons.math.stat.descriptive.moment.Variance,370>, <org.apache.commons.math.stat.descriptive.moment.Variance,504>, <org.apache.commons.math.stat.descriptive.moment.Variance,506>, <org.apache.commons.math.stat.descriptive.moment.Variance,507>, <org.apache.commons.math.stat.descriptive.moment.Variance,509>, <org.apache.commons.math.stat.descriptive.moment.Variance,510>, <org.apache.commons.math.stat.descriptive.moment.Variance,511>, <org.apache.commons.math.stat.descriptive.moment.Variance,512>, <org.apache.commons.math.stat.descriptive.moment.Variance,513>, <org.apache.commons.math.stat.descriptive.moment.Variance,514>, <org.apache.commons.math.stat.descriptive.moment.Variance,515>, <org.apache.commons.math.stat.descriptive.moment.Variance,516>, <org.apache.commons.math.stat.descriptive.moment.Variance,519>, <org.apache.commons.math.stat.descriptive.moment.Variance,520>, <org.apache.commons.math.stat.descriptive.moment.Variance,521>, <org.apache.commons.math.stat.descriptive.moment.Variance,524>, <org.apache.commons.math.stat.descriptive.moment.Variance,525>, <org.apache.commons.math.stat.descriptive.moment.Variance,531>, <org.apache.commons.math.stat.descriptive.moment.Variance,204>, <org.apache.commons.math.stat.descriptive.moment.Variance,205>, <org.apache.commons.math.stat.descriptive.moment.Variance,207>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,117>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,118>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,119>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,120>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,121>, <org.apache.commons.math.stat.descriptive.moment.SecondMoment,92>, <org.apache.commons.math.stat.descriptive.moment.SecondMoment,93>, <org.apache.commons.math.stat.descriptive.moment.SecondMoment,94>, <org.apache.commons.math.stat.descriptive.summary.Sum,120>, <org.apache.commons.math.stat.descriptive.summary.Sum,121>, <org.apache.commons.math.stat.descriptive.summary.Sum,122>, <org.apache.commons.math.stat.descriptive.summary.Sum,123>, <org.apache.commons.math.stat.descriptive.summary.Sum,124>, <org.apache.commons.math.stat.descriptive.summary.Sum,127>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,163>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,167>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,171>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,175>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,180>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,184>, <org.apache.commons.math.stat.descriptive.moment.Mean,79>, <org.apache.commons.math.stat.descriptive.moment.Mean,80>, <org.apache.commons.math.stat.descriptive.moment.Mean,81>, <org.apache.commons.math.stat.descriptive.moment.Mean,82>, <org.apache.commons.math.stat.descriptive.moment.Variance,97>, <org.apache.commons.math.stat.descriptive.moment.Variance,75>, <org.apache.commons.math.stat.descriptive.moment.Variance,84>, <org.apache.commons.math.stat.descriptive.moment.Variance,91>, <org.apache.commons.math.stat.descriptive.moment.Variance,98>, <org.apache.commons.math.stat.descriptive.moment.Variance,99>, <org.apache.commons.math.util.FastMath,375>, <org.apache.commons.math.stat.descriptive.summary.Sum,56>, <org.apache.commons.math.stat.descriptive.summary.Sum,57>, <org.apache.commons.math.stat.descriptive.summary.Sum,58>, <org.apache.commons.math.stat.descriptive.summary.Sum,59>, <org.apache.commons.math.util.FastMath,104>, <org.apache.commons.math.util.FastMath,106>, <org.apache.commons.math.util.FastMath,115>, <org.apache.commons.math.util.FastMath,128>, <org.apache.commons.math.util.FastMath,141>, <org.apache.commons.math.util.FastMath,160>, <org.apache.commons.math.util.FastMath,179>, <org.apache.commons.math.util.FastMath,198>, <org.apache.commons.math.util.FastMath,218>, <org.apache.commons.math.util.FastMath,237>, <org.apache.commons.math.util.FastMath,256>, <org.apache.commons.math.util.FastMath,277>, <org.apache.commons.math.util.FastMath,285>, <org.apache.commons.math.util.FastMath,288>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,39>, <org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic,35>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,79>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,80>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,81>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,82>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,83>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,84>, <org.apache.commons.math.stat.descriptive.moment.SecondMoment,60>, <org.apache.commons.math.stat.descriptive.moment.SecondMoment,61>, <org.apache.commons.math.stat.descriptive.moment.SecondMoment,62>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,54>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,55>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,62>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,70>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,81>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,82>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,83>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,93>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,100>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,101>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,137>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,164>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,168>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,172>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,176>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,181>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,259>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,263>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,269>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,272>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,275>, <org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,283>, <org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic,59>, <org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic,60>, <org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic,62>, <org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic,88>, <org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic,89>, <org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic,90>, <org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic,92>, <org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic,127>, <org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic,128>, <org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic,130>, <org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic,131>, <org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic,146>, <org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic,147>, <org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic,148>, <org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic,149>, <org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic,152>, <org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic,163>, <org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic,164>, <org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic,166>, <org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic,167>, <org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic,169>, <org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic,170>, <org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic,181>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,93>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,94>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,95>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,102>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,103>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,105>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,106>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,107>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,108>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,109>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,110>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,128>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,135>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,143>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,144>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,145>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,158>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,159>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,160>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,161>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,162>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,163>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,164>, <org.apache.commons.math.stat.descriptive.moment.FirstMoment,165>, <org.apache.commons.math.stat.descriptive.moment.SecondMoment,71>, <org.apache.commons.math.stat.descriptive.moment.SecondMoment,72>, <org.apache.commons.math.stat.descriptive.moment.SecondMoment,73>, <org.apache.commons.math.stat.descriptive.moment.SecondMoment,80>, <org.apache.commons.math.stat.descriptive.moment.SecondMoment,81>, <org.apache.commons.math.stat.descriptive.moment.SecondMoment,83>, <org.apache.commons.math.stat.descriptive.moment.SecondMoment,84>, <org.apache.commons.math.stat.descriptive.moment.SecondMoment,85>, <org.apache.commons.math.stat.descriptive.moment.SecondMoment,101>, <org.apache.commons.math.stat.descriptive.moment.SecondMoment,109>, <org.apache.commons.math.stat.descriptive.moment.SecondMoment,110>, <org.apache.commons.math.stat.descriptive.moment.SecondMoment,111>, <org.apache.commons.math.stat.descriptive.moment.SecondMoment,124>, <org.apache.commons.math.stat.descriptive.moment.SecondMoment,125>, <org.apache.commons.math.stat.descriptive.moment.SecondMoment,126>]
======================org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,222
========
return test(values,begin,length,false);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (compile.tests)................................................ 
org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,258
========
if(weights==null){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,length,weights[i]);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (compile.tests)................................................ 
org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,262
========
if(length!=values.length){
throw new DimensionMismatchException(weights.length,values.length);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (compile.tests)................................................ 
========
if(weights.length==values.length){
throw new DimensionMismatchException(weights.length,values.length);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (compile.tests)................................................ 
========
if(weights.length!=values.length){
if(length==0){
return Double.NaN;
}
throw new DimensionMismatchException(weights.length,values.length);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(length==values.length){
throw new DimensionMismatchException(weights.length,values.length);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (compile.tests)................................................ 
========
if(length!=begin){
throw new DimensionMismatchException(weights.length,values.length);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (compile.tests)................................................ 
========
if(weights.length!=begin){
throw new DimensionMismatchException(weights.length,values.length);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (compile.tests)................................................ 
========
if(weights.length!=values.length){
throw new DimensionMismatchException(begin,length);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (compile.tests)................................................ 
========
if(length!=values.length){
throw new DimensionMismatchException(begin,length);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (compile.tests)................................................ 
========
if(length!=begin){
throw new DimensionMismatchException(begin,length);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (compile.tests)................................................ 
========
if(weights.length!=begin){
throw new DimensionMismatchException(begin,length);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (compile.tests)................................................ 
========
if(weights.length!=values.length){
throw new NotPositiveException(LocalizedFormats.LENGTH,length);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(length!=values.length){
throw new NotPositiveException(LocalizedFormats.LENGTH,length);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(weights.length!=values.length){
if(length==0&&!allowEmpty){
return false;
}
throw new DimensionMismatchException(weights.length,values.length);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(length!=values.length){
if(length==0&&!allowEmpty){
return false;
}
throw new DimensionMismatchException(weights.length,values.length);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(weights.length!=values.length){
throw new IllegalArgumentException("Both chromosomes must have same lengths.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(length!=values.length){
throw new IllegalArgumentException("Both chromosomes must have same lengths.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(begin!=values.length){
throw new DimensionMismatchException(weights.length,values.length);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(weights.length!=values.length){
throw new NumberIsTooLargeException(LocalizedFormats.SUBARRAY_ENDS_AFTER_ARRAY_END,begin+length,values.length,true);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(begin!=values.length){
throw new NumberIsTooLargeException(LocalizedFormats.SUBARRAY_ENDS_AFTER_ARRAY_END,begin+length,values.length,true);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(length!=values.length){
throw new NumberIsTooLargeException(LocalizedFormats.SUBARRAY_ENDS_AFTER_ARRAY_END,begin+length,values.length,true);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
test(values,begin,length);
if(weights.length!=values.length){
throw new DimensionMismatchException(weights.length,values.length);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(weights.length!=values.length){
if(length==1){
return values[begin];
}
throw new DimensionMismatchException(weights.length,values.length);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(length!=length){
throw new DimensionMismatchException(weights.length,values.length);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(weights.length!=length){
throw new DimensionMismatchException(weights.length,values.length);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(weights.length!=values.length){
throw new MathIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,length,length);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(length!=values.length){
throw new MathIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,length,length);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(weights.length!=length){
throw new MathIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,length,length);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(length!=length){
throw new MathIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,length,length);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(weights.length!=yArray.length){
throw new DimensionMismatchException(weights.length,values.length);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(length!=yArray.length){
throw new DimensionMismatchException(weights.length,values.length);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(weights.length!=values.length){
throw new MathIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,length,yArray.length);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,266
========
if(length!=values.length){
throw new DimensionMismatchException(weights.length,values.length);
}
boolean containsPositiveWeight=false;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (compile.tests)................................................ 
========
if(length!=begin){
throw new DimensionMismatchException(weights.length,values.length);
}
boolean containsPositiveWeight=false;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(weights.length!=begin){
throw new DimensionMismatchException(weights.length,values.length);
}
boolean containsPositiveWeight=false;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (compile.tests)................................................ 
========
if(weights.length!=values.length){
throw new DimensionMismatchException(begin,length);
}
boolean containsPositiveWeight=false;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(length!=values.length){
throw new DimensionMismatchException(begin,length);
}
boolean containsPositiveWeight=false;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(length!=begin){
throw new DimensionMismatchException(begin,length);
}
boolean containsPositiveWeight=false;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(weights.length!=begin){
throw new DimensionMismatchException(begin,length);
}
boolean containsPositiveWeight=false;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(weights.length==values.length){
throw new DimensionMismatchException(weights.length,values.length);
}
boolean containsPositiveWeight=false;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(weights.length!=values.length){
if(length==0){
return Double.NaN;
}
throw new DimensionMismatchException(weights.length,values.length);
}
boolean containsPositiveWeight=false;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(length==values.length){
throw new DimensionMismatchException(weights.length,values.length);
}
boolean containsPositiveWeight=false;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(weights.length!=values.length){
throw new NotPositiveException(LocalizedFormats.LENGTH,length);
}
boolean containsPositiveWeight=false;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(length!=values.length){
throw new NotPositiveException(LocalizedFormats.LENGTH,length);
}
boolean containsPositiveWeight=false;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(weights.length!=values.length){
if(length==0&&!allowEmpty){
return false;
}
throw new DimensionMismatchException(weights.length,values.length);
}
boolean containsPositiveWeight=false;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(length!=values.length){
if(length==0&&!allowEmpty){
return false;
}
throw new DimensionMismatchException(weights.length,values.length);
}
boolean containsPositiveWeight=false;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(begin!=values.length){
throw new DimensionMismatchException(weights.length,values.length);
}
boolean containsPositiveWeight=false;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(weights.length!=values.length){
throw new NumberIsTooLargeException(LocalizedFormats.SUBARRAY_ENDS_AFTER_ARRAY_END,begin+length,values.length,true);
}
boolean containsPositiveWeight=false;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(begin!=values.length){
throw new NumberIsTooLargeException(LocalizedFormats.SUBARRAY_ENDS_AFTER_ARRAY_END,begin+length,values.length,true);
}
boolean containsPositiveWeight=false;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(length!=values.length){
throw new NumberIsTooLargeException(LocalizedFormats.SUBARRAY_ENDS_AFTER_ARRAY_END,begin+length,values.length,true);
}
boolean containsPositiveWeight=false;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(weights.length!=values.length){
throw new IllegalArgumentException("Both chromosomes must have same lengths.");
}
boolean containsPositiveWeight=false;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(length!=values.length){
throw new IllegalArgumentException("Both chromosomes must have same lengths.");
}
boolean containsPositiveWeight=false;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(weights.length!=values.length){
if(length==1){
return values[begin];
}
throw new DimensionMismatchException(weights.length,values.length);
}
boolean containsPositiveWeight=false;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(length!=length){
throw new DimensionMismatchException(weights.length,values.length);
}
boolean containsPositiveWeight=false;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(weights.length!=length){
throw new DimensionMismatchException(weights.length,values.length);
}
boolean containsPositiveWeight=false;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(weights.length!=values.length){
throw new MathIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,length,length);
}
boolean containsPositiveWeight=false;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(length!=values.length){
throw new MathIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,length,length);
}
boolean containsPositiveWeight=false;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(weights.length!=length){
throw new MathIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,length,length);
}
boolean containsPositiveWeight=false;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(length!=length){
throw new MathIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,length,length);
}
boolean containsPositiveWeight=false;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(weights.length!=yArray.length){
throw new DimensionMismatchException(weights.length,values.length);
}
boolean containsPositiveWeight=false;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(length!=yArray.length){
throw new DimensionMismatchException(weights.length,values.length);
}
boolean containsPositiveWeight=false;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(weights.length!=values.length){
throw new MathIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,length,yArray.length);
}
boolean containsPositiveWeight=false;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,267
UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (compile.tests)................................................ 
========
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (compile.tests)................................................ 
========
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (compile.tests)................................................ 
========
if(Double.abs(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.isNaN(weights[i])){
cachedNormalDeviate=Double.NaN;
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.getEntry(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.get(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.isFeasible(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.isNaN(weights[i])){
throw new MathInternalError(LocalizedFormats.DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN,i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.isNaN(weights[i])){
throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.isNaN(weights[i])){
System.arraycopy(storedData,i,storedData,0,length);
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(Double.isNaN(weights[i])){
throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,length,i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
weights[i]=0;
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
weights[i]=0;
if(Double.abs(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.contains(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.isNaN(weights[i])){
System.arraycopy(storedData,0,storedData,i,length);
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(Double.isNaN(weights[i])){
if(FastMath.abs(storedData[i]-weights[i])>FastMath.max(FastMath.abs(storedData[i]),FastMath.abs(weights[i]))*getRelativeThreshold()&&difference>getAbsoluteThreshold()){
return false;
}
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.charAt(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.isNaN(weights[i])){
if(Math.abs(storedData[i]-weights[i])>Math.max(Math.abs(storedData[i]),Math.abs(weights[i]))*getRelativeThreshold()&&difference>getAbsoluteThreshold()){
return false;
}
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.containsKey(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.storedData=observations.clone();
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.weights=null;
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.sqrt(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.isNaN(weights[i])){
if(!Precision.equals(storedData[i],weights[i])){
return false;
}
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.isNaN(weights[i])){
if(!Precision.equalsIncludingNaN(storedData[i],weights[i])){
return false;
}
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.isInfinite(weights[i])){
throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,length,i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.abs(weights[i])){
throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(containsPositiveWeight){
return NaN;
}
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(Double.isInfinite(weights[i])){
throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT,weights[i],i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.getEntry(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.get(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.abs(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.isInfinite(weights[i])){
System.arraycopy(storedData,0,storedData,i,length);
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(Double.contains(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.isInfinite(weights[i])){
throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.isInfinite(weights[i])){
throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,length,i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.isInfinite(weights[i])){
System.arraycopy(storedData,i,storedData,0,length);
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(Double.isInfinite(weights[i])){
if(FastMath.abs(storedData[i]-weights[i])>FastMath.max(FastMath.abs(storedData[i]),FastMath.abs(weights[i]))*getRelativeThreshold()&&difference>getAbsoluteThreshold()){
return false;
}
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.isInfinite(weights[i])){
if(Math.abs(storedData[i]-weights[i])>Math.max(Math.abs(storedData[i]),Math.abs(weights[i]))*getRelativeThreshold()&&difference>getAbsoluteThreshold()){
return false;
}
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.charAt(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.containsKey(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.storedData=observations.clone();
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.weights=null;
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.isFeasible(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.abs(weights[i])){
throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.sqrt(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.isInfinite(weights[i])){
if(!Precision.equals(storedData[i],weights[i])){
return false;
}
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.isInfinite(weights[i])){
if(!Precision.equalsIncludingNaN(storedData[i],weights[i])){
return false;
}
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.isNaN(weights[i])){
throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,length,i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
if(weights[i]<length){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY,i,length);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(weights[i]<length){
throw new MathIllegalArgumentException(LocalizedFormats.TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY,i,length);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(weights[i]<=0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_ELEMENT_AT_INDEX,i,weights[i]);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(weights[i]<=0){
throw new MathIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_ELEMENT_AT_INDEX,i,weights[i]);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY,i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.INDEX_NOT_POSITIVE,i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((length+i)>internalArray.length){
expandTo(startIndex+i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
length=i;
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(weights[i]<0){
throw new NotPositiveException(weights[i]);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
split(FACT[i],storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
splitReciprocal(storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
split(FACT[i],storedData);
splitReciprocal(storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(weights[i]<0){
throw new IndexOutOfBoundsException(" Row index is outside of the 0 "+"to number of variables - 1 range");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(weights[i]<0){
throw new InvalidRepresentationException(LocalizedFormats.INVALID_BINARY_DIGIT,i);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(weights[i]<0){
throw new NumberIsTooSmallException(weights[i],storedData[i],true);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(weights[i]<0){
if(weights[i]<0){
return false;
}
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(weights[i]<0){
if(weights[i]>1.0){
return false;
}
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(weights[i]<0){
if(weights[i]<0){
return false;
}
if(weights[i]>1.0){
return false;
}
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(weights[i]<0){
if(storedData[i]==0&&weights[i]==0){
return false;
}
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(weights[i]<0){
throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(divisor.mant[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i<0){
i=-i-2;
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
weights[i]=FastMath.sqrt(ltI[i]);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(a.mant[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(weights[i]<0){
if(a.mant[i]>b.mant[i]){
return a.sign;
}
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(weights[i]<0){
if(a.mant[i]<b.mant[i]){
return -a.sign;
}
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(storedData[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(weights[i]<0){
throw new ModelSpecificationException(LocalizedFormats.INDEX_LARGER_THAN_MAX,i,this.length);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(weights[i]<0){
throw new IllegalArgumentException("originalData and permutedData must contain the same objects.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
weights[begin]=work[i];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(weights[i]<0){
throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(weights[i]<0){
if(length>=list.length+length){
return 0;
}else {
break;
}
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(weights[i]<0){
this.vmove(i,length);
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(weights[i]<0){
++length;
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(weights[i]<0){
this.vmove(i,length);
++length;

throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
storedData[length-1]=storedData[n];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
sortPairs(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!containsPositiveWeight&&i>=length){
containsPositiveWeight=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!containsPositiveWeight&&weights[i]>=0.0){
containsPositiveWeight=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(!containsPositiveWeight&&i>=this.storedData.length){
containsPositiveWeight=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!containsPositiveWeight&&weights[i]>this.storedData.length){
containsPositiveWeight=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!containsPositiveWeight&&weights[i]>=this.storedData.length){
containsPositiveWeight=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!containsPositiveWeight&&weights[i]>0.0){
sig+=(400-length)%4;
containsPositiveWeight=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!containsPositiveWeight&&i>1){
containsPositiveWeight=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
i++;
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!containsPositiveWeight&&weights[i]>0.0){
break;
containsPositiveWeight=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
split(FACT[i],storedData);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
splitReciprocal(storedData,storedData);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
split(FACT[i],storedData);
splitReciprocal(storedData,storedData);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((i>=length)&&weights[i]>0.0){
containsPositiveWeight=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(length<xval.length&&weights[i]>0.0){
containsPositiveWeight=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=length&&weights[i]>0.0){
containsPositiveWeight=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(i==length&&weights[i]>0.0){
containsPositiveWeight=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(i<0){
i=-i-2;
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((length+i)>internalArray.length){
expandTo(startIndex+i);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
length=i;
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
length-=i;
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!containsPositiveWeight&&weights[i]>0.0){
continue;
containsPositiveWeight=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!containsPositiveWeight&&weights[i]>0.0){
ret[i]=0.0;
containsPositiveWeight=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!containsPositiveWeight&&weights[i]>0.0){
d[i]=0.0;
containsPositiveWeight=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!containsPositiveWeight&&weights[i]>0.0){
ret[i]=0.0;
d[i]=0.0;

containsPositiveWeight=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!containsPositiveWeight&&weights[i]>0.0){
sig+=(400-length)%4;
containsPositiveWeight=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=begin;i<begin+length;i++){
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=begin;i<begin+length;i++){
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=begin;i<begin+length;i++){
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<=0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<=0){
throw new MathIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=begin;j<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((begin+i)>internalArray.length){
expandTo(startIndex+i);
}
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY,i);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT,storedData[i],i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=k;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=k;i<begin+length;i++){
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sortPairs(storedData,weights);
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.getEntry(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=numPoints;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.abs(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
if(storedData[i]==0&&storedData[i]==0){
return false;
}
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=begin;i<begin+length;i++){
if(Double.get(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(weights[i]-xval[length]>xval[length]-xval[i]){
length=ileft;
}else {
edge=iright;
}
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
if(weights[i]<0){
return false;
}
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
case DECREASING :

for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new NumberIsTooSmallException(weights[i],storedData[i],true);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=last;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<begin){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=begin;i<begin+length;i++){
vector[i]++;
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(begin==bytes.length){
return ;
}
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;g<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(result.mant[mant.length-1]!=0){
break;
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.abs(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.abs(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.abs(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=i;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
if(a.mant[i]>b.mant[i]){
return a.sign;
}
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;k<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i<0||i>=this.storedData.length){
throw new IndexOutOfBoundsException(" Row index is outside of the 0 "+"to number of variables - 1 range");
}
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(begin<0||j>=this.storedData.length){
throw new IndexOutOfBoundsException(" Column index is outside of the 0"+" to number of variables - 1 range");
}
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new ModelSpecificationException(LocalizedFormats.INDEX_LARGER_THAN_MAX,i,this.begin);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<length){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=begin;i<begin+length;i++){
if(Double.contains(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(storedData[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
for(int i=begin;i<begin+length;i++){
if(begin>=Wmax){
++begin;
}
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
if(FastMath.abs(storedData[i]-weights[i])>FastMath.max(FastMath.abs(storedData[i]),FastMath.abs(weights[i]))*getRelativeThreshold()&&difference>getAbsoluteThreshold()){
return false;
}
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
xAug[i][0]=1.0;
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
count+=uniCounterOffset[i]*c[i];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.charAt(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.charAt(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.charAt(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.charAt(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
list[target]=list[i];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
list[i]=begin;
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
list[target]=list[i];
list[i]=begin;

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<=begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=begin;i<begin+length;i++){
begin++;
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<=begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<length){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
if(Math.abs(storedData[i]-storedData[i])>Math.max(Math.abs(storedData[i]),Math.abs(storedData[i]))*getRelativeThreshold()&&difference>getAbsoluteThreshold()){
return false;
}
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=r;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
if(FastMath.abs(storedData[i]-storedData[i])>FastMath.max(FastMath.abs(storedData[i]),FastMath.abs(storedData[i]))*getRelativeThreshold()&&difference>getAbsoluteThreshold()){
return false;
}
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i<0){
i=-i-2;
}
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=polynomials.length){
i--;
}
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new NotPositiveException(weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=begin;i<begin+length;i++){
FastMathCalc.expint(i,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
expIntA[i+FastMath.EXP_INT_TABLE_MAX_INDEX]=tmp[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
expIntB[i+FastMath.EXP_INT_TABLE_MAX_INDEX]=tmp[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
FastMathCalc.expint(i,storedData);
expIntA[i+FastMath.EXP_INT_TABLE_MAX_INDEX]=tmp[0];
expIntB[i+FastMath.EXP_INT_TABLE_MAX_INDEX]=tmp[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ta[i][i]=main[i];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ba[i][i]=main[i];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.containsKey(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
begin+=i;
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=start;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
out[ranks[i].getPosition()]=begin;
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=startIdx;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;idxStep<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
itest=0;
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
return false;
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(buf[i]>='0'&&buf[i]<='9'&&!containsPositiveWeight){
begin++;
}
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
length++;
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<=begin+length;i++){
length++;
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
length++;
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<length){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<=begin+length;i++){
length++;
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<length){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(begin==(length/2)*4){
sp=i;
break;
}
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(begin==(length/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'&&!containsPositiveWeight){
begin++;
}

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<checkFeasableCount+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isFeasible(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(begin<0){
coefficients[i]=0;
continue;
}
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=rows;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.abs(weights[i])){
throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=i;k<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[0]=as[0];
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[0]=as[0];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[0]=as[0];
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[0]=as[0];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[0]=as[0];
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[0]=as[0];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[0]=as[0];
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[0]=as[0];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[0]=as[0];
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[0]=as[0];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
ys[0]=as[0];
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
ys[0]=as[0];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
split(FACT[i],storedData);
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[0]=as[0];
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[0]=as[0];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
ys[0]=as[0];
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[0]=as[0];
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[0]=as[0];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
splitMult(storedData,storedData,storedData);
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[0]=as[0];
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[0]=as[0];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[0]=as[0];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[0]=as[0];
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[0]=as[0];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
ys[1]=as[1];
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[0]=as[0];
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[0]=as[0];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
splitAdd(storedData,weights,storedData);
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
split(FACT[i],storedData);
ys[0]=as[0];
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ys[0]=as[0];
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
splitReciprocal(storedData,weights);
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];
splitMult(storedData,storedData,storedData);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],storedData);
splitReciprocal(storedData,weights);
splitAdd(storedData,weights,storedData);
ys[0]=as[0];
ys[1]=as[1];

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;j<=begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
i++;
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
begin++;
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(begin>=seed.length){
j=0;
}
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
i++;
begin++;
if(begin>=seed.length){
j=0;
}

if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
after[i]+=previous[i]+scaled[i];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=nreq;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.sqrt(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ltI[i]=FastMath.sqrt(weights[i]);
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
storedData[i]=FastMath.abs(storedData[i]-weights[i]);
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=ileft;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<length-2){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=begin;i<begin+length;i++){
tc[n-1]=c[n];
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkAllFiniteReal(storedData);
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkAllFiniteReal(weights);
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MathArrays.checkOrder(storedData);
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(length==1){
return new double[]{weights[0]};
}
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(length==2){
return new double[]{weights[0],yval[1]};
}
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.storedData=observations.clone();
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.weights=null;
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(begin<0){
yInt=SGN_MASK_FLOAT-yInt;
}
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
test(values,begin,length);
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(length==0){
return Double.NaN;
}
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(length==1){
return values[begin];
}
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super.setData(values,begin,length);
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
insertionSort(storedData,begin,i);
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
if(!Precision.equals(storedData[i],storedData[i])){
return false;
}
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
if(!Precision.equalsIncludingNaN(storedData[i],storedData[i])){
return false;
}
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
if(!containsPositiveWeight&&weights[i]>0.0){
containsPositiveWeight=true;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,268
org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,271
org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,274
org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,277
org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,278
org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,282
org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,286
========
if(!containsPositiveWeight){
throw new MathIllegalArgumentException(LocalizedFormats.WEIGHT_AT_LEAST_ONE_NON_ZERO);
}
if(!containsPositiveWeight){
throw new MathIllegalArgumentException(LocalizedFormats.WEIGHT_AT_LEAST_ONE_NON_ZERO);
}
return test(values,begin,length,allowEmpty);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(!allowEmpty){
throw new MathIllegalArgumentException(LocalizedFormats.WEIGHT_AT_LEAST_ONE_NON_ZERO);
}
return test(values,begin,length,allowEmpty);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!containsPositiveWeight){
if(length==0&&!containsPositiveWeight){
return false;
}
throw new MathIllegalArgumentException(LocalizedFormats.WEIGHT_AT_LEAST_ONE_NON_ZERO);
}
return test(values,begin,length,allowEmpty);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!allowEmpty){
if(length==0&&!containsPositiveWeight){
return false;
}
throw new MathIllegalArgumentException(LocalizedFormats.WEIGHT_AT_LEAST_ONE_NON_ZERO);
}
return test(values,begin,length,allowEmpty);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
org.apache.commons.math.stat.descriptive.summary.Sum,159
UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=begin;i<begin+length;i++){
dev=values[i]-value;
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<=begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=begin;i<begin+length;i++){
++begin;
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
break;
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
++begin;
break;

sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
weights[begin]=work[i];
for(int i=begin;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
weights[i]=value;
for(int i=begin;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=j;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isInfinite(values[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);
}
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=k;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=i;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
ak2=value;
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<k+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=start;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=length;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=n;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=k;i<=begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=lowLength;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[begin]=weights[i];
for(int i=begin;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=numPoints;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
gradient[i]=sum;
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
i++;
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(Double.isNaN(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(weights[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,weights[i]);
}

sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
bytes[i++]=(byte)(begin&0xff);
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
System.arraycopy(values,0,values,length,begin);
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=begin;i<begin+exp;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=np;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
mant[i]=0;
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=crossoverIndex;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
sumExpected+=expected[i];
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
countSum2+=observed2[i];
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<j+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sum=sum+LANCZOS[0];
for(int i=begin;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=pos;i<pos+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=pos;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<pos+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+size;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n=FastMath.round(value);
for(int i=begin;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=col;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<binCount+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
result.mant[i]=0;
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
begin=begin;
for(int i=begin;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
i=begin;
for(int i=begin;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
i--;
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=index;i<index+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=index;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<index+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
value=values[i];
for(int i=begin;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sum=value*value;
for(int i=begin;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
sum/=values[begin];
for(int i=begin;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
sum+=sum*sum;
for(int i=begin;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
sum/=values[begin];
for(int i=begin;i<=begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
sum+=sum*sum;
for(int i=begin;i<=begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
sum/=values[begin];
sum+=sum*sum;
for(int i=begin;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
sum/=values[begin];
sum+=sum*sum;
for(int i=begin;i<=begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=startRow;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=boundIndex;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
begin++;
for(int i=begin;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<n+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
  - org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=nvars;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
rss[i-1]=sum;
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=lsd;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
v[i]=value;
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[length+begin]=sum;
for(int i=begin;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COUNT THESE===> Subject [_name=math, _id=41, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.descriptive.moment.VarianceTest testEvaluateArraySegmentWeighted
TESTING : org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.descriptive.moment.VarianceTest::testEvaluateArraySegmentWeighted
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
for(int i=begin;i<begin+length;i++){
out[row]=sum;
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
out[col]=sum;
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
boundDifference[i]=upperBound[i]-lowerBound[i];
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=last;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=rank;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
result.mant[i]=a.mant[i]+b.mant[i]-begin*RADIX;
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(divisor.mant[i]<remainder[i]){
break;
}
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
luMax[i]=luCol[i];
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
luCol[i]=sum;
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
luMax[i]=luCol[i];
luCol[i]=sum;

sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
begin-=i;
for(int i=begin;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
z[j]+=weights[i]*value;
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=halfN;i<begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=startRow;i<=begin+length;i++){
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
s+=dFdYi[l]*z[zIndex];
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
xsav=MINUS_ONE;
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
xsav=ONE;
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
if(begin==bytes.length){
return ;
}
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
remainder[i]=begin-begin*RADIX;
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
V[i][k+1]=V[i][k];
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
V[i][k]=sum;
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
V[i][k+1]=V[i][k];
V[i][k]=sum;

sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
U[i][k+1]=U[i][k];
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
U[i][k]=sum;
sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=begin;i<begin+length;i++){
U[i][k+1]=U[i][k];
U[i][k]=sum;

sum+=values[i]*weights[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/math/math_41_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
Timeout!
