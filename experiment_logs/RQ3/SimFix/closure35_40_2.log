java version "1.7.0_231"
OpenJDK Runtime Environment (rhel-2.6.19.1.el7_6-x86_64 u231-b01)
OpenJDK 64-Bit Server VM (build 24.231-b01, mixed mode)
Check out 22784dc9 to /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j/ OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Run post-checkout hook..................................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 22784dc9:7e3e1a66..................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Closure-35b..................................... OK
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 1
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
/home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2
PURIFY IS FALSE
=================================================
Project : closure_35	start : 19/10/18 02:24

Field type inconsistancy 'THIS' with types : Token and int
Variable type inconsistancy of 'start' in method 'parseRegExp,String,String' with types : int and char
Variable type inconsistancy of 'end' in method 'parseRegExp,String,String' with types : int and char
Field type inconsistancy 'type' with types : JSType and Type
Field type inconsistancy 'SUPER' with types : FunctionInjector.Reference and SimpleReference<SimpleSlot>
Variable type inconsistancy of 'name' in method 'visit,NodeTraversal,Node,Node' with types : Name and String
Field type inconsistancy 'errors' with types : JSError[] and List<JSError>
readFailedTest: path is /mnt/nfs/work1/brun/mmotwani/SimFix/d4j-info/failed_tests/closure/35.txt#ATTEMPTS: 1

# FAILING TESTS: 1
TIMEOUT : 18000000
===========
locations= [<com.google.javascript.jscomp.TypeCheck,510>, <com.google.javascript.jscomp.TypeCheck,512>, <com.google.javascript.jscomp.TypeCheck,917>, <com.google.javascript.rhino.jstype.JSType,93>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1314>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1456>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1491>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1492>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1494>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1493>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1497>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1617>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1620>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1621>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1625>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1626>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1628>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1629>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1630>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1633>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1638>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1643>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1645>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1647>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1655>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1622>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1664>, <com.google.javascript.rhino.jstype.PrototypeObjectType,356>, <com.google.javascript.rhino.jstype.PrototypeObjectType,358>, <com.google.javascript.rhino.jstype.PrototypeObjectType,361>, <com.google.javascript.rhino.jstype.PrototypeObjectType,362>, <com.google.javascript.rhino.jstype.PrototypeObjectType,363>, <com.google.javascript.rhino.jstype.PrototypeObjectType,366>, <com.google.javascript.rhino.jstype.PrototypeObjectType,365>, <com.google.javascript.rhino.jstype.PrototypeObjectType,369>, <com.google.javascript.rhino.jstype.PrototypeObjectType,370>, <com.google.javascript.rhino.jstype.PrototypeObjectType,372>, <com.google.javascript.rhino.jstype.PrototypeObjectType,373>, <com.google.javascript.rhino.jstype.PrototypeObjectType,374>, <com.google.javascript.rhino.jstype.PrototypeObjectType,378>, <com.google.javascript.rhino.jstype.PrototypeObjectType,379>, <com.google.javascript.rhino.jstype.PrototypeObjectType,380>, <com.google.javascript.rhino.jstype.PrototypeObjectType,382>, <com.google.javascript.rhino.jstype.PrototypeObjectType,383>, <com.google.javascript.rhino.jstype.PrototypeObjectType,387>, <com.google.javascript.rhino.jstype.PrototypeObjectType,389>, <com.google.javascript.rhino.jstype.PrototypeObjectType,391>, <com.google.javascript.rhino.jstype.PrototypeObjectType,392>, <com.google.javascript.rhino.jstype.PrototypeObjectType,458>, <com.google.javascript.rhino.jstype.UnionType,189>, <com.google.javascript.rhino.jstype.UnionType,190>, <com.google.javascript.rhino.jstype.UnionType,191>, <com.google.javascript.rhino.jstype.UnionType,194>, <com.google.javascript.rhino.jstype.UnionType,195>, <com.google.javascript.rhino.jstype.UnionType,196>, <com.google.javascript.rhino.jstype.UnionType,405>, <com.google.javascript.rhino.jstype.UnionType,406>, <com.google.javascript.rhino.jstype.UnionType,408>, <com.google.javascript.rhino.jstype.UnionType,409>, <com.google.javascript.rhino.jstype.UnionType,410>, <com.google.javascript.rhino.jstype.UnionType,411>, <com.google.javascript.rhino.jstype.UnionType,412>, <com.google.javascript.rhino.jstype.UnionType,413>, <com.google.javascript.rhino.jstype.UnionType,415>, <com.google.javascript.rhino.jstype.UnionType,416>, <com.google.javascript.rhino.jstype.UnionType,417>, <com.google.javascript.rhino.jstype.UnionType,418>, <com.google.javascript.rhino.jstype.UnionType,419>, <com.google.javascript.jscomp.parsing.IRFactory,799>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1713>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1714>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1716>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1717>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1724>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1967>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1975>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1976>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1980>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1982>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1983>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1984>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1985>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1988>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1989>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1993>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1994>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1996>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1997>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2001>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2003>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2005>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2006>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2007>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2010>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2012>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2060>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2061>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2063>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2067>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2068>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2072>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2074>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2075>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2082>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2085>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2087>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2091>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2093>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2094>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2095>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2106>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2113>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2115>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2119>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2120>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2125>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2129>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2130>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2132>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2136>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2137>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2138>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2139>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2147>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2149>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2150>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2169>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2251>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2252>, <com.google.javascript.jscomp.parsing.JsDocTokenStream,135>, <com.google.javascript.jscomp.parsing.JsDocTokenStream,136>, <com.google.javascript.rhino.JSDocInfo,939>, <com.google.javascript.jscomp.ChainableReverseAbstractInterpreter,119>, <com.google.javascript.jscomp.ChainableReverseAbstractInterpreter,120>, <com.google.javascript.jscomp.ChainableReverseAbstractInterpreter,121>, <com.google.javascript.jscomp.ChainableReverseAbstractInterpreter,122>, <com.google.javascript.jscomp.ChainableReverseAbstractInterpreter,125>, <com.google.javascript.jscomp.ChainableReverseAbstractInterpreter,158>, <com.google.javascript.jscomp.ChainableReverseAbstractInterpreter,159>, <com.google.javascript.jscomp.TypeInference,688>, <com.google.javascript.jscomp.TypeInference,689>, <com.google.javascript.jscomp.TypeInference,690>, <com.google.javascript.jscomp.TypeInference,691>, <com.google.javascript.jscomp.TypeInference,692>, <com.google.javascript.jscomp.TypeInference,696>, <com.google.javascript.jscomp.TypeInference,1122>, <com.google.javascript.jscomp.TypeInference,1123>, <com.google.javascript.jscomp.LinkedFlowScope,460>, <com.google.javascript.jscomp.LinkedFlowScope,462>, <com.google.javascript.jscomp.LinkedFlowScope,463>, <com.google.javascript.jscomp.LinkedFlowScope,468>, <com.google.javascript.jscomp.LinkedFlowScope,470>, <com.google.javascript.jscomp.LinkedFlowScope,487>, <com.google.javascript.jscomp.JSError,193>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,57>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,53>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,55>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,58>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,59>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,71>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,72>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,75>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,76>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,85>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,89>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,96>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,97>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,98>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,99>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,102>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,106>, <com.google.javascript.rhino.jstype.RecordType,79>, <com.google.javascript.rhino.jstype.RecordType,67>, <com.google.javascript.rhino.jstype.RecordType,68>, <com.google.javascript.rhino.jstype.RecordType,80>, <com.google.javascript.rhino.jstype.RecordType,82>, <com.google.javascript.rhino.jstype.RecordType,83>, <com.google.javascript.rhino.jstype.RecordType,84>, <com.google.javascript.rhino.jstype.RecordType,88>, <com.google.javascript.rhino.jstype.RecordType,89>, <com.google.javascript.rhino.jstype.RecordType,92>, <com.google.javascript.rhino.jstype.RecordType,93>, <com.google.javascript.rhino.jstype.RecordType,97>, <com.google.javascript.rhino.jstype.RecordType,98>, <com.google.javascript.rhino.jstype.RecordType,122>, <com.google.javascript.rhino.jstype.RecordType,128>, <com.google.javascript.rhino.jstype.RecordType,132>, <com.google.javascript.rhino.jstype.RecordType,133>, <com.google.javascript.rhino.jstype.RecordType,136>, <com.google.javascript.rhino.jstype.RecordType,203>, <com.google.javascript.rhino.jstype.RecordType,208>, <com.google.javascript.rhino.jstype.RecordType,213>, <com.google.javascript.rhino.jstype.RecordType,221>, <com.google.javascript.rhino.jstype.RecordType,222>, <com.google.javascript.rhino.jstype.RecordType,247>, <com.google.javascript.rhino.jstype.RecordType,248>, <com.google.javascript.rhino.jstype.RecordType,249>, <com.google.javascript.rhino.jstype.RecordType,252>, <com.google.javascript.rhino.jstype.RecordType,253>, <com.google.javascript.rhino.jstype.RecordType,254>]
======================com.google.javascript.jscomp.TypeCheck,510
========
Preconditions.checkState(n.isFunction());
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
compiler.reportCodeChange();
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(createNameInformation(t,n,parent)==null){
return ;
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isString()){
OVERRIDING_PROTOTYPE_WITH_NON_OBJECT="Is there a missing \'+\' on the previous line?";
}else if(reportMissingProperties){
msg="The result of the \'"+Token.name(n.getType()).toLowerCase();
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
t.getCompiler().report(t.makeError(n,reportUnknownTypes,USELESS_CODE_ERROR,OVERRIDING_PROTOTYPE_WITH_NON_OBJECT));
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.setString(OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
compiler.reportCodeChange();
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.setString(OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);
compiler.reportCodeChange();
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!reportMissingProperties){
return ;
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkArgument(n.isNew());
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!reportMissingProperties){
return ;
}
Preconditions.checkArgument(n.isNew());
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.removeChild(parent);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.removeChild(parent);
compiler.reportCodeChange();
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(n.isCall());
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isName()&&"eval".equals(first.getString())){
first.putBooleanProp(Node.DIRECT_EVAL,true);
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parent=n;
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!NodeUtil.isObjectLitKey(r.node,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.mayEffectMutableState(parent)){
return ;
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
block=IR.block();
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
parent.addChildToFront(parent);
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
block=IR.block();
parent.addChildToFront(parent);

ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
return ;
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.replaceChild(parent,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),String.format("%s.superClass_.%s.call",parent.getFirstChild().getFirstChild().getQualifiedName(),OVERRIDING_PROTOTYPE_WITH_NON_OBJECT),callee,"goog.base"));
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
n.getFirstChild().getNext().getNext().addChildToFront(IR.exprResult(n));
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
n.getFirstChild().getNext().getNext().addChildToFront(IR.exprResult(n));
compiler.reportCodeChange();

ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getFirstChild()==null||!callTarget.isGetProp()){
return n;
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.getFirstChild().getFirstChild().isName()){
return false;
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
n.addChildAfter(bind.thisValue.cloneTree(),IR.getprop(n.cloneTree(),IR.string("call").srcref(callTarget)));
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
n.putBooleanProp(Node.FREE_CALL,false);
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
n.addChildAfter(bind.thisValue.cloneTree(),IR.getprop(n.cloneTree(),IR.string("call").srcref(callTarget)));
n.putBooleanProp(Node.FREE_CALL,false);

ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
addSimplifiedExpression(n.getFirstChild().getNext(),n);
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
addSimplifiedExpression(n.getFirstChild().getNext().getNext(),n);
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
addSimplifiedExpression(n.getFirstChild().getNext(),n);
addSimplifiedExpression(n.getFirstChild().getNext().getNext(),n);

ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
continue;
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
tryRemoveDeadAssignments(t,t.getControlFlowGraph());
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(OVERRIDING_PROTOTYPE_WITH_NON_OBJECT.isEmpty()||compiler.getCodingConvention().isExported(name)){
return ;
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!t.getScope().getVar(n.getString()).getSourceFile().getName().isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.TypeCheck,512
========
case Token.STRING :
visitCall(t,n);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
typeable=!parent.isExprResult();
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
visitCall(t,n);
typeable=!parent.isExprResult();

if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.RETURN :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
typeable=visitName(t,n,parent);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.PARAM_LIST :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
ensureTyped(t,n,NULL_TYPE);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.NUMBER :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
ensureTyped(t,n,ARRAY_TYPE);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.REGEXP :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
ensureTyped(t,n,VOID_TYPE);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.TYPEOF :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
maybeEliminateExpressionByName(t,n,parent);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
handleTypedefDefinition(t,n,parent);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.FUNCTION :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
trySimplifyNewDate(t,n,parent);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.GETPROP :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
removeVarDeclarationsByNameOrRvalue(t,n,parent);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.NAME :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.FOR :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
ensureTyped(t,n,getJSType(n.getLastChild()));
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.TRUE :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
visitGetProp(t,n,n);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
typeable=!(n.isAssign()&&n.getFirstChild()==n);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
visitGetProp(t,n,n);
typeable=!(n.isAssign()&&n.getFirstChild()==n);

if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.GETELEM :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
checkForClassDefiningCalls(t,n,parent);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.NEW :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
report(t,n,UNEXPECTED_TOKEN,Token.name(n.getType()));
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
ensureTyped(t,n);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
report(t,n,UNEXPECTED_TOKEN,Token.name(n.getType()));
ensureTyped(t,n);

if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
inputId=n.getInputId();
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
type=n==n.getFirstChild()?Ref.Type.CALL_GET:Ref.Type.ALIASING_GET;
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.BANG :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.WHILE :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.AND :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.OBJECTLIT :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
Preconditions.checkState(nullCount==0);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.TYPEOF :

case Token.STRING :
Preconditions.checkState(nullCount==0);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
validator.expectSwitchMatchesCase(t,n,getJSType(parent.getFirstChild()),getJSType(n.getFirstChild()));
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
typeable=false;
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
validator.expectSwitchMatchesCase(t,n,getJSType(parent.getFirstChild()),getJSType(n.getFirstChild()));
typeable=false;

if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.WITH :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STAR :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
n.setJSType(getNativeType(STRING_TYPE));
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.DELPROP :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
setOriginalName(n,n.getLastChild().getString());
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.ARRAYLIT :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.INC :
left=n.getFirstChild();
validator.expectNumber(t,left,getJSType(left),"increment/decrement");
ensureTyped(t,n,NUMBER_TYPE);
break;

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.NOT :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.NEG :
left=n.getFirstChild();
validator.expectNumber(t,left,getJSType(left),"sign operator");
ensureTyped(t,n,NUMBER_TYPE);
break;

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.EQ :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
checkPropertyDeprecation(t,n,parent);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
checkPropertyVisibility(t,n,parent);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
checkConstantProperty(t,n);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
checkPropertyDeprecation(t,n,parent);
checkPropertyVisibility(t,n,parent);
checkConstantProperty(t,n);

if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.GE :
leftType=getJSType(n.getFirstChild());
rightType=getJSType(n.getLastChild());

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(n.isString()){
maybeMarkCandidate(n);
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case 1 :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
if(n.hasOneChild()){
checkForTypedef(t,n.getFirstChild(),n.getJSDocInfo());
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super.visit(t,n,parent);
case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(n.getFirstChild().isName()&&RENAME_PROPERTY_FUNCTION_NAME.equals(n.getFirstChild().getString())){
countCallCandidates(t,n);
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(n.getFirstChild().isGetProp()&&n.getFirstChild().isQualifiedName()){
maybeDeclareQualifiedName(t,n.getJSDocInfo(),n.getFirstChild(),n,firstChild.getNext());
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.CATCH :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.VAR :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
child=n.getFirstChild().getNext();
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
child=NodeUtil.getLoopCodeBlock(n);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
type=getValueType(n.getFirstChild());
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
type=Name.Type.GET;
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
type=Name.Type.SET;
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.ASSIGN :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
annotateCalls(n);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
annotateFunctions(n,n);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
annotateDispatchers(n,n);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
annotateFunctions(n,n);
annotateDispatchers(n,n);

if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.EQUALS :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
isSet=true;
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
type=n.getFirstChild()==null?Name.Type.OTHER:getValueType(n.getFirstChild());
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
isSet=true;
type=n.getFirstChild()==null?Name.Type.OTHER:getValueType(n.getFirstChild());

if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
tryMinimizeExits(NodeUtil.getLoopCodeBlock(n),Token.CONTINUE,null);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(NodeUtil.getImpureBooleanValue(NodeUtil.getConditionExpression(n))==TernaryValue.FALSE){
tryMinimizeExits(n.getFirstChild(),Token.BREAK,null);
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
tryMinimizeExits(NodeUtil.getLoopCodeBlock(n),Token.CONTINUE,null);
if(NodeUtil.getImpureBooleanValue(NodeUtil.getConditionExpression(n))==TernaryValue.FALSE){
tryMinimizeExits(n.getFirstChild(),Token.BREAK,null);
}

if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if("undefined".equals(n.getString())||"Infinity".equals(n.getString())){
return n.getString();
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(!inExterns&&n.getFirstChild().isGetProp()){
return getImplicitActionsFromCall(n,n.getFirstChild().getJSType());
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.OR :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.ASSIGN_BITOR :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.OR :
Node trySimplifyUnusedResult(n.getLastChild())=trySimplifyUnusedResult(n.getLastChild());
if(conditionalResultNode==null){
Preconditions.checkState(n.hasOneChild());
parent=trySimplifyUnusedResult(n.getFirstChild());
}
break;

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(parent.isTry()){
if(NodeUtil.isTryCatchNodeContainer(n)){
return ;
}
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
NodeUtil.maybeAddFinally(parent.getParent());
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
if(n.getFirstChild()==null){
return ;
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
maybeAliasNamesOnAssign(n,n.getFirstChild());
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(n.getFirstChild()==null){
return ;
}
maybeAliasNamesOnAssign(n,n.getFirstChild());

if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.CALL :
Node n.getFirstChild()=n.getFirstChild();
String n.getFirstChild().getQualifiedName()=calledFn.getQualifiedName();
if(name!=null){
Config findMatching(n.getFirstChild().getQualifiedName())=findMatching(name);
if(config!=null){
doSubstitutions(t,config,n);
return ;
}
}

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.GETELEM :
Node n.getFirstChild().getNext()=n.getFirstChild().getNext();
if(dest.isString()){
String n.getFirstChild().getNext().getString()=dest.getString();
if(s.equals("prototype")){
processPrototypeParent(parent,t.getInput());
}else {
markPropertyAccessCandidate(dest,t.getInput());
}
}

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
getGlobalName(t,n.getFirstChild(),n);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.ASSIGN :
JSDocInfo n.getJSDocInfo()=n.getJSDocInfo();
if(info!=null&&info.isNoTypeCheck()){
if(reportMissingProperties){
noTypeCheckSection++;
}else {
noTypeCheckSection--;
}
}

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
addPossibleSignature(n.getFirstChild().getString(),key.getFirstChild(),t);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
visitFunctionNode(n,n);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
info=(JSDocInfo)n.getProp(Node.JSDOC_INFO_PROP);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parent=parent.getNext();
case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case GET_BOOLEAN :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
maybeRecordExport(n);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(mayHaveSideEffects(n)){
return n;
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
knownLength=n.getChildCount();
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(mayHaveSideEffects(n)){
return n;
}
knownLength=n.getChildCount();

if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
knownLength=n.getString().length();
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
{
String n.getFirstChild().getString()=n.getFirstChild().getString();
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.GETELEM :
Node n.getFirstChild().getNext()=n.getFirstChild().getNext();
if(dest.isString()){
if(dest.getString().equals("prototype")){
processPrototypeParent(t,n);
}else {
if(parent.isAssign()&&parent.getFirstChild()==n){
addPossibleSignature(dest.getString(),n.getNext(),t);
}
}
}

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
leftType=getJSType(n);
case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
rightType=getJSType(right).restrictByNotNullOrUndefined();
case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validator.expectAnyObject(t,n,leftType,"deterministic instanceof yields false");
case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validator.expectActualObject(t,right,rightType,"instanceof requires an object");
case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ensureTyped(t,n,BOOLEAN_TYPE);
case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(n.getFirstChild().getNext().isString()&&parent.isAssign()){
Node parent.getFirstChild().getNext()=parent.getFirstChild().getNext();
addPossibleSignature(n.getFirstChild().getNext().getString(),parent.getFirstChild().getNext(),t);
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
leftType=getJSType(left);
case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
rightType=getJSType(right);
case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validator.expectObject(t,n,rightType,"\'in\' requires an object");
case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validator.expectString(t,left,leftType,"left side of \'in\'");
case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.INSTANCEOF :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(leftType.testForEquality(rightType)!=TernaryValue.UNKNOWN){
if(n.isNE()){
result=result.not();
}
report(t,n,DETERMINISTIC_TEST,leftType.toString(),rightType.toString(),result.toString());
}
case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getFunctionName(n)!=null){
return name;
}
case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(n.hasMoreThanOneChild()&&n.getFirstChild().isName()){
Node n.getFirstChild().getNext()=n.getFirstChild().getNext();
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
info=n.getJSDocInfo();
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
valueNodeType=n.getFirstChild()!=null?n.getFirstChild().getType():Token.VOID;
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
info=n.getJSDocInfo();
valueNodeType=n.getFirstChild()!=null?n.getFirstChild().getType():Token.VOID;

if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(n.getFirstChild().getString()!=null&&n.getFirstChild().getString().length()>0&&t.getScope().isDeclared(n.getFirstChild().getString(),false)&&!(t.getScope().getVar(n.getFirstChild().getString()).getType() instanceof FunctionType)){
report(t,n,FUNCTION_MASKS_VARIABLE,n.getFirstChild().getString());
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
checkNoTypeCheckSection(n,true);
case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(dereferenceToObject(leftType)==null||objType.getJSDocInfo()!=null){
return ;
}
case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(parent==null){
return ;
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
docInfo=n.getJSDocInfo();
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(!(parent.isVar()&&!parent.hasOneChild())){
docInfo=parent.getJSDocInfo();
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(parent==null){
return ;
}
docInfo=n.getJSDocInfo();
if(!(parent.isVar()&&!parent.hasOneChild())){
docInfo=parent.getJSDocInfo();
}

if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.THIS :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(n.getFirstChild().isFunction()){
fnNode=n.getFirstChild();
}else if(NodeUtil.isFunctionObjectCall(n)){
Node n.getFirstChild().getFirstChild()=n.getFirstChild().getFirstChild();
if(n.getFirstChild().getFirstChild().isFunction()){
fnNode=n.getFirstChild().getFirstChild();
}
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
traverseFunction(n,parent);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parent=n;
case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
result=nullCount&0xffffffffL>>>nullCount;
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getNext()!=null){
OVERRIDING_PROTOTYPE_WITH_NON_OBJECT=arg.getNext().getString();
}
case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
compiler.reportCodeChange();
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(rightType.isNumber()){
validator.expectNumber(t,n,leftType,"left side of numeric comparison");
}else if(leftType.isNumber()){
validator.expectNumber(t,n,rightType,"right side of numeric comparison");
}else if(leftType.matchesNumberContext()&&rightType.matchesNumberContext()){
}else {
String "left side of comparison"="left side of comparison";
validator.expectString(t,n,leftType,message);
validator.expectNotNullOrUndefined(t,n,leftType,message,getNativeType(STRING_TYPE));
message="right side of comparison";
validator.expectString(t,n,rightType,message);
validator.expectNotNullOrUndefined(t,n,rightType,message,getNativeType(STRING_TYPE));
}
case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.IN :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.SUB :
validator.expectNumber(t,n,leftType,"left operand");
validator.expectNumber(t,right,rightType,"right operand");
break;

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.ASSIGN_BITAND :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.BITOR :
validator.expectBitwiseable(t,n,leftType,"bad left operand to bitwise operator");
validator.expectBitwiseable(t,right,rightType,"bad right operand to bitwise operator");
break;

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.ASSIGN_ADD :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(!t.getScope().getVar(n.getString()).getSourceFile().getName().isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
visitVar(t,n);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
typeable=false;
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
visitVar(t,n);
typeable=false;

if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
visitCall(t,n);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
typeable=!parent.isExprResult();
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
visitCall(t,n);
typeable=!parent.isExprResult();

if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
ensureTyped(t,n,NULL_TYPE);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
ensureTyped(t,n,ARRAY_TYPE);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
ensureTyped(t,n,VOID_TYPE);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
typeable=visitName(t,n,parent);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
checkConstructorDeprecation(t,n,parent);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
maybeEliminateExpressionByName(t,n,parent);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
handleTypedefDefinition(t,n,parent);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
trySimplifyNewDate(t,n,parent);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
removeVarDeclarationsByNameOrRvalue(t,n,parent);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
ensureTyped(t,n,getJSType(n.getLastChild()));
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
n.setJSType(getNativeType(NULL_TYPE));
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
n.setJSType(getNativeType(NUMBER_TYPE));
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.CALL :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;

case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
visitGetProp(t,n,n);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
typeable=!(n.isAssign()&&n.getFirstChild()==n);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
visitGetProp(t,n,n);
typeable=!(n.isAssign()&&n.getFirstChild()==n);

if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
checkForClassDefiningCalls(t,n,parent);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
visitCallNode(n,n);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
defineVar(n,n);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.FOR :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;

case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
inputId=n.getInputId();
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
checkNameDeprecation(t,n,parent);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
checkNameVisibility(t,n,parent);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
checkNameDeprecation(t,n,parent);
checkNameVisibility(t,n,parent);

if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
report(t,n,UNEXPECTED_TOKEN,Token.name(n.getType()));
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
ensureTyped(t,n);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
report(t,n,UNEXPECTED_TOKEN,Token.name(n.getType()));
ensureTyped(t,n);

if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
type=n==n.getFirstChild()?Ref.Type.CALL_GET:Ref.Type.ALIASING_GET;
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
Preconditions.checkState(nullCount==0);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
n.setJSType(getNativeType(STRING_TYPE));
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.PARAM_LIST :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;

case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.GETELEM :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;

case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.ARRAYLIT :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;

case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.NOT :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;

case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.EQ :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;

case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(n.isString()){
maybeMarkCandidate(n);
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(NodeUtil.getNearestFunctionName(n)!=null){
setOriginalName(n,NodeUtil.getNearestFunctionName(n));
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
Preconditions.checkArgument(parent.isFor(),"Unsupported assignment in replaceWithRhs. parent: %s",Token.name(parent.getType()));
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
Preconditions.checkState(n.hasOneChild());
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
if(n.getFirstChild().isName()&&n.getFirstChild().hasChildren()){
maybeAddFunction(new FunctionVar(n),t.getModule());
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
Preconditions.checkState(n.hasOneChild());
if(n.getFirstChild().isName()&&n.getFirstChild().hasChildren()){
maybeAddFunction(new FunctionVar(n),t.getModule());
}

if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(parent!=null);
case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;

case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
child=n.getFirstChild().getNext();
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
child=NodeUtil.getLoopCodeBlock(n);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.ASSIGN :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;

case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if("undefined".equals(n.getString())||"Infinity".equals(n.getString())){
return n.getString();
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
tryMinimizeExits(NodeUtil.getLoopCodeBlock(n),Token.CONTINUE,null);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(NodeUtil.getImpureBooleanValue(NodeUtil.getConditionExpression(n))==TernaryValue.FALSE){
tryMinimizeExits(n.getFirstChild(),Token.BREAK,null);
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
tryMinimizeExits(NodeUtil.getLoopCodeBlock(n),Token.CONTINUE,null);
if(NodeUtil.getImpureBooleanValue(NodeUtil.getConditionExpression(n))==TernaryValue.FALSE){
tryMinimizeExits(n.getFirstChild(),Token.BREAK,null);
}

if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(n.hasOneChild()){
checkForTypedef(t,n.getFirstChild(),n.getJSDocInfo());
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super.visit(t,n,parent);
case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;

case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(n.getFirstChild().isGetProp()&&n.getFirstChild().isQualifiedName()){
maybeDeclareQualifiedName(t,n.getJSDocInfo(),n.getFirstChild(),n,firstChild.getNext());
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
isSet=true;
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
type=n.getFirstChild()==null?Name.Type.OTHER:getValueType(n.getFirstChild());
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
isSet=true;
type=n.getFirstChild()==null?Name.Type.OTHER:getValueType(n.getFirstChild());

if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
type=getValueType(n.getFirstChild());
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
type=Name.Type.GET;
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
type=Name.Type.SET;
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(!inExterns&&n.getFirstChild().isGetProp()){
return getImplicitActionsFromCall(n,n.getFirstChild().getJSType());
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
annotateCalls(n);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
annotateFunctions(n,n);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
annotateDispatchers(n,n);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
annotateFunctions(n,n);
annotateDispatchers(n,n);

if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.FUNCTION :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;

case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(parent.isTry()){
if(NodeUtil.isTryCatchNodeContainer(n)){
return ;
}
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
NodeUtil.maybeAddFinally(parent.getParent());
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.HOOK :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;

case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(n.getFirstChild()==null){
return ;
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
maybeAliasNamesOnAssign(n,n.getFirstChild());
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(n.getFirstChild()==null){
return ;
}
maybeAliasNamesOnAssign(n,n.getFirstChild());

if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if("undefined".equals(n.getString())||"NaN".equals(n.getString())){
return TernaryValue.FALSE;
}else if("Infinity".equals(n.getString())){
return TernaryValue.TRUE;
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
info=(JSDocInfo)n.getProp(Node.JSDOC_INFO_PROP);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(n.getChildCount()<3){
return true;
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
n=n.getLastChild();
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
if(n.getChildCount()<3){
return true;
}
n=n.getLastChild();

if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
addPossibleSignature(n.getFirstChild().getString(),key.getFirstChild(),t);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
getGlobalName(t,n.getFirstChild(),n);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
visitFunctionNode(n,n);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getFunctionName(n)!=null){
return name;
}
case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;

case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
info=n.getJSDocInfo();
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
valueNodeType=n.getFirstChild()!=null?n.getFirstChild().getType():Token.VOID;
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
info=n.getJSDocInfo();
valueNodeType=n.getFirstChild()!=null?n.getFirstChild().getType():Token.VOID;

if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(n.getFirstChild().getNext().isString()&&parent.isAssign()){
Node parent.getFirstChild().getNext()=parent.getFirstChild().getNext();
addPossibleSignature(n.getFirstChild().getNext().getString(),parent.getFirstChild().getNext(),t);
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
{
String n.getFirstChild().getString()=n.getFirstChild().getString();
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(n.hasMoreThanOneChild()&&n.getFirstChild().isName()){
Node n.getFirstChild().getNext()=n.getFirstChild().getNext();
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(dereferenceToObject(leftType)==null||objType.getJSDocInfo()!=null){
return ;
}
case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;

case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(n.getFirstChild().getString()!=null&&n.getFirstChild().getString().length()>0&&t.getScope().isDeclared(n.getFirstChild().getString(),false)&&!(t.getScope().getVar(n.getFirstChild().getString()).getType() instanceof FunctionType)){
report(t,n,FUNCTION_MASKS_VARIABLE,n.getFirstChild().getString());
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
checkNoTypeCheckSection(n,true);
case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;

case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(parent==null){
return ;
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
docInfo=n.getJSDocInfo();
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(!(parent.isVar()&&!parent.hasOneChild())){
docInfo=parent.getJSDocInfo();
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(parent==null){
return ;
}
docInfo=n.getJSDocInfo();
if(!(parent.isVar()&&!parent.hasOneChild())){
docInfo=parent.getJSDocInfo();
}

if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
left=n.getFirstChild();
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
right=n.getLastChild();
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
leftType=getJSType(left);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
rightType=getJSType(right).restrictByNotNullOrUndefined();
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
validator.expectAnyObject(t,left,leftType,"deterministic instanceof yields false");
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
validator.expectActualObject(t,right,rightType,"instanceof requires an object");
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
ensureTyped(t,n,BOOLEAN_TYPE);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
left=n.getFirstChild();
right=n.getLastChild();
leftType=getJSType(left);
rightType=getJSType(right).restrictByNotNullOrUndefined();
validator.expectAnyObject(t,left,leftType,"deterministic instanceof yields false");
validator.expectActualObject(t,right,rightType,"instanceof requires an object");
ensureTyped(t,n,BOOLEAN_TYPE);

if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STRING :
tweakDefaultValueNode=parent.getNext();
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
result=nullCount&0xffffffffL>>>nullCount;
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(n.getFirstChild().isFunction()){
fnNode=n.getFirstChild();
}else if(NodeUtil.isFunctionObjectCall(n)){
Node n.getFirstChild().getFirstChild()=n.getFirstChild().getFirstChild();
if(n.getFirstChild().getFirstChild().isFunction()){
fnNode=n.getFirstChild().getFirstChild();
}
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nullCount>nullCount){
return n;
}
case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;

case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parent.detachChildren();
case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;

case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parent.isString()){
Node IR.add(IR.string("").srcref(n),parent)=IR.add(IR.string("").srcref(n),foldedStringNode);
foldedStringNode=replacement;
}
case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;

case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.getParent().replaceChild(n,parent);
case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;

case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
reportCodeChange();
case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;

case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(mayHaveSideEffects(left)){
return n;
}
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
knownLength=left.getChildCount();
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(mayHaveSideEffects(left)){
return n;
}
knownLength=left.getChildCount();

if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
knownLength=left.getString().length();
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(nullCount!=-1);
case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;

case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.getParent().replaceChild(n,IR.number(nullCount));
case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;

case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getNext()!=null){
OVERRIDING_PROTOTYPE_WITH_NON_OBJECT=arg.getNext().getString();
}
case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;

case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
traverseFunction(n,parent);
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;


case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parent=n;
case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;

case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
compiler.reportCodeChange();
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;

case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.ASSIGN_BITAND :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;

case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.ASSIGN_ADD :

case Token.STRING :
if(!NodeUtil.isObjectLitKey(n,n.getParent())){
ensureTyped(t,n,STRING_TYPE);
}else {
typeable=false;
}
break;

case Token.GETTER_DEF :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.TypeCheck,917
========
if(qVar.isTypeInferred()){
return ;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(identifyConstants.isTypeInferred()){
return ;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(depends.isTypeInferred()){
return ;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(reachingDef.isTypeInferred()){
return ;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!topScope.isDeclared(OVERRIDING_PROTOTYPE_WITH_NON_OBJECT,false)){
return ;
}
if(var.isTypeInferred()){
return ;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(compiler.isTypeInferred()){
return ;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(var.isTypeInferred()){
compiler.report(t.makeError(assign,BAD_PRIVATE_GLOBAL_ACCESS,name.getString(),var.getSourceFile().getName()));
return ;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(var.isTypeInferred()){
assign.removeChild(assign);
return ;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(var.isTypeInferred()){
assign.getParent().replaceChild(n,assign);
return ;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(var.isTypeInferred()){
compiler.reportCodeChange();
return ;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(var.isTypeInferred()){
assign.removeChild(assign);
assign.getParent().replaceChild(n,assign);
compiler.reportCodeChange();

return ;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(var.isTypeInferred()){
assign.removeChild(assign);
compiler.reportCodeChange();
return ;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
com.google.javascript.rhino.jstype.JSType,93
Find no block!
com.google.javascript.rhino.jstype.JSTypeRegistry,1314
com.google.javascript.rhino.jstype.JSTypeRegistry,1456
UNKNOWN ASTNode type : catch (IllegalArgumentException e) {
  compiler.report(t.makeError(n,INVALID_STYLE_ERROR,styleStr));
  return;
}

UNKNOWN ASTNode type : catch (IllegalArgumentException ex) {
  t.report(n,MALFORMED_REGEXP,ex.getMessage());
}

UNKNOWN ASTNode type : catch (NumberFormatException e) {
  return n;
}

UNKNOWN ASTNode type : catch (NumberFormatException e) {
  return n;
}

UNKNOWN ASTNode type : catch (UnsupportedOperationException e) {
  violation("getString failed for" + Token.name(n.getType()),n);
}

UNKNOWN ASTNode type : catch (UnsupportedOperationException e) {
  violation("getString failed for" + Token.name(n.getType()),n);
}

========
case Token.LC :
return createFromTypeNodesInternal(n.getFirstChild(),sourceName,scope).restrictByNotNullOrUndefined();


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.QMARK :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.LC :
return createOptionalType(createFromTypeNodesInternal(n.getFirstChild(),sourceName,scope));


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STAR :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.LC :
return createDefaultObjectUnion(createFromTypeNodesInternal(n,sourceName,scope));


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n==null){
return getNativeType(UNKNOWN_TYPE);
}
case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.EQUALS :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.LC :
return createFromTypeNodesInternal(n,sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(resolveMode==ResolveMode.LAZY_EXPRESSIONS){
boolean hasTypeName(n)=hasTypeName(n);
if(hasNames){
return new UnresolvedTypeExpression(this,n,sourceName);
}
}
case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.FALSE :
n.setJSType(getNativeType(BOOLEAN_TYPE));
break;

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.SETTER_DEF :
Preconditions.checkState(n.getParent().isObjectLit());
Preconditions.checkState(PROPERTY_CHECKING_UNION_SIZE==1);

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.NEW :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
sourceName=n.getString();
case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.CALL :
Node n.getFirstChild()=n.getFirstChild();
String n.getFirstChild().getQualifiedName()=calledFn.getQualifiedName();

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.AND :
VariableLiveness isVariableReadBeforeKill(n.getFirstChild(),sourceName)=isVariableReadBeforeKill(n.getFirstChild(),sourceName);
VariableLiveness isVariableReadBeforeKill(n.getLastChild(),sourceName)=isVariableReadBeforeKill(n.getLastChild(),variable);

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.CATCH :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!n.isGetProp()){
return false;
}
case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getType(n.getFirstChild()).isUnknownType()||type.isUnionType()){
return false;
}
case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
UNKNOWN ASTNode type : catch (IllegalArgumentException e) {
  compiler.report(t.makeError(n,INVALID_STYLE_ERROR,styleStr));
  return;
}

UNKNOWN ASTNode type : catch (UnsupportedOperationException ex) {
  error(NEGATING_A_NON_NUMBER_ERROR,left);
  return n;
}

UNKNOWN ASTNode type : catch (UnsupportedOperationException ex) {
  error(NEGATING_A_NON_NUMBER_ERROR,left);
  return n;
}

========
case Token.LC :
return createOptionalType(createFromTypeNodesInternal(n.getFirstChild(),sourceName,scope));

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.BITNOT :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.DELPROP :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.COMMA :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.ASSIGN :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.FOR :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.LC :
return getNativeType(UNKNOWN_TYPE);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 0
TESTING : closure_35
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 600 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test
  - com.google.javascript.jscomp.parsing.ParserTest::testJSDocAttachment11
  - com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertyDeclarationOnRecordType
  - com.google.javascript.jscomp.TypeCheckTest::testDuplicateRecordFields2
  - com.google.javascript.jscomp.TypeCheckTest::testDuplicateRecordFields1
  - com.google.javascript.jscomp.TypeCheckTest::testRecordType7
  - com.google.javascript.jscomp.TypeCheckTest::testRecordType4
  - com.google.javascript.jscomp.TypeCheckTest::testRecordType3
  - com.google.javascript.jscomp.TypeCheckTest::testRecordType1
  - com.google.javascript.jscomp.TypeCheckTest::testTypeInferenceWithNoEntry2
  - com.google.javascript.jscomp.TypeCheckTest::testTypeInferenceWithNoEntry1
  - com.google.javascript.jscomp.ExternExportsPassTest::testTypedef
Failing tests: 11
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
default :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.CALL :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.PARAM_LIST :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.GETELEM :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.ARRAYLIT :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.CATCH :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.HOOK :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
sourceName=n.getQualifiedName();
case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(sourceName==null)return ;
case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.LC :
return n.getJSType().restrictByNotNullOrUndefined();

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!n.isGetProp()){
return false;
}
case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getType(n.getFirstChild()).isUnknownType()||type.isUnionType()){
return false;
}
case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkNoTypeCheckSection(n,true);
case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.rhino.jstype.JSTypeRegistry,1491
UNKNOWN ASTNode type : catch (IllegalArgumentException e) {
  compiler.report(t.makeError(n,INVALID_STYLE_ERROR,styleStr));
  return;
}

UNKNOWN ASTNode type : catch (IllegalArgumentException ex) {
  t.report(n,MALFORMED_REGEXP,ex.getMessage());
}

UNKNOWN ASTNode type : catch (NumberFormatException e) {
  return n;
}

UNKNOWN ASTNode type : catch (NumberFormatException e) {
  return n;
}

UNKNOWN ASTNode type : catch (UnsupportedOperationException e) {
  violation("getString failed for" + Token.name(n.getType()),n);
}

UNKNOWN ASTNode type : catch (UnsupportedOperationException e) {
  violation("getString failed for" + Token.name(n.getType()),n);
}

========
for(Node child=node.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=typeNode.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=child.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=subtree.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=varNode.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=n.getFirstChild().getNext().getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node child=child.getFirstChild().getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child=child.getNext();
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=exportedObjectLit.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=val.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkNotNull(child);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(child.getType()==Token.BLOCK);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=n.getFirstChild().getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node child=objlit.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=block.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child=n.getFirstChild().getNext();
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
firstChild=child.getNext();
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
firstChild.detachFromParent();
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkNotNull(n.getJSType());
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(NodeUtil.isGet(n));
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=parent.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=constructor.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=root.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=current.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=n.getFirstChild();child!=null&&NodeUtil.isFunctionDeclaration(child);child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=parameters.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=thisTypeNode.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=objLitNode.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=n.getFirstChild();child!=firstChild;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(isUselessCase(firstChild,(firstChild==n.getFirstChild())?null:lastNonRemovable)){
removeCase(n,c);
return null;
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=args.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanVars(firstChild,n);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=firstArgument.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=arg.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=start.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=map.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=object.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=lp.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child=p.getNext();
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=typeArray.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=n.getFirstChild();child!=null||n.isScript();child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node child=paramsParent.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child=(JSDocInfo)n.getProp(Node.JSDOC_INFO_PROP);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=assignNode.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
restricted.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
defineSlot(n,n,child);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child=n.getNext();
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(!NodeUtil.isObjectLitKey(n,n.getParent()));
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
tryMinimizeExits(n,PROPERTY_CHECKING_UNION_SIZE,sourceName);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.copyNameAnnotations(n.getLastChild(),child);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope=traverseChildren(n,scope);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
NodeUtil.setDebugInformation(child.getFirstChild(),firstChild,sourceName+".prototype");
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.replaceChild(firstChild,child);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
tryMinimizeExits(firstChild,PROPERTY_CHECKING_UNION_SIZE,sourceName);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isTypeOf());
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
NodeUtil.copyNameAnnotations(ref.node.getLastChild(),firstChild);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isWhile());
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkArgument(n.isDo());
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
NodeUtil.redeclareVarsInsideBranch(n);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.detachChildren();
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
child.add(formatDetailedMessage(templateTypeName,sourceName,PROPERTY_CHECKING_UNION_SIZE,PROPERTY_CHECKING_UNION_SIZE));
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkNoTypeCheckSection(n,false);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.replaceChild(n,child);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isString());
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkArgument(n.isCall());
Preconditions.checkArgument(n.isString());
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
child=n.getChildAtIndex(1);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setResolvedTypeInternal(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
builder.reportCodeChange();
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.add(n);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.removeChild(child);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
firstChild=IR.regexp(firstChild,child);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isGetProp());
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.setString(coalescedVar.name);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.removeChild(n);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.removeChild(n);
builder.reportCodeChange();
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
builder.add(new CallSite(n,n,n,n,firstChild));
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.getParent().replaceChild(n,child);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
reportCodeChange();
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.setString(sourceName);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.replaceChild(n,child);
reportCodeChange();
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.getParent().replaceChild(n,firstChild);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.getParent().replaceChild(n,child);
reportCodeChange();
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
resolvedNamedTypes.putAll(scope,unresolvedNamedTypes.removeAll(scope));
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
tryDefineLexicalQualifiedNameRef(NodeUtil.getBestLValueName(n),n);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.addChildToBack(n);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.setString(toShadow.oldName);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.replaceChild(n,firstChild);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
builder.append(name(n));
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.removeChild(firstChild);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
firstChild.replaceChild(n,firstChild);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
templateTypeName=sourceName;
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
global.uses.add(n);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope=tightenTypesAfterAssertions(scope,n);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=node.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=exportedObjectLit.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=varNode.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=subtree.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
firstChild=n;
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=val.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(firstChild.isBlock()&&n!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=child.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
declareVar(n);
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanVars(child,n);
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=block.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.VAR :

case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild().getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.PIPE :
info=n.getJSDocInfo();
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.DELPROP :

case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(NodeUtil.getBestLValueName(NodeUtil.getBestLValue(n))!=null&&lValueName.endsWith(".prototype")){
return ;
}
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.PIPE :
childType=getJSType(n.getFirstChild());
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.AND :

case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
Preconditions.checkState(PROPERTY_CHECKING_UNION_SIZE==2);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.OBJECTLIT :

case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.GETELEM :

case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=start.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getParent().getParent().getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getParent().getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=n.getParent();child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getParent().getParent().getFirstChild();child!=n.getParent();child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getParent().getFirstChild();child!=n.getParent();child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isName()&&n.getParent().isFunction()){
child=current.getParent();
}
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.OR :

case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.PIPE :
if(n.getString().equals("NaN")){
return Double.NaN;
}
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.PIPE :
Preconditions.checkState(n.hasChildren(),"AST should be normalized");
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=p.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.NEW :

case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.FUNCTION :

case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
templateTypeName=Joiner.on("_").join(nonNullableTypeNames);
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.setString(templateTypeName);
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.getParent().replaceChild(n,child);
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
reportCodeChange();
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child=n.getNext();
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=map.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=firstChild;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(isUselessCase(firstChild,(firstChild==n.getFirstChild())?null:lastNonRemovable)){
removeCase(n,c);
return null;
}
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(PROPERTY_CHECKING_UNION_SIZE*2-STRING_SPLIT_OVERHEAD<=0){
return n;
}
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.PIPE :
n.replaceChild(n,child);
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.PIPE :
reportCodeChange();
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.PIPE :
n.replaceChild(n,child);
reportCodeChange();

UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.PIPE :
scope=traverseChildren(n,scope);
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(child==null||objType.getJSDocInfo()!=null){
return ;
}
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.SETTER_DEF :
Preconditions.checkState(n.getParent().isObjectLit());
Preconditions.checkState(PROPERTY_CHECKING_UNION_SIZE==1);
Preconditions.checkState(firstChild.isFunction());
Preconditions.checkState(first.getFirstChild().getString().isEmpty());

case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.PIPE :
tryMinimizeExits(NodeUtil.getLoopCodeBlock(n),Token.CONTINUE,null);
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}



========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=args.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.children().iterator().next();
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getNext()!=null){
sourceName=arg.getNext().getString();
}
case Token.PIPE :
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.rhino.jstype.JSTypeRegistry,1492
com.google.javascript.rhino.jstype.JSTypeRegistry,1494
com.google.javascript.rhino.jstype.JSTypeRegistry,1493
Find no block!
com.google.javascript.rhino.jstype.JSTypeRegistry,1497
========
for(Node child=node.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=subtree.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=varNode.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child=child.getNext();
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=exportedObjectLit.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=val.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkNotNull(child);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(child.getType()==Token.BLOCK);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=n.getFirstChild().getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(firstChild.getChildCount()==2);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
firstChild.detachFromParent();
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=block.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(child.hasOneChild()){
NodeUtil.redeclareVarsInsideBranch(catchBlock);
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=child.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
traverseBranch(child,n);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(child.getNext().getNext()==null&&body.isBlock(),body);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(child.getQualifiedName()==null||child.getNext()!=null){
return ;
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isGet(child.getFirstChild())){
return false;
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!child.isEmpty()&&!init.isVar()){
init=trySimplifyUnusedResult(init,false);
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(child==null){
return null;
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new JsonML(TagType.IdPatt).setAttribute(TagAttr.NAME,n.getString());
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=lp.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return createFromTypeNodesInternal(child,sourceName,scope);
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isName());
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(child.getNext()==null){
return n;
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
addAllChildren(child);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(lastGeneration){
addSimplifiedChildren(child.getNext().getNext());
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child=firstChild;
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=p.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=objLitNode.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isNew()||n.isCall());
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node child=args.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!child.getNext().isString()){
return ;
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=arg.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=objectLiteral.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=n.getFirstChild();child!=firstChild;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(isUselessCase(firstChild,(firstChild==n.getFirstChild())?null:lastNonRemovable)){
removeCase(n,c);
return null;
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=parameters.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=firstChild.getFirstChild();child!=firstChild;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=firstChild.getParent().getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=firstChild.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=start.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child=p.getNext();
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
firstChild=n;
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
thisRestricted.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
thatRestricted.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isTry());
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.getFirstChild().getLastChild().getString().equals("call")||propString.equals("apply")){
return n.getFirstChild().getNext();
}else {
return callTarget.getFirstChild();
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(maybeGetSingleReturnRValue(firstChild)!=null&&value.isName()&&value.getString().equals(child.getString())){
return true;
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
restricted.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return restricted.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
restricted.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return restricted.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=map.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=typeArray.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child=trySimplifyUnusedResult(left);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
declareVar(n);
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
scanVars(child,n);
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope=traverseChildren(n,scope);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.hasOneChild());
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!n.getFirstChild().getFirstChild().isName()){
return false;
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=thisTypeNode.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
createEdge(n,Branch.ON_TRUE,computeFallThrough(child));
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
connectToPossibleExceptionHandler(n,NodeUtil.getConditionExpression(node));
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.removeChild(n);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!n.isCall()){
return null;
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(NodeUtil.isObjectLitKey(n,n.getParent())||n.getType()==Token.NAME||nType==Token.GETPROP);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
connectToPossibleExceptionHandler(firstChild,node.getFirstChild());
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.mayHaveSideEffects(child)||NodeUtil.canBeSideEffected(rhs)){
return false;
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.removeChild(firstChild);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(TWEAK_FUNCTIONS_MAP.get(sourceName)==null){
return ;
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=paramsParent.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.getParent().isAssign());
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n=n.getNext();
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkArgument(n.isCall());
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
child=skipFinallyNodes(follow);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node child=assignNode.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
defineSlot(n,n,child);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(mayHaveSideEffects(firstChild)){
return n;
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.getParent().replaceChild(n,child);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n=firstChild;
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument((firstChild.isAnd())||(node.isOr()),"Expected: AND or OR, Got: %s",Token.name(node.getType()));
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(hasBreakOrContinue(n)){
return n;
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(NodeUtil.isControlStructureCodeBlock(n,n.getFirstChild()));
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child=n.getNext();
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.getChildCount()==3);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(n.isFunction());
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(n.getChildCount()==3);
Preconditions.checkState(n.isFunction());
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.getFirstChild().setString("");
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.detachFromParent();
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.getFirstChild().setString("");
n.detachFromParent();
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
child=current.getNext();
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(!NodeUtil.isObjectLitKey(n,n.getParent()));
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(isExpressionTreeUnsafe(n,state.sideEffects)){
state.sideEffects=true;
state.extractBeforeStatement=extractExpression(n,state.extractBeforeStatement);
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(firstChild.isString());
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String templateTypeName : nonNullableTypeNames){
reportWarning(INEXISTANT_PARAM,inexistentName,sourceName);
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
firstChild=builder.build();
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parseMessageTextNode(builder,child);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.setDebugInformation(child.getFirstChild(),firstChild,"?"+".prototype");
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.replaceChild(firstChild,child);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.reportCodeChange();
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child=paramName.getNext();
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
firstChild=firstChild;
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isTypeOf());
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.replaceChild(n,child);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isGet(child)){
return n;
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
assertDefinitionNode(n,Token.FUNCTION);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setDeferredType(n,createFunctionTypeFromNodes(n,sourceName,NodeUtil.getBestJSDocInfo(n),child));
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(scope==null)break;
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(inferConcreteType(getTopScope(),n).isNone()||type.isAll()){
break;
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ImmutableMap.builder().putAll(Annotation.recognizedAnnotations);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((n!=null)&&maybeInitMetaDataFromHelpVar(builder,parentOfVarNode.getChildBefore(firstChild))){
return ;
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
maybeInitMetaDataFromHelpVar(builder,firstChild.getNext());
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
greatestSubtypeByProperty.remove(sourceName);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
child.setString(builder.get(sourceName));
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.addChildToBack(IR.returnNode(child).srcref(targetVal));
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.replaceChild(firstChild,IR.function(IR.name("").srcref(n),IR.paramList().srcref(n),n));
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.putBooleanProp(Node.FREE_CALL,true);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
firstChild.removeChild(firstChild);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(child==null){
src=MISSING_SOURCE;
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.addChildToBack(firstChild);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.copyNameAnnotations(ref.node.getLastChild(),firstChild);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
declareArguments(firstChild);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isString());
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkArgument(n.isCall());
Preconditions.checkArgument(n.isString());
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.addChildToBack(IR.block(IR.ifNode(IR.not(IR.call(IR.getprop(firstChild.cloneTree(),IR.string("match")),IR.regexp(IR.string("___$")))),child)));
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(child<0){
return ;
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.getParent().isObjectLit());
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkArgument(firstChild.isCall()||callsite.isNew());
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(firstChild==null||previousCase.getNext()==child);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.add(formatDetailedMessage(templateTypeName,sourceName,PROPERTY_CHECKING_UNION_SIZE,PROPERTY_CHECKING_UNION_SIZE));
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isWhile());
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
NodeUtil.redeclareVarsInsideBranch(n);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.removeChild(n.getParent(),n);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
reportCodeChange();
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.replaceChild(n,IR.number(0));
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.DELPROP :

for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.getParent().replaceChild(n,child);
reportCodeChange();
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child=addMarker(n.getJSType().toMaybeFunctionType(),nodeToInsertAfter,null);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.get(sourceName)==null){
return ;
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(firstChild.isAssign());
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
firstChild.removeChild(n);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
builder.append(name(n));
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
Preconditions.checkArgument(firstChild.isString());
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.add(n);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.GETELEM :

for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.redeclareVarsInsideBranch(child);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.removeChild(child.getParent(),n);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(child!=null){
newReportFunctionExitNode().addChildToBack(returnRhs);
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.addChildToFront(newReportFunctionExitNode());
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.getParent().replaceChild(n,firstChild);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(child!=null){
maybeTypeOfThis=maybeTypeOfThis.restrictByNotNullOrUndefined();
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.addChildToBack(n);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.replaceChild(n,child);
reportCodeChange();
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.detachFromParent();
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.addChildAfter(child,n);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
firstChild.detachFromParent();
reportCodeChange();
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.setString(coalescedVar.name);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isVar()){
removeVarDeclaration(child);
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getString().isEmpty()){
Preconditions.checkState(child.isFunction());
Preconditions.checkState(NodeUtil.isFunctionExpression(parent));
return ;
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(child.isEquivalentTo(n)){
return ;
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!mayHaveSideEffects(n)){
NodeUtil.removeChild(n.getParent(),n);
}else {
Node child=IR.exprResult(cond.detachFromParent()).copyInformationFrom(cond);
n.getParent().replaceChild(n,statement);
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inferPropertyTypesToMatchConstraint(getJSType(child),getJSType(firstChild));
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
updateAssignAllowedStack(n,false);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(child==scope.getRootNode())return ;
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!areSafeFlagsToFold(firstChild.getString())){
return n;
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
firstChild=IR.regexp(firstChild,firstChild);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isName()||n.isGetProp());
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(sourceName==null){
return false;
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isGetElem());
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(child.isArrayLit()){
return tryFoldArrayAccess(n,left,firstChild);
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.replaceChild(n,firstChild);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.mayEffectMutableState(firstChild)){
return ;
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.add(new CallSite(firstChild,n,firstChild,firstChild,firstChild));
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
templateTypeName=Joiner.on("_").join(nonNullableTypeNames);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.setString(templateTypeName);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.copyNameAnnotations(firstChild,firstChild);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
firstChild.replaceChild(n,firstChild);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(sourceName!=null&&sourceName!=null);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
lastGeneration=true;
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
child=resolveInternal(reporter,scope);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.setResolvedTypeInternal(resolveResult);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(child!=null&&nameNode.getParent()!=null&&nameNode.getParent().isCatch()){
return ;
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
replaceSymbol(n,sourceName);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.replaceChild(n,IR.string(child));
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
info.occurrences.add(new StringOccurrence(n,firstChild));
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
info.numOccurrences++;
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.replaceChild(firstChild,NodeUtil.booleanNode(lastGeneration));
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.addChildToFront(IR.exprResult(firstChild).srcref(cond));
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(child==null&&firstChild.isFunction()){
varType=parent.getJSType();
}
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(child.isName());
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
defineSlot(n,n,builder.getNativeObjectType(UNKNOWN_TYPE),true);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.replaceChild(firstChild,firstChild);
for(Node child=n.getFirstChild();child!=null;child=child.getNext()){
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope));
}
return builder.build();
case Token.EMPTY :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.rhino.jstype.JSTypeRegistry,1617
========
if(fieldTypeNode.getType()==n){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.LT){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()==null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()!=null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==TagType.Empty){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.GETELEM){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.addChildToBack(n);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.addChildToBack(n);
if(fieldTypeNode.getType()==Token.GETELEM){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()!=n){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==PROPERTY_CHECKING_UNION_SIZE){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()!=PROPERTY_CHECKING_UNION_SIZE){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()==Token.STRING){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()==Token.COLON){
type=getValueType(n.getNext());
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.SCRIPT){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldNameNode.isName()){
return true;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==info.initialValue){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=hasType;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
info.initialValueParent.replaceChild(info.initialValue,fieldTypeNode.cloneTree());
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()!=info.initialValue){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=hasType;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()==info.initialValue){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=hasType;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()!=info.initialValue){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=hasType;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()==null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()!=null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getChildCount()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getChildCount()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n==null){
return ;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.NAME){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild().getNext().getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=n.getFirstChild().getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getChildCount()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild().getNext().getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getChildCount()==Token.COLON){
fieldNameNode=n.getFirstChild().getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fieldNameNode.isCall()){
return ;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall(),"Expected: CALL, Got: %s",Token.name(node.getType()));
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(PROPERTY_CHECKING_UNION_SIZE==1||n.getType()==Token.BLOCK||parentType==Token.SCRIPT||parentType==Token.LABEL);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode=fieldTypeNode.getNext();
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.getFirstChild()==null||!function.isGetProp()){
return false;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==scope){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
if(fieldTypeNode.getJSDocInfo()==null){
info=n.getJSDocInfo();
}
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getIntProp(Node.INCRDECR_PROP)==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()==TagType.ArrayExpr){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fieldTypeNode.isCall());
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()==Token.EQUALS){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
Preconditions.checkState(fieldTypeNode.getString().length()!=0);
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
Preconditions.checkState(fieldTypeNode.getString().length()!=0);
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()==null){
fieldNameNode=fieldTypeNode.getFirstChild();
Preconditions.checkState(fieldTypeNode.getString().length()!=0);
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()!=null){
fieldNameNode=fieldTypeNode.getFirstChild();
Preconditions.checkState(fieldTypeNode.getString().length()!=0);
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Context.IN_FOR_INIT_CLAUSE){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
declareArguments(fieldTypeNode);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
add(":");
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
addExpr(fieldTypeNode.getFirstChild(),1,Context.OTHER);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateNodeType(Token.IF,fieldTypeNode);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateMinimumChildCount(fieldTypeNode,2);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateMaximumChildCount(fieldTypeNode,3);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateExpression(fieldTypeNode.getFirstChild());
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateBlock(fieldTypeNode.getChildAtIndex(1));
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isAssign());
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()==Token.COLON){
next=fieldTypeNode.getNext();
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.GETPROP :

if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("."+File.separator)||fieldName.startsWith(".."+File.separator)){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("."+File.separator)||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith(".."+File.separator)){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")&&fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldName.startsWith("\'")||fieldName.substring(0,2).equalsIgnoreCase("0x")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
radix=16;
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")&&fieldName.substring(0,2).equalsIgnoreCase("0x")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldName.equals(sourceName)||fieldName.startsWith(sourceName+".")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldName.equals(sourceName)||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldName.startsWith("\'")||fieldName.startsWith(sourceName+".")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldName.indexOf(sourceName,PROPERTY_CHECKING_UNION_SIZE)<0){
return -1;
}
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.endsWith(".")||fieldName.startsWith(".")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldName.endsWith(".")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldName.startsWith("\'")||fieldName.startsWith(".")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldName.indexOf("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldName=parentName.substring(0,parentName.lastIndexOf('.'));
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.isUpperCase("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.isJavaIdentifierStart("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
hasType=true;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(hasType){
fieldNameNode=fieldTypeNode.getFirstChild();
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldNameNode=fieldTypeNode.getFirstChild();
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(hasType){
fieldNameNode=fieldTypeNode.getFirstChild();
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldNameNode=fieldTypeNode.getFirstChild();
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(hasType){
right=n.getFirstChild();
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
right=n.getLastChild();
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
rewriteDefinition(fieldTypeNode,sourceName);
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.containsFunction(n)){
return ;
}
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.addChildrenToFront(n.getLastChild().detachFromParent());
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.addChildrenToBack(n.getFirstChild().detachFromParent());
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.addChildrenToFront(n.getLastChild().detachFromParent());
n.addChildrenToBack(n.getFirstChild().detachFromParent());
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getFirstChild().getLastChild().getString().equals("call")||propString.equals("apply")){
return fieldTypeNode.getFirstChild().getNext();
}else {
return callTarget.getFirstChild();
}
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getSourceFileByName(sourceName)!=null){
return input.getLine(PROPERTY_CHECKING_UNION_SIZE);
}
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getSourceFileByName(sourceName)!=null){
return input.getRegion(PROPERTY_CHECKING_UNION_SIZE);
}
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateBlock(n.getLastChild());
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
UNKNOWN ASTNode type : catch (IllegalArgumentException e) {
  compiler.report(t.makeError(n,INVALID_STYLE_ERROR,styleStr));
  return;
}

UNKNOWN ASTNode type : catch (IllegalArgumentException ex) {
  t.report(n,MALFORMED_REGEXP,ex.getMessage());
}

UNKNOWN ASTNode type : catch (NumberFormatException e) {
  return n;
}

UNKNOWN ASTNode type : catch (NumberFormatException e) {
  return n;
}

UNKNOWN ASTNode type : catch (UnsupportedOperationException e) {
  violation("getString failed for" + Token.name(n.getType()),n);
}

UNKNOWN ASTNode type : catch (UnsupportedOperationException e) {
  violation("getString failed for" + Token.name(n.getType()),n);
}

========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==Token.EQUALS){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)!=null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==-1){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
errorReporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
return false;
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==TernaryValue.FALSE){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isWhile());
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkArgument(n.isWhile());
if(builder.addProperty(fieldName,fieldType,fieldNameNode)!=null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkArgument(n.isDo());
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)!=TernaryValue.FALSE){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isDo());
if(builder.addProperty(fieldName,fieldType,fieldNameNode)!=null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkArgument(n.isDo());
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==TernaryValue.FALSE){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isDo());
if(builder.addProperty(fieldName,fieldType,fieldNameNode)!=TernaryValue.FALSE){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
compiler.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
return ;
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.replaceChild(n,fieldNameNode);
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.replaceChild(n,fieldNameNode);
if(builder.addProperty(fieldName,fieldType,fieldNameNode)!=null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
reporter.reportCodeChange();
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
fieldNameNode.putBooleanProp(Node.QUOTED_PROP,false);
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
return ;
compiler.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
break;
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==Token.NAME){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
return true;
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(!NodeUtil.isObjectLitKey(fieldNameNode,n.getParent()));
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nameInfo.superclass!=null){
recordReference(nameInfo.name,nameInfo.superclass,RefType.INHERITANCE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
n.setString(sourceName+DISAMBIGUATION_SUFFIX);
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
tryDefineLexicalQualifiedNameRef(NodeUtil.getBestLValueName(fieldNameNode),n);
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==fieldName){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
transformationHandler.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope=traverseChildren(fieldNameNode,scope);
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
callNodeToParentMap.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==fieldNameNode){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==n){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
if(n.getJSDocInfo()==null){
info=fieldNameNode.getJSDocInfo();
}
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.EQUALS :

if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==fieldType){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.removeChild(fieldNameNode);
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
refNodes.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
checkedClass.hasInstanceOfReference=true;
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
checkedClass.hasInstanceOfReference=true;
return ;

reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)!=-1){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
n.setString(p.newName);
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
changed=lastGeneration||!p.newName.equals(n.getString());
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
n.setString(p.newName);
changed=lastGeneration||!p.newName.equals(n.getString());

reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(templateTypeName!=null&&fieldName!=null);
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
global.uses.add(n);
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isCall());
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!NodeUtil.isGet(fieldNameNode)){
n.putBooleanProp(Node.FREE_CALL,true);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
abstractMethodAssignmentNodes.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
newName.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
n.setString(a.newName);
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.hasOneChild());
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
defineSlot(fieldNameNode,n,fieldType,lastGeneration);
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
n.add(sourceName);
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
if(templateTypeName==null||!templateTypeName.endsWith(".prototype."+fieldNameNode.getString())){
return ;
}
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
n.removeChild(fieldNameNode);
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
if(templateTypeName==null||!templateTypeName.endsWith(".prototype."+fieldNameNode.getString())){
return ;
}
n.removeChild(fieldNameNode);

RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
if(hasType){
ObjectType getJSType(n).dereference()=getJSType(n).dereference();
if(getJSType(n).dereference()!=null){
type=getJSType(n).dereference();
}
}
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
if(getJSType(n).isFunctionPrototypeType()||(getJSType(n).toObjectType()!=null&&getJSType(n).toObjectType().getConstructor()!=null)){
return getJSType(n).toString();
}else if(fieldName!=null){
return fieldName;
}else if(getJSType(n).isFunctionType()){
return "function";
}else {
return getJSType(n).toString();
}
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
if(hasType){
ObjectType getJSType(n).dereference()=getJSType(n).dereference();
if(getJSType(n).dereference()!=null){
type=getJSType(n).dereference();
}
}
if(getJSType(n).isFunctionPrototypeType()||(getJSType(n).toObjectType()!=null&&getJSType(n).toObjectType().getConstructor()!=null)){
return getJSType(n).toString();
}else if(fieldName!=null){
return fieldName;
}else if(getJSType(n).isFunctionType()){
return "function";
}else {
return getJSType(n).toString();
}

RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
if(lastGeneration){
if(hasType){
return ;
}
while(fieldTypeNode!=null){
oType=fieldTypeNode.getImplicitPrototype();
}
}
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.getParent().replaceChild(typeofNode,IR.string(null));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reportCodeChange();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.getParent().replaceChild(typeofNode,IR.string(null));
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
RecordTypeBuilder builder=new RecordTypeBuilder(this);
Preconditions.checkArgument(fieldTypeNode.isTypeOf());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
RecordTypeBuilder builder=new RecordTypeBuilder(this);
Preconditions.checkArgument(fieldTypeNode.getFirstChild()!=null);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
RecordTypeBuilder builder=new RecordTypeBuilder(this);
Preconditions.checkArgument(fieldTypeNode.isTypeOf());
Preconditions.checkArgument(fieldTypeNode.getFirstChild()!=null);

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
new StringBuilder().append(getLevelName(lastGeneration?CheckLevel.WARNING:CheckLevel.ERROR));
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
new StringBuilder().append(" - ");
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
new StringBuilder().append(error.description);
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
new StringBuilder().append('\n');
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
if(templateTypeName!=null){
new StringBuilder().append(templateTypeName);
new StringBuilder().append('\n');
if(0<=PROPERTY_CHECKING_UNION_SIZE&&PROPERTY_CHECKING_UNION_SIZE<=templateTypeName.length()){
new StringBuilder().append("^\n");
}
}
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
new StringBuilder().append(getLevelName(lastGeneration?CheckLevel.WARNING:CheckLevel.ERROR));
new StringBuilder().append(" - ");
new StringBuilder().append(error.description);
new StringBuilder().append('\n');
if(templateTypeName!=null){
new StringBuilder().append(templateTypeName);
new StringBuilder().append('\n');
if(0<=PROPERTY_CHECKING_UNION_SIZE&&PROPERTY_CHECKING_UNION_SIZE<=templateTypeName.length()){
new StringBuilder().append("^\n");
}
}

RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
newNode=IR.number(Double.parseDouble(sourceName));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
normalizedNewVal=normalizeNumericString(String.valueOf(Double.parseDouble(sourceName)));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
newNode=IR.number(Double.parseDouble(sourceName));
normalizedNewVal=normalizeNumericString(String.valueOf(Double.parseDouble(sourceName)));

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
if(!normalizeNumericString(sourceName).equals(fieldType)){
return n;
}
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.rhino.jstype.JSTypeRegistry,1620
Find no block!
com.google.javascript.rhino.jstype.JSTypeRegistry,1621
========
for(Node fieldTypeNode=n.getFirstChild();arg!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(arg.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.ELLIPSIS){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=current.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();arg!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(arg.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getFirstChild().getNext().getFirstChild()==null){
return null;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!NodeUtil.isExprAssign(fieldNameNode)){
return null;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isGetProp()&&lhs.getFirstChild().isThis()){
Node fieldNameNode.getFirstChild().getLastChild()=fieldNameNode.getFirstChild().getLastChild();
if(rhs.isName()&&rhs.getString().equals(n.getFirstChild().getNext().getFirstChild().getString())){
Node fieldTypeNode.getLastChild()=lhs.getLastChild();
return propertyName;
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild().getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();c!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.getFirstChild().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=lastNonRemovable;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isSwitch());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild().getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.getFirstChild().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild().getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(n.isSwitch());
for(Node fieldTypeNode=n.getFirstChild().getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(n.isSwitch());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.getFirstChild().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(n.isSwitch());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(n.isSwitch());
for(Node fieldTypeNode=n.getFirstChild().getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.getFirstChild().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(n.isSwitch());
for(Node fieldTypeNode=n.getFirstChild().getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
NodeUtil.setDebugInformation(fieldNameNode.getFirstChild(),n.getFirstChild(),fieldName+".prototype");
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.replaceChild(n.getFirstChild(),fieldNameNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();name!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=left.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
value=n.getFirstChild().getFirstChild();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldNameNode.getNext().getType()==Token.GETPROP){
Node fieldNameNode.getNext().getFirstChild()=fieldNameNode.getNext().getFirstChild();
secondArgument.removeChild(newChild);
fieldTypeNode.replaceChild(fieldNameNode,newChild);
n.replaceChild(secondArgument,IR.string(secondArgument.getFirstChild().getString()));
}else if(secondArgumentType==Token.GETELEM){
Node fieldNameNode.getNext().getFirstChild()=secondArgument.getFirstChild();
secondArgument.removeChild(newFirstArgument);
Node fieldNameNode.getNext().getLastChild()=secondArgument.getLastChild();
secondArgument.removeChild(newSecondArgument);
n.replaceChild(firstArgument,newFirstArgument);
n.replaceChild(secondArgument,newSecondArgument);
}else {
n.replaceChild(secondArgument,IR.string(secondArgument.getString()));
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();name!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.setSourceEncodedPosition(n.getSourcePosition()+FOR_QUOTE);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.setLength(current.getString().length());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
maybeAddToSymbolTable(fieldNameNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(fieldTypeNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
key=fieldTypeNode.getNext();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reporter.reportCodeChange();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(fieldTypeNode);
key=fieldTypeNode.getNext();
reporter.reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(fieldTypeNode);
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild().getNext().getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=fieldNameNode.getFirstChild().getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=fieldNameNode.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope.declareSlot(ConcreteFunctionType.CALL_SLOT_NAME,n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope.declareSlot(ConcreteFunctionType.THIS_SLOT_NAME,n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope.declareSlot(ConcreteFunctionType.RETURN_SLOT_NAME,n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope.initForScopeRoot(n.getLastChild());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=objectLiteral.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();keyNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
next=fieldTypeNode.getNext();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();c!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.isNumber()){
return false;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!(n.getDouble()>=0)||Double.isInfinite(dindex)){
return false;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getDouble()!=(int)n.getDouble()){
return false;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=arg.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getNext()!=null){
if(right.getNext()!=null||!NodeUtil.isImmutableValue(right)){
return n;
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldNameNode.isArrayLit()||!fieldNameNode.getNext().getString().equals("join")){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getNext()!=null&&right.isString()&&",".equals(right.getString())){
n.removeChild(right);
reportCodeChange();
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateNodeType(Token.SWITCH,n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateMinimumChildCount(n,1);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateExpression(n.getFirstChild());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(PROPERTY_CHECKING_UNION_SIZE>1){
violation("Expected at most 1 \'default\' in switch but was "+defaults,n);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(NodeUtil.isAssignmentOp(fieldNameNode));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isName()){
return new Assign(fieldNameNode,current,hasType);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();arg!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=arg;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=args.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=arg;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(NodeUtil.getFunctionJSDocInfo(n)==null?null:fnInfo.getParameterType(sourceName)!=null&&NodeUtil.getFunctionJSDocInfo(n)==null?null:fnInfo.getParameterType(sourceName).isVarArgs()){
fieldTypeNode.putBooleanProp(Node.IS_VAR_ARGS_PARAM,true);
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n!=null&&value.isName()&&value.getString().equals(fieldTypeNode.getString())){
return true;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
state.extractBeforeStatement=fieldTypeNode;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(NodeUtil.isGet(fieldNameNode));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
state.extractBeforeStatement=extractExpression(fieldNameNode.getFirstChild(),state.extractBeforeStatement);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldTypeNode.isBlock()||addingRoot.isScript());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldTypeNode.getFirstChild()==null||!addingRoot.getFirstChild().isScript());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
addSimplifiedExpression(n.getFirstChild(),n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
addSimplifiedExpression(fieldNameNode,n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
addSimplifiedExpression(fieldNameNode.getNext(),n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
addSimplifiedExpression(n.getFirstChild(),n);
addSimplifiedExpression(fieldNameNode,n);
addSimplifiedExpression(fieldNameNode.getNext(),n);

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
addAllChildren(n.getFirstChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
addAllChildren(n.getFirstChild().getNext());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
addAllChildren(n.getFirstChild());
addAllChildren(n.getFirstChild().getNext());

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=block.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null&&NodeUtil.isFunctionDeclaration(fieldTypeNode);fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();next!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();key!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope=traverseChildren(fieldNameNode,scope);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkNotNull(fieldTypeNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldTypeNode.getType()==Token.BLOCK);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode=child.getFirstChild();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=objLitNode.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();key!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=varNode.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();child!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();a!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();nameNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=nameNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();nameNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=nameNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getFirstChild().getNext().isNumber()){
fieldName=NodeUtil.getStringValue(property);
}else {
propertyName=property.getString();
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isGetElem()){
fieldNameNode.setQuotedString();
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode.addChildToBack(fieldTypeNode.getNext().detachFromParent());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.detachFromParent();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
new SourcePosition<AliasTransformation>(){
}
.setPositionInformation(n.getLineno(),n.getCharno(),fieldNameNode==null?Integer.MAX_VALUE:next.getLineno(),fieldNameNode==null?Integer.MAX_VALUE:next.getCharno());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NEXT_DELIMITER: for (char delimiter : new char[]{',',' ',';','{','}'}) {
  for (  String cur : strings) {
    if (cur.indexOf(delimiter) != -1) {
      continue NEXT_DELIMITER;
    }
  }
  String template=Joiner.on(delimiter).join(strings);
  Node call=IR.call(IR.getprop(IR.string(template),IR.string("split")),IR.string("" + delimiter));
  call.copyInformationFromForTree(n);
  n.getParent().replaceChild(n,call);
  reportCodeChange();
  return call;
}

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((fieldTypeNode.getParent()==null)||(fieldTypeNode.getFirstChild()!=n)){
return false;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((fieldTypeNode.getLastChild()==null)||!functionNode.isFunction()){
return false;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.isGetProp()){
return false;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
builder.add(sourceName);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldNameNode.getParent().getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldNameNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getJSType(fieldNameNode).restrictByNotNullOrUndefined().toMaybeFunctionType()==null){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.setJSType(getJSType(fieldNameNode).restrictByNotNullOrUndefined().toMaybeFunctionType().getBindReturnType(n.getChildCount()-1));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=subtree.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldNameNode.getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
child=n.getFirstChild().getNext();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.isName()){
return false;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.getFirstChild().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getFirstChild().getNext());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(fieldTypeNode,fieldTypeNode.getFirstChild().getNext());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reportCodeChange();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getFirstChild().getNext());
n.replaceChild(fieldTypeNode,fieldTypeNode.getFirstChild().getNext());
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getFirstChild().getNext());
Node fieldNameNode=fieldTypeNode.getFirstChild().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(fieldTypeNode,fieldTypeNode.getFirstChild().getNext());
Node fieldNameNode=fieldTypeNode.getFirstChild().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getFirstChild().getNext());
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(fieldTypeNode,fieldTypeNode.getFirstChild().getNext());
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getFirstChild().getNext());
n.replaceChild(fieldTypeNode,fieldTypeNode.getFirstChild().getNext());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getFirstChild().getNext());
n.replaceChild(fieldTypeNode,fieldTypeNode.getFirstChild().getNext());
Node fieldNameNode=fieldTypeNode.getFirstChild().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getFirstChild().getNext());
n.replaceChild(fieldTypeNode,fieldTypeNode.getFirstChild().getNext());
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=collapse.endNode;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();n!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkState(fieldNameNode.getNext()==fieldTypeNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
collapse.parent.removeChildAfter(fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(fieldTypeNode.isVar()){
while(fieldTypeNode.hasChildren()){
fieldNameNode.addChildToBack(fieldTypeNode.removeFirstChild());
}
}else {
Node n=fieldTypeNode.getFirstChild();
Node n.getFirstChild()=n.getFirstChild();
Preconditions.checkState(n.getFirstChild().isName());
Node n.getLastChild()=n.getLastChild();
n.getFirstChild().addChildToBack(n.getLastChild().detachFromParent());
fieldNameNode.addChildToBack(n.getFirstChild().detachFromParent());
redeclaration=true;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n=fieldTypeNode.getNext();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkState(fieldNameNode.getNext()==fieldTypeNode);
collapse.parent.removeChildAfter(fieldNameNode);
if(fieldTypeNode.isVar()){
while(fieldTypeNode.hasChildren()){
fieldNameNode.addChildToBack(fieldTypeNode.removeFirstChild());
}
}else {
Node n=fieldTypeNode.getFirstChild();
Node n.getFirstChild()=n.getFirstChild();
Preconditions.checkState(n.getFirstChild().isName());
Node n.getLastChild()=n.getLastChild();
n.getFirstChild().addChildToBack(n.getLastChild().detachFromParent());
fieldNameNode.addChildToBack(n.getFirstChild().detachFromParent());
redeclaration=true;
}
n=fieldTypeNode.getNext();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();n!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();n!=null;fieldTypeNode=fieldTypeNode.getNext()){
n=fieldTypeNode.getNext();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n=fieldTypeNode.getNext();
Node fieldNameNode=fieldTypeNode.getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();n!=null;fieldTypeNode=fieldTypeNode.getNext()){
n=fieldTypeNode.getNext();
Node fieldNameNode=fieldTypeNode.getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
createEdge(fieldTypeNode.getFirstChild(),Branch.UNCOND,fieldTypeNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
createEdge(fieldTypeNode,Branch.ON_TRUE,computeFallThrough(fieldType));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
createEdge(fieldTypeNode,Branch.ON_FALSE,computeFollowNode(forNode,this));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
createEdge(fieldTypeNode.getFirstChild().getNext().getNext(),Branch.UNCOND,fieldTypeNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
connectToPossibleExceptionHandler(fieldTypeNode.getFirstChild(),init);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
connectToPossibleExceptionHandler(fieldTypeNode,fieldTypeNode.getFirstChild().getNext());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
connectToPossibleExceptionHandler(fieldTypeNode.getFirstChild().getNext().getNext(),iter);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
createEdge(fieldTypeNode.getFirstChild(),Branch.UNCOND,fieldTypeNode);
createEdge(fieldTypeNode,Branch.ON_TRUE,computeFallThrough(fieldType));
createEdge(fieldTypeNode,Branch.ON_FALSE,computeFollowNode(forNode,this));
createEdge(fieldTypeNode.getFirstChild().getNext().getNext(),Branch.UNCOND,fieldTypeNode);
connectToPossibleExceptionHandler(fieldTypeNode.getFirstChild(),init);
connectToPossibleExceptionHandler(fieldTypeNode,fieldTypeNode.getFirstChild().getNext());
connectToPossibleExceptionHandler(fieldTypeNode.getFirstChild().getNext().getNext(),iter);

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
connectToPossibleExceptionHandler(fieldTypeNode,fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
createEdge(fieldTypeNode,Branch.ON_TRUE,computeFallThrough(fieldType));
createEdge(fieldTypeNode,Branch.ON_FALSE,computeFollowNode(forNode,this));
connectToPossibleExceptionHandler(fieldTypeNode,fieldNameNode);

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();n!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
getParameterSlot(PROPERTY_CHECKING_UNION_SIZE).getType();
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();n!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();n!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()!=null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();n!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();n!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();n!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()!=null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()!=null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();n!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()!=null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(NodeUtil.isObjectLitKey(n,n.getParent())||hasType);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode=tryMinimizeCondition(trueNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldNameNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkState(fieldNameNode.hasOneChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
tryMinimizeExits(fieldTypeNode.getLastChild(),PROPERTY_CHECKING_UNION_SIZE,sourceName);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkState(fieldNameNode.hasOneChild());
tryMinimizeExits(fieldTypeNode.getLastChild(),PROPERTY_CHECKING_UNION_SIZE,sourceName);

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
tryMinimizeExits(n.getLastChild(),PROPERTY_CHECKING_UNION_SIZE,sourceName);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.getLastChild().detachFromParent();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.addChildrenToBack(fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.addChildrenToBack(fieldNameNode);
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reportCodeChange();
Node fieldNameNode=n.getLastChild().detachFromParent();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reportCodeChange();
Node fieldNameNode=n.getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reportCodeChange();
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n!=null&&NodeUtil.isObjectLitKey(fieldNameNode,parent)){
return true;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isName());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(reporter.get(sourceName)==null){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isNew()){
Node fieldNameNode=parent.getFirstChild();
if(target.isName()&&target.getString().equals(ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING)){
reporter.get(sourceName).setInline(false);
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isAssign()&&parent.getFirstChild()==n){
reporter.get(sourceName).setInline(false);
}else {
fs.setRemove(false);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.getJSDocInfo().isConsistentIdGenerator()&&!doc.isIdGenerator()){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isAssign()){
fieldName=n.getFirstChild().getQualifiedName();
}else if(n.isVar()){
name=n.getFirstChild().getString();
}else if(n.isFunction()){
name=n.getFirstChild().getString();
if(name.isEmpty()){
return ;
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(TWEAK_FUNCTIONS_MAP.get(fieldName)==null){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new JsonML(TagType.RegExpExpr).setAttribute(TagAttr.BODY,fieldNameNode.getString());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode=child.getNext();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new JsonML(TagType.RegExpExpr).setAttribute(TagAttr.FLAGS,fieldType);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
next=fieldTypeNode.getNext();
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.hasOneChild()){
Node fieldNameNode=n.removeFirstChild();
Node n.getParent()=n.getParent();
Node IR.exprResult(fieldNameNode).srcref(n)=IR.exprResult(condition).srcref(n);
parent.replaceChild(n,replacement);
reportCodeChange();
return replacement;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild().getFirstChild();c!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isSwitch());
for(Node fieldTypeNode=n.getFirstChild();c!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isSwitch());
for(Node fieldTypeNode=n.getFirstChild().getFirstChild();c!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.removeFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getLastChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getLastChild());
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getLastChild());
Node fieldNameNode=fieldTypeNode.removeFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reportCodeChange();
Node fieldNameNode=fieldTypeNode.removeFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getLastChild());
reportCodeChange();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getLastChild());
reportCodeChange();
Node fieldNameNode=fieldTypeNode.removeFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=val.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==fieldTypeNode.getFirstChild()){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();child!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
processNode(fieldTypeNode,new JsonML(TagType.TryStmt));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode=child.getNext();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode!=null){
processNode(child,new JsonML(TagType.TryStmt));
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope=traverse(n.getFirstChild(),scope);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.setJSType(fieldType);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldNameNode.isName()){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();propNameNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(scope.getRootNode().getFirstChild().getNext().isParamList());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
builder.append("  ");
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
builder.append(Strings.repeat(" ",PROPERTY_CHECKING_UNION_SIZE-Integer.toString(PROPERTY_CHECKING_UNION_SIZE).length()));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
builder.append(PROPERTY_CHECKING_UNION_SIZE);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
builder.append("| ");
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(PROPERTY_CHECKING_UNION_SIZE<0){
builder.append(fieldName);
PROPERTY_CHECKING_UNION_SIZE=-1;
}else {
builder.append(line);
builder.append('\n');
start=end+1;
end=templateTypeName.indexOf('\n',start);
PROPERTY_CHECKING_UNION_SIZE++;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope=traverseChildren(n,scope);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isNew()||n.isCall());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.addChildToFront(fieldTypeNode.getFirstChild().getNext());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
IR.var(fieldNameNode).copyInformationFrom(n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.getParent().replaceChild(candidateDefinition,IR.var(fieldNameNode));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.setJSDocInfo(fieldTypeNode.getJSDocInfo());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
replacementNode=IR.var(fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldNameNode);
fieldTypeNode.removeChild(fieldTypeNode.getFirstChild().getNext());
fieldNameNode.addChildToFront(fieldTypeNode.getFirstChild().getNext());
IR.var(fieldNameNode).copyInformationFrom(n);
n.getParent().replaceChild(candidateDefinition,IR.var(fieldNameNode));
fieldNameNode.setJSDocInfo(fieldTypeNode.getJSDocInfo());
reporter.reportCodeChange();
replacementNode=IR.var(fieldNameNode);

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getFirstChild().getNext());
Node fieldNameNode=fieldNameNode.getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reporter.reportCodeChange();
Node fieldNameNode=fieldNameNode.getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getFirstChild().getNext());
Node fieldNameNode=fieldNameNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reporter.reportCodeChange();
Node fieldNameNode=fieldNameNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getFirstChild().getNext());
reporter.reportCodeChange();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getFirstChild().getNext());
reporter.reportCodeChange();
Node fieldNameNode=fieldNameNode.getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getFirstChild().getNext());
reporter.reportCodeChange();
Node fieldNameNode=fieldNameNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=assignNode.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
swtich (fieldNameNode.getType()){
case Token.ASSIGN :
break;

case Token.GETPROP :
break;

}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=map.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
tryMinimizeExits(fieldNameNode,PROPERTY_CHECKING_UNION_SIZE,sourceName);
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isHook(),"Expected: HOOK, Got: %s",Token.name(node.getType()));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=typeArray.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateNodeType(Token.TRY,n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateMinimumChildCount(n,2);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateMaximumChildCount(n,3);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateBlock(n.getFirstChild());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateNodeType(Token.BLOCK,fieldNameNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateMaximumChildCount(fieldNameNode,1);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getChildCount()==3){
validateBlock(n.getLastChild());
hasType=true;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!hasType){
violation("Missing catch or finally for try statement.",n);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
defineSlot(n,fieldTypeNode,fieldType);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode=wrapNode(Token.BANG,typeNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
c=n.getFirstChild().getNext();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldName==null){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!"goog.exportSymbol".equals(fieldName)){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldNameNode.isString()){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(sourceName==null||fieldNameNode.getNext().getNext()!=null){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isString());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(templateTypeName==null){
src=MISSING_SOURCE;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=child;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=node.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
scanVars(fieldNameNode,n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
scanVars(fieldNameNode,n);
child=n.getFirstChild().getNext();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
child=n.getFirstChild().getNext();
Node fieldNameNode=fieldNameNode.getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
child=n.getFirstChild().getNext();
Node fieldNameNode=fieldNameNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isGetProp());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fieldType=fieldType.autoboxesTo()!=null?boxedType:instanceType;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldType.toObjectType()!=null);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.getChildCount()==3);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(n.isFunction());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fieldTypeNode=n;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
pushScope(n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(hasType){
traverseBranch(n.getFirstChild(),n);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
traverseBranch(fieldNameNode,n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.getNext()==null&&body.isBlock(),body);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
traverseBranch(n,n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
popScope();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.getChildCount()==3);
Preconditions.checkState(n.isFunction());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.getFirstChild().getNext().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.putBooleanProp(Node.FREE_CALL,true);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.getFirstChild().getNext().getNext().addChildToFront(IR.exprResult(fieldNameNode));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.putBooleanProp(Node.FREE_CALL,true);
n.getFirstChild().getNext().getNext().addChildToFront(IR.exprResult(fieldNameNode));
reporter.reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reporter.reportCodeChange();
Node fieldNameNode=n.getFirstChild().getNext().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reporter.reportCodeChange();
Node fieldNameNode=n.getFirstChild().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reporter.reportCodeChange();
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reporter.reportCodeChange();
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode=tryMinimizeCondition(left);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode=tryMinimizeCondition(right);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode!=null){
if(arg2.isNumber()){
PROPERTY_CHECKING_UNION_SIZE=(int)arg2.getDouble();
}else {
return n;
}
if(arg2.getNext()!=null){
return n;
}
}else {
length=n.getString().length()-PROPERTY_CHECKING_UNION_SIZE;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
Preconditions.checkArgument(n.isString());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode!=null){
if(arg2.isNumber()){
PROPERTY_CHECKING_UNION_SIZE=(int)arg2.getDouble();
}else {
return n;
}
if(arg2.getNext()!=null){
return n;
}
}else {
end=n.getString().length();
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode.addChildToFront(fieldTypeNode.getLastChild());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.getParent().getParent().replaceChild(fieldTypeNode.getParent(),IR.var(fieldNameNode));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.addChildToFront(IR.name(sourceName).copyInformationFrom(fieldTypeNode.getLastChild()));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
replaceReferencesToThis(fieldTypeNode.getLastChild().getLastChild(),sourceName);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fixFunctionType(fieldTypeNode.getLastChild());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldNameNode.getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(PROPERTY_CHECKING_UNION_SIZE==0){
return fieldName;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.addChildToBack(fieldNameNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isFor());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fieldTypeNode.isEmpty()&&!init.isVar()){
init=trySimplifyUnusedResult(init,false);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldType.isEmpty()){
increment=trySimplifyUnusedResult(increment,false);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.getFirstChild().isEmpty()){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.getImpureBooleanValue(fieldNameNode)!=TernaryValue.FALSE){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.redeclareVarsInsideBranch(n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!mayHaveSideEffects(fieldNameNode)){
NodeUtil.removeChild(n.getParent(),n);
}else {
Node IR.exprResult(fieldNameNode.detachFromParent()).copyInformationFrom(cond)=IR.exprResult(cond.detachFromParent()).copyInformationFrom(cond);
n.getParent().replaceChild(n,statement);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)!=null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==n.getFirstChild()){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(getArrayElementStringValue(fieldNameNode)==null){
return null;
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
new StringBuilder().append(getArrayElementStringValue(fieldNameNode));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
PROPERTY_CHECKING_UNION_SIZE++;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(getArrayElementStringValue(fieldNameNode)==null){
return null;
}
new StringBuilder().append(getArrayElementStringValue(fieldNameNode));
PROPERTY_CHECKING_UNION_SIZE++;

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=paramsParent.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();currentParam!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.getQualifiedName()!=null&&fieldName!=null);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if("prototype".equals(sourceName)){
Var scope.getVar(n.getQualifiedName())=scope.getVar(n.getQualifiedName());
if(qVar!=null){
ObjectType ObjectType.cast(scope.getVar(n.getQualifiedName()).getType())=ObjectType.cast(qVar.getType());
if(qVarType!=null&&fieldTypeNode!=null&&rhsValue.isObjectLit()){
builder.resetImplicitPrototype(rhsValue.getJSType(),qVarType.getImplicitPrototype());
}else if(!qVar.isTypeInferred()){
return ;
}
if(qVar.getScope()==scope){
scope.undeclare(qVar);
}
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(PrototypeMemberDeclaration.extractDeclaration(fieldNameNode)==null){
continue;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(new ExtractionInstance(PrototypeMemberDeclaration.extractDeclaration(fieldNameNode),n).isFavorable()){
totalDelta+=instance.delta;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(PrototypeMemberDeclaration.extractDeclaration(fieldNameNode)==null){
continue;
}
if(new ExtractionInstance(PrototypeMemberDeclaration.extractDeclaration(fieldNameNode),n).isFavorable()){
totalDelta+=instance.delta;
}

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
next=fieldNameNode.getNext();
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
c=trySimplifyUnusedResult(fieldNameNode);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
next=fieldNameNode.getNext();
c=trySimplifyUnusedResult(fieldNameNode);

if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(PROPERTY_CHECKING_UNION_SIZE<0||fieldName.length()<=index){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode.replaceChild(n,IR.string(fieldName.substring(PROPERTY_CHECKING_UNION_SIZE,index+1)));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
symbol=fieldType==null?null:getSymbolForTypeHelper(fieldType,true);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.length()==fieldName.length()){
return CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL,input);
}else {
return CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL,input.substring(0,suffixStart))+input.substring(suffixStart);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(PROPERTY_CHECKING_UNION_SIZE>=fieldName.length()-1){
return fieldName;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
addAllChildren(fieldNameNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(hasType){
addSimplifiedChildren(fieldNameNode.getNext().getNext());
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
PROPERTY_CHECKING_UNION_SIZE++;
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
PROPERTY_CHECKING_UNION_SIZE++;
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=parameters.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();paramNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType=safeResolve(returnType,reporter,scope);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope=tightenTypesAfterAssertions(scope,n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=exportedObjectLit.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.isVarDeclaration(n)&&n.hasChildren()){
return new VarDefinition(n,lastGeneration);
}else if(fieldTypeNode.isFunction()&&parent.getFirstChild()==n){
if(!NodeUtil.isFunctionExpression(parent)){
return new NamedFunctionDefinition(parent,isExtern);
}else if(!n.getString().equals("")){
return new FunctionExpressionDefinition(parent,isExtern);
}
}else if(parent.isAssign()&&parent.getFirstChild()==n){
return new AssignmentDefinition(parent,isExtern);
}else if(NodeUtil.isObjectLitKey(n,parent)){
return new ObjectLiteralPropertyDefinition(parent,n,n.getFirstChild(),isExtern);
}else if(parent.isParamList()){
Node fieldNameNode=parent.getParent();
return new FunctionArgumentDefinition(function,n,isExtern);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldNameNode!=null){
if(!objLitNode.isObjectLit()){
throw new MalformedException("OBJLIT node expected",objLitNode);
}
for(Node fieldTypeNode=objLitNode.getFirstChild();aNode!=null;aNode=aNode.getNext()){
if(!aNode.isString()){
throw new MalformedException("STRING node expected as OBJLIT key",aNode);
}
String sourceName=aNode.getString();
if(!isLowerCamelCaseWithNumericSuffixes(phName)){
throw new MalformedException("Placeholder name not in lowerCamelCase: "+phName,aNode);
}
if(Sets.newHashSet().contains(phName)){
throw new MalformedException("Duplicate placeholder name: "+phName,aNode);
}
phNames.add(phName);
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode=trySimplifyUnusedResult(left);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=objLit.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();keyNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=paramNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(fieldNameNode.getJSType()==null||fieldNameNode.getJSType().isUnknownType()){
return true;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(fieldTypeNode,fieldTypeNode.getLastChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
n.replaceChild(fieldTypeNode,fieldTypeNode.getLastChild());

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
Node fieldNameNode=fieldTypeNode.getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(fieldTypeNode,fieldTypeNode.getLastChild());
Node fieldNameNode=fieldTypeNode.getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
n.replaceChild(fieldTypeNode,fieldTypeNode.getLastChild());

Node fieldNameNode=fieldTypeNode.getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
n.replaceChild(fieldTypeNode,fieldTypeNode.getLastChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
n.replaceChild(fieldTypeNode,fieldTypeNode.getLastChild());

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(fieldTypeNode,fieldTypeNode.getLastChild());
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
n.replaceChild(fieldTypeNode,fieldTypeNode.getLastChild());

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
n.replaceChild(fieldTypeNode,fieldTypeNode.getLastChild());
Node fieldNameNode=fieldTypeNode.getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
n.replaceChild(fieldTypeNode,fieldTypeNode.getLastChild());

Node fieldNameNode=fieldTypeNode.getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(fieldTypeNode,fieldTypeNode.getLastChild());
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
n.replaceChild(fieldTypeNode,fieldTypeNode.getLastChild());

Node fieldNameNode=fieldTypeNode.getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
n.replaceChild(fieldTypeNode,fieldTypeNode.getLastChild());
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
n.replaceChild(fieldTypeNode,fieldTypeNode.getLastChild());

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
n.replaceChild(fieldTypeNode,fieldTypeNode.getLastChild());
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
n.replaceChild(fieldTypeNode,fieldTypeNode.getLastChild());

Node fieldNameNode=fieldTypeNode.getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldName.indexOf('\n',PROPERTY_CHECKING_UNION_SIZE)<0){
index=fieldName.length();
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PROPERTY_CHECKING_UNION_SIZE=fieldName.indexOf('\n',PROPERTY_CHECKING_UNION_SIZE)+1;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument((fieldTypeNode.isAnd())||(node.isOr()),"Expected: AND or OR, Got: %s",Token.name(node.getType()));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(hasType){
ObjectType fieldType.dereference()=fieldType.dereference();
if(dereferenced!=null){
type=dereferenced;
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
state=isVariableReadBeforeKill(fieldNameNode,sourceName);
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isCall());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.isName()&&"eval".equals(first.getString())){
first.putBooleanProp(Node.DIRECT_EVAL,true);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkNotNull(fieldType,"NameInformation is null");
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
createName(fieldNameNode.getString());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkNotNull(fieldType,"NameInformation is null");
createName(fieldNameNode.getString());

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getParent().getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(n.isHook());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkNotNull(fieldNameNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.detachChildren();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 0
TESTING : closure_35
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 600 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test
  - com.google.javascript.jscomp.parsing.ParserTest::testJSDocAttachment11
  - com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertyDeclarationOnRecordType
  - com.google.javascript.jscomp.TypeCheckTest::testDuplicateRecordFields2
  - com.google.javascript.jscomp.TypeCheckTest::testDuplicateRecordFields1
  - com.google.javascript.jscomp.TypeCheckTest::testRecordType7
  - com.google.javascript.jscomp.TypeCheckTest::testRecordType4
  - com.google.javascript.jscomp.TypeCheckTest::testRecordType3
  - com.google.javascript.jscomp.TypeCheckTest::testRecordType1
  - com.google.javascript.jscomp.TypeCheckTest::testTypeInferenceWithNoEntry2
  - com.google.javascript.jscomp.TypeCheckTest::testTypeInferenceWithNoEntry1
  - com.google.javascript.jscomp.ExternExportsPassTest::testTypedef
Failing tests: 11
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(mayHaveSideEffects(n.getFirstChild())){
fieldTypeNode=IR.comma(cond,NodeUtil.getImpureBooleanValue(n.getFirstChild()).toBoolean(true)?n.getFirstChild().getNext():n.getFirstChild().getNext().getNext()).srcref(n);
}else {
replacement=branchToKeep;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode.replaceChild(n,fieldTypeNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isHook());
n.detachChildren();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(n.isHook());
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.detachChildren();
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isHook());
n.detachChildren();
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.copyNameAnnotations(n.getLastChild(),fieldNameNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType!=null){
fieldNameNode.setJSType(type);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.replaceChild(n,fieldNameNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();c!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.getParent().isFunction());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(hasType){
n.removeChild(fieldTypeNode);
fieldTypeNode.getFirstChild().detachFromParent();
}else {
fieldNameNode=IR.name(appendPropForAlias(templateTypeName,fieldName));
if(key.getBooleanProp(Node.IS_CONSTANT_NAME)){
refNode.putBooleanProp(Node.IS_CONSTANT_NAME,true);
}
key.replaceChild(value,refNode);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
assertDefinitionNode(n,Token.VAR);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isSyntheticBlock()||n.getParent()==null){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.tryMergeBlock(n)){
reportCodeChange();
return null;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
c=n.getFirstChild().getNext();
Node fieldNameNode=fieldNameNode.getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
c=n.getFirstChild().getNext();
Node fieldNameNode=fieldNameNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldNameNode.cloneTree();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n2clone.parent=n;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(result.last!=null){
result.last.next=getFirstChild().cloneTree();
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(result.first==null){
result.first=getFirstChild().cloneTree();
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
result.last=getFirstChild().cloneTree();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n2clone.parent=n;
if(result.last!=null){
result.last.next=getFirstChild().cloneTree();
}
if(result.first==null){
result.first=getFirstChild().cloneTree();
}
result.last=getFirstChild().cloneTree();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
createEdge(n,Branch.ON_TRUE,computeFallThrough(fieldNameNode));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
connectToPossibleExceptionHandler(n,NodeUtil.getConditionExpression(node));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isEmpty()){
elem=NodeUtil.newUndefinedNode(elem);
}else {
n.removeChild(elem);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.getParent().replaceChild(n,fieldTypeNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.setString("");
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.getParent().replaceChild(n,IR.var(IR.name(fieldNameNode.getString()).srcref(fnNameNode)).srcref(n));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
IR.name(fieldNameNode.getString()).srcref(fnNameNode).addChildToFront(n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.setString("");
n.getParent().replaceChild(n,IR.var(IR.name(fieldNameNode.getString()).srcref(fnNameNode)).srcref(n));
IR.name(fieldNameNode.getString()).srcref(fnNameNode).addChildToFront(n);

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=AND;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=OR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fieldName.isHook(),"Expected: HOOK, Got: %s",Token.name(hook.getType()));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=callNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode.setString(fieldName);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode!=null){
createEdge(n,Branch.UNCOND,computeFallThrough(child));
}else {
createEdge(node,Branch.UNCOND,computeFollowNode(node,this));
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldNameNode!=null){
swtich (parent.getType()){
case Token.DEFAULT_CASE :

case Token.CASE :

case Token.TRY :
break;

default :
if(n.isBlock()&&node.isSyntheticBlock()){
createEdge(node,Branch.SYN_BLOCK,computeFollowNode(node,this));
}
break;

}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getFirstChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
replaceNode(fieldTypeNode.getParent(),parentNode,fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getFirstChild());
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
fieldNameNode.putBooleanProp(Node.FREE_CALL,true);
replaceNode(fieldTypeNode.getParent(),parentNode,fieldNameNode);

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getFirstChild());
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.putBooleanProp(Node.FREE_CALL,true);
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getFirstChild());
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.putBooleanProp(Node.FREE_CALL,true);
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getFirstChild());
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getFirstChild());
fieldNameNode.putBooleanProp(Node.FREE_CALL,true);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
fieldNameNode.putBooleanProp(Node.FREE_CALL,true);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getFirstChild());
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getFirstChild());
fieldNameNode.putBooleanProp(Node.FREE_CALL,true);
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
fieldNameNode.putBooleanProp(Node.FREE_CALL,true);
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getFirstChild());
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getFirstChild());
fieldNameNode.putBooleanProp(Node.FREE_CALL,true);
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
fieldNameNode.putBooleanProp(Node.FREE_CALL,true);
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getFirstChild());
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
fieldNameNode.putBooleanProp(Node.FREE_CALL,true);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getFirstChild());
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
fieldNameNode.putBooleanProp(Node.FREE_CALL,true);
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getFirstChild());
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
fieldNameNode.putBooleanProp(Node.FREE_CALL,true);
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode.replaceChild(n,IR.number(fieldName.charAt(PROPERTY_CHECKING_UNION_SIZE)));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
if(PROPERTY_CHECKING_UNION_SIZE<0||fieldName.length()<=index){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isString());
if(PROPERTY_CHECKING_UNION_SIZE<0||fieldName.length()<=index){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isString());
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(PROPERTY_CHECKING_UNION_SIZE<0||fieldName.length()<=index){
return n;
}
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
Preconditions.checkArgument(n.isString());
if(PROPERTY_CHECKING_UNION_SIZE<0||fieldName.length()<=index){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
Preconditions.checkArgument(n.isString());
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
if(PROPERTY_CHECKING_UNION_SIZE<0||fieldName.length()<=index){
return n;
}
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isString());
if(PROPERTY_CHECKING_UNION_SIZE<0||fieldName.length()<=index){
return n;
}
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
Preconditions.checkArgument(n.isString());
if(PROPERTY_CHECKING_UNION_SIZE<0||fieldName.length()<=index){
return n;
}
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=start.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
fieldTypeNode.removeChild(n);
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.getParent();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
replaceWithEmpty(fieldTypeNode,fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n=child.getNext();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.setType(Token.FOR);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.copyInformationFrom(n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.addChildBefore(fieldNameNode,n.getFirstChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.addChildAfter(fieldNameNode.cloneNode(),n.getFirstChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reportCodeChange("WHILE node");
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.setType(Token.FOR);
fieldNameNode.copyInformationFrom(n);
n.addChildBefore(fieldNameNode,n.getFirstChild());
n.addChildAfter(fieldNameNode.cloneNode(),n.getFirstChild());
reportCodeChange("WHILE node");

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.setType(Token.FOR);
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.setType(Token.FOR);
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.getParent().replaceChild(typeofNode,IR.string(null));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.getParent().replaceChild(typeofNode,IR.string(null));
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reportCodeChange();
Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldNameNode.getParent();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
replaceWithEmpty(fieldNameNode,n.getParent().getParent());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getNext());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.replaceChild(n,n.getNext());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getNext());
fieldNameNode.replaceChild(n,n.getNext());

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getNext());
Node fieldNameNode=fieldNameNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getNext());
Node fieldNameNode=n.getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getNext());
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(n.getChildCount()==2);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();c!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=c;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=c;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();c!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
declareArguments(n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
swtich (n.getType()){
case Token.IF :
fieldTypeNode=n.getFirstChild().getNext();
break;

case Token.WHILE :

case Token.FOR :
child=NodeUtil.getLoopCodeBlock(n);
break;

default :
return ;

}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fieldNameNode.isString());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode!=null){
if(secondArg.getNext()!=null||!secondArg.isNumber()){
return n;
}else {
fieldType=(int)secondArg.getDouble();
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.getParent().replaceChild(n,IR.number(templateTypeName.equals("indexOf")?fieldName.indexOf(sourceName,fieldType):lstring.lastIndexOf(searchValue,fromIndex)));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.indexOf(PROTOTYPE_SUBSTRING)!=-1){
nameInfo.isPrototype=true;
nameInfo.prototypeClass=fieldName.substring(0,idx);
nameInfo.prototypeProperty=name.substring(idx+PROTOTYPE_SUBSTRING_LEN);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nameInfo.name=name;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nameInfo.isExternallyReferenceable=(scope.getVar(sourceName)==null&&nonNullableTypeNames.contains(sourceName))||isExternallyReferenceable(scope,fieldName);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=node;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=hasType;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
n.addChildToBack(fieldNameNode);
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
insertExprResultState=true;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
insertExprResultState=hasType;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.addChildToBack(fieldNameNode);
insertExprResultState=true;
insertExprResultState=hasType;

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=IR;
n.addChildToBack(fieldNameNode);
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldTypeNode!=null);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(createCheckTypeCallNode(fieldTypeNode.getJSType().toMaybeFunctionType().getReturnType(),fieldNameNode.cloneTree())==null){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.replaceChild(fieldNameNode,createCheckTypeCallNode(fieldTypeNode.getJSType().toMaybeFunctionType().getReturnType(),fieldNameNode.cloneTree()));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
builder.reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
resolvedNamedTypes.putAll(scope,unresolvedNamedTypes.removeAll(scope));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(scope!=null&&scope.getParentScope()==null){
PrototypeObjectType (PrototypeObjectType)getNativeType(JSTypeNative.GLOBAL_THIS)=(PrototypeObjectType)getNativeType(JSTypeNative.GLOBAL_THIS);
JSType fieldType=getType("Window");
if(globalThis.isUnknownType()){
ObjectType ObjectType.cast(fieldType)=ObjectType.cast(windowType);
if(windowObjType!=null){
globalThis.setImplicitPrototype(windowObjType);
}else {
globalThis.setImplicitPrototype(getNativeObjectType(JSTypeNative.OBJECT_TYPE));
}
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode=skipFinallyNodes(follow);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(ControlFlowAnalysis.computeFollowNode(n)==null&&(n.isThrow()||fieldNameNode!=null)){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(ControlFlowAnalysis.computeFollowNode(n)==null||areMatchingExits(n,follow)){
n.detachFromParent();
reportCodeChange();
return null;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=p.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType<0){
return null;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.getParent().replaceChild(n,IR.add(IR.string("").srcref(fieldTypeNode),fieldNameNode.detachFromParent()));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.getParent().replaceChild(n,IR.add(IR.string("").srcref(fieldTypeNode),fieldNameNode.detachFromParent()));
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PROPERTY_CHECKING_UNION_SIZE+=fieldName.length();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode=n;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
assertDefinitionNode(n,Token.FUNCTION);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setDeferredType(n,createFunctionTypeFromNodes(n,sourceName,NodeUtil.getBestJSDocInfo(n),fieldNameNode));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.replaceChild(n,IR.exprResult(IR.assign(IR.getprop(IR.name("module"),IR.string("exports")),n.getFirstChild())).useSourceInfoFromForTree(n));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getFirstChild());
fieldTypeNode.replaceChild(n,IR.exprResult(IR.assign(IR.getprop(IR.name("module"),IR.string("exports")),n.getFirstChild())).useSourceInfoFromForTree(n));

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
updateAssignAllowedStack(fieldTypeNode,false);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=parent;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==n){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
addExpr(fieldNameNode,1,Context.OTHER);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
lastWasEmpty=fieldNameNode.isEmpty();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
addExpr(fieldNameNode,1,Context.OTHER);
lastWasEmpty=fieldNameNode.isEmpty();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nonNullableTypeNames=extractList(ResourceBundle.getBundle(sourceName).getString("jsdoc.annotations"));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nonNullableTypeNames=extractList(ResourceBundle.getBundle(sourceName).getString("jsdoc.suppressions"));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PROPERTY_CHECKING_UNION_SIZE+=sourceName.length();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.get(sourceName)==null){
nameGenerator=reporter.get(sourceName);
hasType=true;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.get(sourceName)==null){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(hasType){
PROPERTY_CHECKING_UNION_SIZE+=declareVarsForObjLitValues(n,sourceName,ref.node.getFirstChild(),fieldTypeNode,fieldNameNode.getChildBefore(varNode),gramps);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PROPERTY_CHECKING_UNION_SIZE+=addStubsForUndeclaredProperties(n,sourceName,fieldNameNode,fieldTypeNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(hasType&&n.canEliminate()){
fieldTypeNode.removeChild(ref.node);
if(!varNode.hasChildren()){
fieldNameNode.removeChild(varNode);
}
PROPERTY_CHECKING_UNION_SIZE++;
ref.node=null;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=firstInList;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
new JSDocInfo.TrimmedStringPosition().setItem(sourceName);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
new JSDocInfo.TrimmedStringPosition().setPositionInformation(PROPERTY_CHECKING_UNION_SIZE,PROPERTY_CHECKING_UNION_SIZE,lineno,charno+sourceName.length());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.setLength(sourceName.length());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
new JSDocInfo.NamePosition().setItem(n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
new JSDocInfo.NamePosition().setPositionInformation(PROPERTY_CHECKING_UNION_SIZE,PROPERTY_CHECKING_UNION_SIZE,lineno,charno+sourceName.length());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
new JSDocInfo.TrimmedStringPosition().setItem(sourceName);
new JSDocInfo.TrimmedStringPosition().setPositionInformation(PROPERTY_CHECKING_UNION_SIZE,PROPERTY_CHECKING_UNION_SIZE,lineno,charno+sourceName.length());
n.setLength(sourceName.length());
new JSDocInfo.NamePosition().setItem(n);
new JSDocInfo.NamePosition().setPositionInformation(PROPERTY_CHECKING_UNION_SIZE,PROPERTY_CHECKING_UNION_SIZE,lineno,charno+sourceName.length());

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkNoTypeCheckSection(n,true);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
rightType=getNativeType(UNKNOWN_TYPE);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.isEnumElementType()){
allowedValueType=allowedValueType.toMaybeEnumElementType().getPrimitiveType();
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(ControlFlowAnalysis.computeFollowNode(fieldTypeNode)!=ControlFlowAnalysis.computeFollowNode(fieldTypeNode)){
if(!isPure(n.getFirstChild())){
return n;
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(ControlFlowAnalysis.computeFollowNode(fieldTypeNode)==null&&(n.isThrow()||n.getFirstChild()!=null)){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(ControlFlowAnalysis.computeFollowNode(fieldTypeNode)==null||areMatchingExits(n,follow)){
Node fieldNameNode=IR.breakNode();
n.getParent().replaceChild(n,replacement);
this.reportCodeChange();
return replacement;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkState(fieldTypeNode.isGetProp());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(head.node.getNext().isFunction()){
continue;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
delta+=pattern.perMemberOverhead;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(head.node.getNext().isFunction()){
continue;
}
delta+=pattern.perMemberOverhead;

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope.inferSlotType(sourceName,fieldType);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(fieldTypeNode,fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
subtree=fieldNameNode;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(fieldTypeNode,fieldNameNode);
subtree=fieldNameNode;

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
tryMinimizeExits(fieldNameNode,PROPERTY_CHECKING_UNION_SIZE,sourceName);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
add(fieldNameNode.getChildAtIndex(1));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
add(fieldNameNode.getLastChild(),Context.PRESERVE_BLOCK);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(!NodeUtil.isObjectLitKey(n,n.getParent()));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(isExpressionTreeUnsafe(n,state.sideEffects)){
state.sideEffects=true;
state.extractBeforeStatement=extractExpression(n,state.extractBeforeStatement);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getString().length()==0){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!okToRenameVar(n.getString(),hasType)){
if(local){
String fieldName=MakeDeclaredNamesUnique.ContextualRenameInverter.getOrginalName(name);
if(!newName.equals(name)){
n.setString(newName);
}
}
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.putBooleanProp(Node.FREE_CALL,true);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
swtich (n.getType()){
case Token.GETPROP :
Node fieldTypeNode=n.getLastChild();
setOriginalName(n,propNode.getString());
break;

case Token.FUNCTION :
String sourceName=NodeUtil.getNearestFunctionName(n);
if(functionName!=null){
setOriginalName(n,functionName);
}
break;

case Token.NAME :
setOriginalName(n,n.getString());
break;

case Token.OBJECTLIT :
for(Node fieldNameNode=n.getFirstChild();key!=null;key=key.getNext()){
if(!key.isQuotedString()){
setOriginalName(key,key.getString());
}
}
break;

}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=string;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
token=descriptionInfo.token;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isDo());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(hasBreakOrContinue(n)){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(NodeUtil.isControlStructureCodeBlock(n,n.getFirstChild()));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.replaceChild(n,n.removeFirstChild());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(mayHaveSideEffects(fieldNameNode)){
Node IR.exprResult(fieldNameNode.detachFromParent()).srcref(cond)=IR.exprResult(cond.detachFromParent()).srcref(cond);
n.addChildAfter(condStatement,n.removeFirstChild());
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isDo());
n.replaceChild(n,n.removeFirstChild());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkArgument(n.isDo());
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.replaceChild(n,n.removeFirstChild());
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isDo());
n.replaceChild(n,n.removeFirstChild());
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=block;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
newExpression=NodeUtil.newUndefinedNode(n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkArgument(fieldNameNode.isReturn());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
newExpression=fieldTypeNode.removeFirstChild();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkArgument(fieldNameNode.isReturn());
newExpression=fieldTypeNode.removeFirstChild();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();current!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=current;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();current!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=current;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
builder.append("<li> Defined: ");
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
generateSourceReferenceLink(builder,sourceName,n.getLineno(),fnDef.getCharno());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
builder.append("<li> Defined: ");
generateSourceReferenceLink(builder,sourceName,n.getLineno(),fnDef.getCharno());

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
builder.append("<LI> ");
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
builder.append("<A NAME=\""+fieldName);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
builder.append(fieldName);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
builder.append("\n");
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
generateType(builder,fieldType);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=propNameNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reporter.add(n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reporter.add(n);
Node fieldNameNode=propNameNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isFunction(),"Node must be a function.");
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkArgument(fieldNameNode.isBlock(),"Node must be a block.");
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldTypeNode.getParent()==null);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode.addChildToFront(fieldType);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.getFirstChild().cloneNode();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(fieldTypeNode,fieldTypeNode.getFirstChild().cloneNode());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(fieldTypeNode,fieldTypeNode.getFirstChild().cloneNode());
Node fieldNameNode=fieldTypeNode.getFirstChild().cloneNode();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(fieldTypeNode,fieldNameNode);
Node fieldNameNode=fieldTypeNode.getFirstChild().cloneNode();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(fieldTypeNode,fieldTypeNode.getFirstChild().cloneNode());
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(fieldTypeNode,fieldNameNode);
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(fieldTypeNode,fieldTypeNode.getFirstChild().cloneNode());
Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(fieldTypeNode,fieldNameNode);
Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(fieldTypeNode,fieldTypeNode.getFirstChild().cloneNode());
n.replaceChild(fieldTypeNode,fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(fieldTypeNode,fieldTypeNode.getFirstChild().cloneNode());
n.replaceChild(fieldTypeNode,fieldNameNode);
Node fieldNameNode=fieldTypeNode.getFirstChild().cloneNode();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(fieldTypeNode,fieldTypeNode.getFirstChild().cloneNode());
n.replaceChild(fieldTypeNode,fieldNameNode);
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(fieldTypeNode,fieldTypeNode.getFirstChild().cloneNode());
n.replaceChild(fieldTypeNode,fieldNameNode);
Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
eliminateParamsAfter(fieldNameNode,n.getNext());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.detachFromParent();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.getLastChild().addChildrenToFront(IR.var(n).copyInformationFrom(argNode));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
eliminateParamsAfter(fieldNameNode,n.getNext());
n.detachFromParent();
fieldNameNode.getLastChild().addChildrenToFront(IR.var(n).copyInformationFrom(argNode));

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.detachFromParent();
Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType!=null){
n.removeChild(result);
fieldNameNode.replaceChild(n,result);
reportCodeChange();
return result;
}else {
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isInstanceOf());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=graph;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.setType(getType(n));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.connect(getNamedContainingFunction(),new Reference(n,fieldTypeNode),fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.setType(getType(n));
n.connect(getNamedContainingFunction(),new Reference(n,fieldTypeNode),fieldNameNode);

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nonNullableTypeNames.remove(fieldNameNode.getString());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(templateTypeName!=null&&fieldType.restrictByNotNullOrUndefined().isTemplateType()){
if(lastGeneration){
reportError(TEMPLATE_TYPE_DUPLICATED,sourceName);
}
foundTemplateType=true;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(new ArrayList<Node>().size()>0){
Node fieldNameNode=joinOnComma(commas,n);
fieldTypeNode.addChildBefore(comma,n);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.removeChild(n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
reporter.reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isGetElem());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkArgument(fieldName.startsWith(LINEMAP_HEADER),"Expected %s",LINEMAP_HEADER);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!isPrototypeMethodDefinition(fieldTypeNode)){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
rewriteDefinition(fieldTypeNode,sourceName);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.removeFirstChild().removeFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
commaTree=fuseExpressionIntoExpression(n.removeFirstChild(),fieldTypeNode.removeFirstChild().removeFirstChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
lastGeneration=true;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(sourceName==null){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.declareType(sourceName,getNativeType(UNKNOWN_TYPE));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.overwriteDeclaredType(sourceName,fieldType);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldNameNode.isGetProp()){
defineSlot(candidate,candidate.getParent(),getNativeType(NO_TYPE),false);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
replaceNode(n.getParent(),getPropNode,IR.getelem(n.getFirstChild(),fieldNameNode));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getFirstChild());
replaceNode(n.getParent(),getPropNode,IR.getelem(n.getFirstChild(),fieldNameNode));

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.setSideEffectFlags(Node.NO_SIDE_EFFECTS);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
PROPERTY_CHECKING_UNION_SIZE=mergeLineCharNo(PROPERTY_CHECKING_UNION_SIZE,fieldType);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode=firstPreciserScopeKnowingConditionOutcome(n,rightScope,!lastGeneration);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
swtich (n.getType()){
case Token.EXPR_RESULT :

case Token.FUNCTION :

case Token.VAR :
break;

case Token.ASSIGN :
Preconditions.checkArgument(fieldTypeNode.isFor(),"Unsupported assignment in replaceWithRhs. parent: %s",Token.name(parent.getType()));
break;

default :
throw new IllegalArgumentException("Unsupported node type in replaceWithRhs "+Token.name(n.getType()));

}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isFor()){
if(fieldName.isEmpty()){
replacements.add(IR.empty());
}else {
Node fieldNameNode=collapseReplacements(replacements);
replacements.clear();
replacements.add(expr);
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName==null){
return null;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.lastIndexOf('.')==-1){
return null;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldName.substring(0,fieldName.lastIndexOf('.')).endsWith(".prototype")){
return null;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sourceName=fixupSourceLocation(sourceFile);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PROPERTY_CHECKING_UNION_SIZE=-1;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.detachFromParent();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=FP;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fp=FP.fingerprint(sourceName)+(serialVersionUID<<1);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
maybeCutLine();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.replaceChild(fieldTypeNode,n.getLastChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getLastChild());
fieldTypeNode.replaceChild(fieldTypeNode,n.getLastChild());

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getLastChild());
Node fieldNameNode=n.getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.replaceChild(fieldTypeNode,n.getLastChild());
Node fieldNameNode=n.getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getLastChild());
fieldTypeNode.replaceChild(fieldTypeNode,n.getLastChild());

Node fieldNameNode=n.getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getLastChild());
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.replaceChild(fieldTypeNode,n.getLastChild());
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getLastChild());
fieldTypeNode.replaceChild(fieldTypeNode,n.getLastChild());

Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getLastChild());
fieldTypeNode.replaceChild(fieldTypeNode,n.getLastChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getLastChild());
n.removeChild(n.getLastChild());
fieldTypeNode.replaceChild(fieldTypeNode,n.getLastChild());

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.replaceChild(fieldTypeNode,n.getLastChild());
n.removeChild(n.getLastChild());
fieldTypeNode.replaceChild(fieldTypeNode,n.getLastChild());

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getLastChild());
fieldTypeNode.replaceChild(fieldTypeNode,n.getLastChild());
Node fieldNameNode=n.getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getLastChild());
n.removeChild(n.getLastChild());
fieldTypeNode.replaceChild(fieldTypeNode,n.getLastChild());

Node fieldNameNode=n.getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.replaceChild(fieldTypeNode,n.getLastChild());
n.removeChild(n.getLastChild());
fieldTypeNode.replaceChild(fieldTypeNode,n.getLastChild());

Node fieldNameNode=n.getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getLastChild());
fieldTypeNode.replaceChild(fieldTypeNode,n.getLastChild());
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getLastChild());
n.removeChild(n.getLastChild());
fieldTypeNode.replaceChild(fieldTypeNode,n.getLastChild());

Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.replaceChild(fieldTypeNode,n.getLastChild());
n.removeChild(n.getLastChild());
fieldTypeNode.replaceChild(fieldTypeNode,n.getLastChild());

Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getLastChild());
fieldTypeNode.replaceChild(fieldTypeNode,n.getLastChild());
n.removeChild(n.getLastChild());
fieldTypeNode.replaceChild(fieldTypeNode,n.getLastChild());

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getLastChild());
fieldTypeNode.replaceChild(fieldTypeNode,n.getLastChild());
n.removeChild(n.getLastChild());
fieldTypeNode.replaceChild(fieldTypeNode,n.getLastChild());

Node fieldNameNode=n.getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getLastChild());
fieldTypeNode.replaceChild(fieldTypeNode,n.getLastChild());
n.removeChild(n.getLastChild());
fieldTypeNode.replaceChild(fieldTypeNode,n.getLastChild());

Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fieldNameNode.addChildToBack(fieldTypeNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setPrettyPrint(true);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fieldTypeNode==null||Token.FUNCTION==source.getType());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.fieldTypeNode=source;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.templateTypeName=templateTypeName;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
foldedStringNode=IR.add(IR.string("").srcref(n),fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(ancestors.length>0);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isNot()){
fieldNameNode=leftParent.removeFirstChild();
}else {
leftParent.detachFromParent();
left=IR.not(leftParent).srcref(leftParent);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
swtich (fieldTypeNode.getType()){
case Token.ASSIGN :
return fieldTypeNode.getJSDocInfo();

case Token.VAR :
return ref.node==fieldTypeNode.getFirstChild()?fieldTypeNode.getJSDocInfo():ref.node.getJSDocInfo();

}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.NUMBER :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
recordClassConstructorOrInterface(fieldName,fieldType,null,null,null,null);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkNotNull(reporter.defineNameIfNotExists(sourceName,lastGeneration),"%s should be in the name graph as a node.",sourceName);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n!=null){
reporter.defineNameIfNotExists(sourceName,lastGeneration).addAssignmentDeclaration(assign);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.CATCH :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.VAR :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
forbidTemps=NodeUtil.has(fieldTypeNode.getLastChild(),new Predicate<Node>(){
  @Override public boolean apply(  Node n){
    if (n.isName()) {
      return n.getString().equals("eval");
    }
    if (!assumeMinimumCapture && n.isFunction()) {
      return n != fnNode;
    }
    return false;
  }
}
,NodeUtil.MATCH_NOT_FUNCTION);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=last;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getJSDocInfo()!=null&&info.getSuppressions().contains("duplicate")){
return true;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getJSDocInfo()==null){
info=fieldNameNode.getJSDocInfo();
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.getParent().replaceChild(n,fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.getParent().replaceChild(n,fieldNameNode);
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode.add(n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
add(fieldNameNode,Context.STATEMENT);
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=cArg;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.removeFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(n,fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(n,fieldNameNode);
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.AND :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reportCodeChange();
Node fieldNameNode=n.removeFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.FUNCTION :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(fieldNameNode,IR.getprop(fieldNameNode.cloneTree(),IR.string("call").srcref(callTarget)));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.addChildAfter(bind.thisValue.cloneTree(),IR.getprop(fieldNameNode.cloneTree(),IR.string("call").srcref(callTarget)));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.putBooleanProp(Node.FREE_CALL,false);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(fieldNameNode,IR.getprop(fieldNameNode.cloneTree(),IR.string("call").srcref(callTarget)));
n.addChildAfter(bind.thisValue.cloneTree(),IR.getprop(fieldNameNode.cloneTree(),IR.string("call").srcref(callTarget)));
n.putBooleanProp(Node.FREE_CALL,false);

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.putBooleanProp(Node.FREE_CALL,false);
Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
newNode=IR.number(Double.parseDouble(sourceName));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
normalizedNewVal=normalizeNumericString(String.valueOf(Double.parseDouble(sourceName)));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
newNode=IR.number(Double.parseDouble(sourceName));
normalizedNewVal=normalizeNumericString(String.valueOf(Double.parseDouble(sourceName)));

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=typeRegistry;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reporter.add(fieldNameNode.getPrototype());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.copyInformationFromForTree(n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.copyInformationFromForTree(n);
n.getParent().replaceChild(n,fieldNameNode);
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.getParent().replaceChild(n,fieldNameNode);
Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.getParent().replaceChild(n,fieldNameNode);
reportCodeChange();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.getParent().replaceChild(n,fieldNameNode);
reportCodeChange();
Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=providedNames;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkNotNull(reporter.get(sourceName.substring(0,PROPERTY_CHECKING_UNION_SIZE)));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkNotNull(parentName.replacementNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkNotNull(reporter.get(sourceName.substring(0,PROPERTY_CHECKING_UNION_SIZE)));
Preconditions.checkNotNull(parentName.replacementNode);
parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isWhile());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
NodeUtil.removeChild(n.getParent(),n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isWhile());
NodeUtil.redeclareVarsInsideBranch(n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isWhile());
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.redeclareVarsInsideBranch(n);
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isWhile());
NodeUtil.redeclareVarsInsideBranch(n);
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=scopes;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
foldedStringNode=IR.add(IR.string("").srcref(n),fieldNameNode);
Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
addStubsForUndeclaredProperties(n,sourceName,ref.node.getAncestor(2),ref.node.getParent());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.EQ :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.SHEQ :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.getParent().replaceChild(condition,fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.getParent().replaceChild(condition,fieldNameNode);
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.POS :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(PROPERTY_CHECKING_UNION_SIZE==Integer.MIN_VALUE){
startID=PROPERTY_CHECKING_UNION_SIZE;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
lastID=PROPERTY_CHECKING_UNION_SIZE;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(PROPERTY_CHECKING_UNION_SIZE==Integer.MIN_VALUE){
startID=PROPERTY_CHECKING_UNION_SIZE;
}
lastID=PROPERTY_CHECKING_UNION_SIZE;

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.getLastChild().isReturn());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=INHERITANCE;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=REGULAR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
recordReference(sourceName,templateTypeName,fieldType);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.CALL :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType=addMarker(fieldNameNode,nodeToInsertAfter,null);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Iterables.addAll(Sets.newTreeSet(ALPHA),fieldNameNode.getAllImplementedInterfaces());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeTraversal.traverse(scope,fieldNameNode.getChildAtIndex(2),new DefineCallbackReturnCallback());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
mapping.sourceFile=sourceName;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
mapping.originalName=sourceName;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.removeFirstChild()!=null){
fieldNameNode.addChildToBack(returnRhs);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.addChildToFront(fieldNameNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=key;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new StringBuilder("(?:^|;)\\s*(").deleteCharAt(sb.length()-1);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new StringBuilder("(?:^|;)\\s*(").append(")\\s*\\((.*?)\\)");
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.setType(NodeUtil.getInverseOperator(n.getType()));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
mapping.sourceFile=getSourceId(sourceName);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
mapping.originalName=templateTypeName;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.INC :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if((sourceName.charAt(PROPERTY_CHECKING_UNION_SIZE)>='0'&&sourceName.charAt(PROPERTY_CHECKING_UNION_SIZE)<='9')||(sourceName.charAt(PROPERTY_CHECKING_UNION_SIZE)>='A'&&sourceName.charAt(PROPERTY_CHECKING_UNION_SIZE)<='Z')){
new StringBuilder().append(sourceName.charAt(PROPERTY_CHECKING_UNION_SIZE));
}else {
new StringBuilder().append('$');
new StringBuilder().append(Integer.toHexString(sourceName.charAt(PROPERTY_CHECKING_UNION_SIZE)));
protectHex=true;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new StringBuilder().append(sourceName);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(PROPERTY_CHECKING_UNION_SIZE==1||n.getType()==Token.BLOCK||parentType==Token.SCRIPT||parentType==Token.LABEL);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.ASSIGN_BITOR :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isName()||n.isGetProp());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(sourceName==null){
return false;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
mapping.sourceFile=sourceName;
mapping.originalName=sourceName;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isNew(),"Expected: NEW, Got: %s",Token.name(node.getType()));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.replaceChild(n,NodeUtil.newExpr(fieldTypeNode));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(fieldTypeNode);
fieldNameNode.replaceChild(n,NodeUtil.newExpr(fieldTypeNode));
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(fieldTypeNode);
reportCodeChange();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeTraversal.traverse(scope,fieldNameNode,new AbstractCfgNodeTraversalCallback(){
  @Override public void visit(  NodeTraversal t,  Node n,  Node parent){
    if (n.isName()) {
      if ((NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) || parent.isVar() || parent.isInc()|| parent.isDec()|| parent.isParamList()|| parent.isCatch()) {
        return;
      }
      String name=n.getString();
      if (compiler.getCodingConvention().isExported(name)) {
        return;
      }
      Node defNode=reachingDef.getDef(name,cfgNode);
      if (defNode != null && !reachingDef.dependsOnOuterScopeVars(name,cfgNode)) {
        candidates.add(new Candidate(name,defNode,n,cfgNode));
      }
    }
  }
}
);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.OR :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.getParent();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
replaceWithEmpty(n,fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.length()==0||!Character.isJavaIdentifierStart(fieldName.charAt(0)))return false;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.BITNOT :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.GT :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.NEW :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkState(n.isName()||NodeUtil.isGet(expr));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.setType(Token.ASSIGN);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.replaceChild(fieldTypeNode.getLastChild(),fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.addChildToBack(fieldTypeNode.getLastChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
tempNameValue=n.cloneTree();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkState(n.isName()||NodeUtil.isGet(expr));
fieldTypeNode.setType(Token.ASSIGN);
fieldTypeNode.replaceChild(fieldTypeNode.getLastChild(),fieldNameNode);
fieldNameNode.addChildToBack(fieldTypeNode.getLastChild());
tempNameValue=n.cloneTree();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.setType(Token.ASSIGN);
Node fieldNameNode=fieldTypeNode.getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!hasType){
String getExternalMessageId(templateTypeName)=getExternalMessageId(templateTypeName);
if(externalId!=null){
lastGeneration=true;
fieldType=externalId;
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.INC :

case Token.CALL :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.putBooleanProp(Node.SYNTHETIC_BLOCK_PROP,true);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=symbolMap;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(templateTypeName==null){
return ;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
replaced[i]=templateTypeName;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(templateTypeName==null){
return ;
}
replaced[i]=templateTypeName;

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=lp.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(sourceName==null){
return ;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
replaced[i]=sourceName;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(sourceName==null){
return ;
}
replaced[i]=sourceName;

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=symbolMap;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(n,fieldNameNode);
Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(n,fieldNameNode);
reportCodeChange();

Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(n,fieldNameNode);
reportCodeChange();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(n,fieldNameNode);
n.replaceChild(n,fieldNameNode);
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reportCodeChange();
n.replaceChild(n,fieldNameNode);
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(n,fieldNameNode);
reportCodeChange();
Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(n,fieldNameNode);
n.replaceChild(n,fieldNameNode);
reportCodeChange();

Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reportCodeChange();
n.replaceChild(n,fieldNameNode);
reportCodeChange();

Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(n,fieldNameNode);
reportCodeChange();
n.replaceChild(n,fieldNameNode);
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(n,fieldNameNode);
reportCodeChange();
n.replaceChild(n,fieldNameNode);
reportCodeChange();

Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.cloneTree();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkState(!n.isFunction()||!parent.isVar());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=references;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
aliasRefs.references.get(PROPERTY_CHECKING_UNION_SIZE).getParent().replaceChild(aliasRef.getNode(),fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Sets.newHashSetWithExpectedSize(aliasRefs.references.size()-1).add(fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
aliasRefs.references.get(PROPERTY_CHECKING_UNION_SIZE).getParent().replaceChild(aliasRef.getNode(),fieldNameNode);
Sets.newHashSetWithExpectedSize(aliasRefs.references.size()-1).add(fieldNameNode);

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldNameNode==null){
return false;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
getRoot().getLastChild().addChildToBack(fieldNameNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.setJSType(scope);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n);
fieldNameNode.setJSType(scope);

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n);
Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n);
Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
maybeSetBaseType(fieldNameNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE<fieldName.getScope().getVarCount()){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.containsFunction(fieldNameNode)){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
tryRemoveDeadAssignments(fieldName,fieldName.getControlFlowGraph());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
makeLocalNamesUnique(fieldNameNode,lastGeneration);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
rewriteFunctionDeclarations(fieldNameNode.getLastChild());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.getFunctionBody(fieldNameNode).detachFromParent();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(lastGeneration){
fixUnitializedVarDeclarations(NodeUtil.getFunctionBody(fieldNameNode));
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(replaceReturns(NodeUtil.getFunctionBody(fieldNameNode),templateTypeName,fieldName,lastGeneration)!=null);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
templateTypeName=collapseDots(basePath);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sourceName=collapseDots(targetPath);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case EXPORT :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.indexOf('\n',PROPERTY_CHECKING_UNION_SIZE)<0){
index=fieldName.length();
}
PROPERTY_CHECKING_UNION_SIZE=fieldName.indexOf('\n',PROPERTY_CHECKING_UNION_SIZE)+1;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case TYPE :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
edgeList[i]=formatNodeName(PROPERTY_CHECKING_UNION_SIZE)+ARROW;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.THROW :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
foldedStringNode=IR.add(IR.string("").srcref(n),fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
foldedStringNode=IR.add(IR.string("").srcref(n),fieldNameNode);
Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=cssNames;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case EXTENDS :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.GETELEM :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.THIS :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case SET_FROM_GLOBAL :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.rhino.jstype.JSTypeRegistry,1625
========
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.getFirstChild()==null){
return null;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!NodeUtil.isExprAssign(fieldTypeNode.getFirstChild())){
return null;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getFirstChild()==null){
return null;
}
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.getFirstChild()==null){
return null;
}
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(n.getType()==n){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=NodeUtil.isLiteralValue(n,true);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(n.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==n){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.LT){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(n.getType()==Token.LT){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldNameNode=parent;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=parametersNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()!=null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=cArg;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=codingConvention;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(first.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.GETELEM){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.addChildToBack(n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.GETELEM){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.addChildToBack(n);
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.GETELEM){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.addChildToBack(n);
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.addChildToBack(n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.GETELEM){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.addChildToBack(n);
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.GETELEM){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.addChildToBack(n);
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.GETELEM){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldNameNode=node;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode.getFirstChild().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldNameNode=fieldTypeNode.getFirstChild().getNext().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldNameNode=fieldTypeNode.getFirstChild().getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n==null){
return false;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isExprAssign(n)){
return false;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isGet(fieldNameNode.getFirstChild())){
return false;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldTypeNode.isGetProp()){
return ;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=n.getFirstChild().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()==Token.FUNCTION){
return fieldTypeNode;
}else if(pType==Token.ASSIGN){
return parent.getLastChild();
}else if(pType==Token.VAR){
return fieldNameNode.getFirstChild();
}else {
return null;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
swtich (fieldTypeNode.getType()){
case Token.VOID :
return "VOID";

default :
return Token.name(type);

}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()!=n){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode.getParent();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
swtich (fieldTypeNode.getParent().getType()){
case Token.NAME :
return parent.getString();

case Token.ASSIGN :
return parent.getFirstChild().getQualifiedName();

default :
return fieldTypeNode.getFirstChild().getString()!=null&&name.length()!=0?name:null;

}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.isGet(fieldTypeNode.getFirstChild())){
current=current.getFirstChild();
hasType=true;
if(current.isGetProp()&&current.getLastChild().getString().equals("prototype")){
current=current.getFirstChild();
}
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=n.getFirstChild().getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!NodeUtil.isPrototypePropertyDeclaration(n)){
return null;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldTypeNode.isVar()){
return false;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=n.getFirstChild().getNext().getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldNameNode=n.getParent().getParent();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldNameNode=n.getParent();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldNameNode=n.getParent().getParent().getFirstChild().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldNameNode=n.getParent().getParent().getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getFirstChild().getQualifiedName()==null||qName.isEmpty()){
return ;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=result;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(hasType||n.getType()==Token.NAME||nType==Token.GETPROP);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getType()==Token.NAME||nType==Token.GETPROP){
for(int PROPERTY_CHECKING_UNION_SIZE=1;i<PROPERTY_CHECKING_UNION_SIZE&&n.hasChildren();i++){
n=n.getFirstChild();
}
if(n.hasChildren()){
flattenNameRef(sourceName,n.getFirstChild(),n,sourceName);
}
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!isPropertyAssignmentToName(n)){
return false;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!sourceName.equals(fieldTypeNode.getFirstChild().getString())){
return false;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=ancestor;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=right.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()!=PROPERTY_CHECKING_UNION_SIZE){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==PROPERTY_CHECKING_UNION_SIZE){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(arg.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=n.getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.getNext()==null||!nextNode.isExprResult()){
return ;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldTypeNode.isCall()){
return ;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getFirstChild()==null){
return n;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldNameNode==null){
return n;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fieldTypeNode.isGetProp());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkArgument(fieldTypeNode.isGetProp());
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=initCodeRoot.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldNameNode.getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldNameNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldNameNode.getLastChild().hasOneChild()){
return null;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isReturn()){
return statement.getFirstChild();
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getType()==Token.NOT){
TernaryValue NodeUtil.getPureBooleanValue(n)=NodeUtil.getPureBooleanValue(n);
swtich (value){
case TRUE :
return Token.TRUE;

case FALSE :
return Token.FALSE;

}
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkNoTypeCheckSection(fieldTypeNode,true);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==info.initialValue){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=hasType;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
info.initialValueParent.replaceChild(info.initialValue,fieldTypeNode.cloneTree());
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()!=info.initialValue){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=hasType;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==info.initialValue){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=hasType;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()!=info.initialValue){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=hasType;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode.getFirstChild().getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldNameNode=that.parameters.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=parameters;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=thisParam;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=otherParam;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isExprResult()){
if(maybeExpr.getFirstChild().isCall()){
Node fieldTypeNode.getFirstChild().getFirstChild()=maybeExpr.getFirstChild().getFirstChild();
if(calledFn.isGetElem()){
return false;
}else if(calledFn.isGetProp()&&calledFn.getLastChild().getString().startsWith("on")){
return false;
}
}
return true;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=NULL;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=value;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode.getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldNameNode=an;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals(fieldTypeNode.getQualifiedName())){
return ;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
type=getValueType(n.getNext());
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
isPropAssign=true;
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
type=getValueType(n.getNext());
isPropAssign=true;

fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node n : fieldTypeNode.children()){
if(n==n){
break;
}
if(isExpressionTreeUnsafe(n,lastGeneration)){
seenSideEffects=true;
hasType=true;
}
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(parent.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=nextParent;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=nextNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.OR&&!lastGeneration||type==Token.AND&&rval){
fieldNameNode=n;
}else if(!mayHaveSideEffects(left)){
replacement=n;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=getFirstChild().cloneTree();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(PROPERTY_CHECKING_UNION_SIZE<0){
error(INDEX_OUT_OF_BOUNDS_ERROR,n);
return n;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.STRING){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(n.getType()==Token.STRING){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==n){
type=getValueType(n.getNext());
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
info.parentForNewVarDecl=fieldTypeNode;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
info.siblingToInsertVarDeclBefore=fieldTypeNode.getFirstChild();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(use.node.getParent()==null){
return false;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=useSite.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode.removeFirstChild().getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldNameNode=fieldTypeNode.removeFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldNameNode=nextSibling;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.containsType(n,Token.IN)){
return ;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.removeChild(n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fieldTypeNode.isCall()){
return null;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 0
TESTING : closure_35
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 600 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test
  - com.google.javascript.jscomp.parsing.ParserTest::testJSDocAttachment11
  - com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertyDeclarationOnRecordType
  - com.google.javascript.jscomp.TypeCheckTest::testMissingProperty37
  - com.google.javascript.jscomp.TypeCheckTest::testMissingProperty36
  - com.google.javascript.jscomp.TypeCheckTest::testDuplicateRecordFields2
  - com.google.javascript.jscomp.TypeCheckTest::testDuplicateRecordFields1
  - com.google.javascript.jscomp.TypeCheckTest::testRecordType7
  - com.google.javascript.jscomp.TypeCheckTest::testRecordType5
  - com.google.javascript.jscomp.TypeCheckTest::testRecordType4
  - com.google.javascript.jscomp.TypeCheckTest::testRecordType3
  - com.google.javascript.jscomp.TypeCheckTest::testRecordType2
  - com.google.javascript.jscomp.TypeCheckTest::testRecordType1
  - com.google.javascript.jscomp.TypeCheckTest::testTypeInferenceWithCast5
  - com.google.javascript.jscomp.TypeCheckTest::testObjectLiteralDeclaration3
  - com.google.javascript.jscomp.TypeCheckTest::testTypeInferenceWithNoEntry2
  - com.google.javascript.jscomp.TypeCheckTest::testTypeInferenceWithNoEntry1
  - com.google.javascript.jscomp.LooseTypeCheckTest::testTypeInferenceWithCast5
  - com.google.javascript.jscomp.ExternExportsPassTest::testTypedef
Failing tests: 18
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fieldTypeNode.isCall()){
return null;
}
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 0
TESTING : closure_35
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 600 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test
  - com.google.javascript.jscomp.parsing.ParserTest::testJSDocAttachment11
  - com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertyDeclarationOnRecordType
  - com.google.javascript.jscomp.TypeCheckTest::testMissingProperty37
  - com.google.javascript.jscomp.TypeCheckTest::testMissingProperty36
  - com.google.javascript.jscomp.TypeCheckTest::testDuplicateRecordFields2
  - com.google.javascript.jscomp.TypeCheckTest::testDuplicateRecordFields1
  - com.google.javascript.jscomp.TypeCheckTest::testRecordType7
  - com.google.javascript.jscomp.TypeCheckTest::testRecordType5
  - com.google.javascript.jscomp.TypeCheckTest::testRecordType4
  - com.google.javascript.jscomp.TypeCheckTest::testRecordType3
  - com.google.javascript.jscomp.TypeCheckTest::testRecordType2
  - com.google.javascript.jscomp.TypeCheckTest::testRecordType1
  - com.google.javascript.jscomp.TypeCheckTest::testTypeInferenceWithCast5
  - com.google.javascript.jscomp.TypeCheckTest::testObjectLiteralDeclaration3
  - com.google.javascript.jscomp.TypeCheckTest::testTypeInferenceWithNoEntry2
  - com.google.javascript.jscomp.TypeCheckTest::testTypeInferenceWithNoEntry1
  - com.google.javascript.jscomp.LooseTypeCheckTest::testTypeInferenceWithCast5
  - com.google.javascript.jscomp.ExternExportsPassTest::testTypedef
Failing tests: 18
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldNameNode=param;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(n.getFirstChild()==null||!function.isGetProp()){
return false;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=name;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldTypeNode.isName()){
return false;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isExprAssign(n)){
return false;
}
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isExprAssign(n)){
return false;
}
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=paramNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldNameNode.getFirstChild()==null){
return false;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=getPropNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(n.getType()==PROPERTY_CHECKING_UNION_SIZE){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldNameNode=CASE;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode=fieldTypeNode;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkNotNull(fieldTypeNode.getParent());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeCheckTest::testIssue669
COUNT THESE===> Subject [_name=closure, _id=35, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeCheckTest testIssue669
TESTING : com.google.javascript.jscomp.TypeCheckTest::testIssue669
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_40_2/closure/closure_35_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeCheckTest::testIssue669
  - com.google.javascript.jscomp.TypeCheckTest::testIssue669
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
Timeout!
