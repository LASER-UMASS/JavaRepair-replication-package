java version "1.7.0_231"
OpenJDK Runtime Environment (rhel-2.6.19.1.el7_6-x86_64 u231-b01)
OpenJDK 64-Bit Server VM (build 24.231-b01, mixed mode)
Check out 1adb1e69 to /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j/ OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Run post-checkout hook..................................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 1adb1e69:6bf5bba0..................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Time-7b......................................... OK
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 2
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_endOfYear
/home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2
PURIFY IS FALSE
=================================================
Project : time_7	start : 19/10/15 10:59

readFailedTest: path is /mnt/nfs/work1/brun/mmotwani/SimFix/d4j-info/failed_tests/time/7.txt#ATTEMPTS: 2

# FAILING TESTS: 2
TIMEOUT : 18000000
===========
locations= [<org.joda.time.DateTimeZone,175>, <org.joda.time.DateTimeZone,176>, <org.joda.time.DateTimeZone,179>, <org.joda.time.DateTimeZone,182>, <org.joda.time.DateTimeZone,183>, <org.joda.time.DateTimeZone,184>, <org.joda.time.DateTimeZone,185>, <org.joda.time.DateTimeZone,910>, <org.joda.time.DateTimeZone,912>, <org.joda.time.DateTimeZone,913>, <org.joda.time.DateTimeZone,915>, <org.joda.time.DateTimeZone,928>, <org.joda.time.DateTimeZone,938>, <org.joda.time.DateTimeZone,952>, <org.joda.time.DateTimeZone,953>, <org.joda.time.DateTimeZone,955>, <org.joda.time.DateTimeZone,958>, <org.joda.time.DateTimeZone,979>, <org.joda.time.DateTimeZone,980>, <org.joda.time.DateTimeZone,981>, <org.joda.time.DateTimeZone,982>, <org.joda.time.DateTimeZone,983>, <org.joda.time.DateTimeZone,985>, <org.joda.time.DateTimeZone,1002>, <org.joda.time.DateTimeZone,1004>, <org.joda.time.DateTimeZone,1006>, <org.joda.time.DateTimeZone,1035>, <org.joda.time.DateTimeZone,1037>, <org.joda.time.DateTimeZone,1040>, <org.joda.time.tz.DateTimeZoneBuilder,1528>, <org.joda.time.tz.DateTimeZoneBuilder,1529>, <org.joda.time.tz.DateTimeZoneBuilder,1530>, <org.joda.time.tz.DateTimeZoneBuilder,1533>, <org.joda.time.tz.DateTimeZoneBuilder,1534>, <org.joda.time.tz.DateTimeZoneBuilder,1535>, <org.joda.time.tz.DateTimeZoneBuilder,1536>, <org.joda.time.tz.DateTimeZoneBuilder,1570>, <org.joda.time.tz.DateTimeZoneBuilder,1571>, <org.joda.time.tz.DateTimeZoneBuilder,1572>, <org.joda.time.tz.DateTimeZoneBuilder,1573>, <org.joda.time.tz.DateTimeZoneBuilder,1574>, <org.joda.time.tz.CachedDateTimeZone,103>, <org.joda.time.tz.CachedDateTimeZone,140>, <org.joda.time.tz.CachedDateTimeZone,141>, <org.joda.time.tz.CachedDateTimeZone,142>, <org.joda.time.tz.CachedDateTimeZone,143>, <org.joda.time.tz.CachedDateTimeZone,144>, <org.joda.time.tz.CachedDateTimeZone,145>, <org.joda.time.tz.CachedDateTimeZone,146>, <org.joda.time.tz.CachedDateTimeZone,148>, <org.joda.time.tz.CachedDateTimeZone,152>, <org.joda.time.tz.CachedDateTimeZone,153>, <org.joda.time.tz.CachedDateTimeZone,155>, <org.joda.time.tz.CachedDateTimeZone,156>, <org.joda.time.tz.CachedDateTimeZone,158>, <org.joda.time.tz.CachedDateTimeZone,159>, <org.joda.time.tz.CachedDateTimeZone,160>, <org.joda.time.tz.CachedDateTimeZone,166>, <org.joda.time.chrono.BaseChronology,132>, <org.joda.time.chrono.BaseChronology,133>, <org.joda.time.chrono.BaseChronology,134>, <org.joda.time.chrono.BaseChronology,135>, <org.joda.time.chrono.BaseChronology,136>, <org.joda.time.chrono.BaseChronology,137>, <org.joda.time.chrono.BaseChronology,138>, <org.joda.time.chrono.AssembledChronology,131>, <org.joda.time.chrono.AssembledChronology,133>, <org.joda.time.chrono.AssembledChronology,136>, <org.joda.time.chrono.GJChronology,269>, <org.joda.time.chrono.GJChronology,270>, <org.joda.time.chrono.GJChronology,279>, <org.joda.time.chrono.GJChronology,280>, <org.joda.time.chrono.GJChronology,105>, <org.joda.time.chrono.GJChronology,108>, <org.joda.time.chrono.GJChronology,83>, <org.joda.time.chrono.GJChronology,173>, <org.joda.time.chrono.GJChronology,189>, <org.joda.time.chrono.GJChronology,191>, <org.joda.time.chrono.GJChronology,192>, <org.joda.time.chrono.GJChronology,194>, <org.joda.time.chrono.GJChronology,198>, <org.joda.time.chrono.GJChronology,199>, <org.joda.time.chrono.GJChronology,200>, <org.joda.time.chrono.GJChronology,201>, <org.joda.time.chrono.GJChronology,202>, <org.joda.time.chrono.GJChronology,204>, <org.joda.time.chrono.GJChronology,205>, <org.joda.time.chrono.GJChronology,206>, <org.joda.time.chrono.GJChronology,209>, <org.joda.time.chrono.GJChronology,213>, <org.joda.time.chrono.GJChronology,214>, <org.joda.time.chrono.GJChronology,219>, <org.joda.time.chrono.GJChronology,220>, <org.joda.time.chrono.GJChronology,226>, <org.joda.time.chrono.GJChronology,227>, <org.joda.time.chrono.GJChronology,228>, <org.joda.time.chrono.GJChronology,291>, <org.joda.time.chrono.GJChronology,294>, <org.joda.time.chrono.GJChronology,305>, <org.joda.time.chrono.GJChronology,315>, <org.joda.time.chrono.GJChronology,318>, <org.joda.time.chrono.GJChronology,319>, <org.joda.time.chrono.GJChronology,395>, <org.joda.time.chrono.GJChronology,404>, <org.joda.time.chrono.GJChronology,473>, <org.joda.time.chrono.GJChronology,475>, <org.joda.time.chrono.GJChronology,476>, <org.joda.time.chrono.GJChronology,477>, <org.joda.time.chrono.GJChronology,478>, <org.joda.time.chrono.GJChronology,480>, <org.joda.time.chrono.GJChronology,481>, <org.joda.time.chrono.GJChronology,482>, <org.joda.time.chrono.GJChronology,484>, <org.joda.time.chrono.GJChronology,485>, <org.joda.time.chrono.GJChronology,488>, <org.joda.time.chrono.GJChronology,493>, <org.joda.time.chrono.GJChronology,499>, <org.joda.time.chrono.GJChronology,505>, <org.joda.time.chrono.GJChronology,509>, <org.joda.time.chrono.GJChronology,510>, <org.joda.time.chrono.GJChronology,511>, <org.joda.time.chrono.GJChronology,512>, <org.joda.time.chrono.GJChronology,513>, <org.joda.time.chrono.GJChronology,514>, <org.joda.time.chrono.GJChronology,515>, <org.joda.time.chrono.GJChronology,516>, <org.joda.time.chrono.GJChronology,517>, <org.joda.time.chrono.GJChronology,518>, <org.joda.time.chrono.GJChronology,520>, <org.joda.time.chrono.GJChronology,525>, <org.joda.time.chrono.GJChronology,534>, <org.joda.time.chrono.GJChronology,535>, <org.joda.time.chrono.GJChronology,540>, <org.joda.time.chrono.GJChronology,541>, <org.joda.time.chrono.GJChronology,549>, <org.joda.time.chrono.GJChronology,551>, <org.joda.time.chrono.GJChronology,552>, <org.joda.time.chrono.GJChronology,554>, <org.joda.time.chrono.GJChronology,557>, <org.joda.time.chrono.GJChronology,559>, <org.joda.time.chrono.GJChronology,561>, <org.joda.time.chrono.GJChronology,563>, <org.joda.time.chrono.GJChronology,565>, <org.joda.time.chrono.GJChronology,567>, <org.joda.time.chrono.GJChronology,569>, <org.joda.time.chrono.GJChronology,575>, <org.joda.time.chrono.GJChronology,577>, <org.joda.time.chrono.GJChronology,578>, <org.joda.time.chrono.GJChronology,580>, <org.joda.time.chrono.GJChronology,583>, <org.joda.time.chrono.GJChronology,587>, <org.joda.time.base.AbstractInstant,61>, <org.joda.time.base.AbstractInstant,62>, <org.joda.time.base.AbstractInstant,259>, <org.joda.time.base.AbstractInstant,260>, <org.joda.time.Instant,118>, <org.joda.time.Instant,119>, <org.joda.time.Instant,120>, <org.joda.time.Instant,144>, <org.joda.time.Instant,256>, <org.joda.time.DateTimeUtils,98>, <org.joda.time.DateTimeUtils,99>, <org.joda.time.DateTimeUtils,100>, <org.joda.time.DateTimeUtils,112>, <org.joda.time.DateTimeUtils,113>, <org.joda.time.DateTimeUtils,114>, <org.joda.time.DateTimeUtils,159>, <org.joda.time.DateTimeUtils,160>, <org.joda.time.DateTimeUtils,163>, <org.joda.time.DateTimeUtils,299>, <org.joda.time.DateTimeUtils,302>, <org.joda.time.chrono.BasicChronology,153>, <org.joda.time.chrono.BasicChronology,157>, <org.joda.time.chrono.BasicChronology,159>, <org.joda.time.chrono.BasicChronology,167>, <org.joda.time.chrono.BasicChronology,172>, <org.joda.time.chrono.BasicChronology,173>, <org.joda.time.chrono.BasicChronology,174>, <org.joda.time.chrono.BasicChronology,175>, <org.joda.time.chrono.BasicChronology,177>, <org.joda.time.chrono.BasicChronology,185>, <org.joda.time.chrono.BasicChronology,336>, <org.joda.time.chrono.BasicChronology,337>, <org.joda.time.chrono.BasicChronology,338>, <org.joda.time.chrono.BasicChronology,348>, <org.joda.time.chrono.BasicChronology,349>, <org.joda.time.chrono.BasicChronology,351>, <org.joda.time.chrono.BasicChronology,353>, <org.joda.time.chrono.BasicChronology,369>, <org.joda.time.chrono.BasicChronology,394>, <org.joda.time.chrono.BasicChronology,395>, <org.joda.time.chrono.BasicChronology,396>, <org.joda.time.chrono.BasicChronology,408>, <org.joda.time.chrono.BasicChronology,409>, <org.joda.time.chrono.BasicChronology,410>, <org.joda.time.chrono.BasicChronology,411>, <org.joda.time.chrono.BasicChronology,413>, <org.joda.time.chrono.BasicChronology,415>, <org.joda.time.chrono.BasicChronology,416>, <org.joda.time.chrono.BasicChronology,418>]
======================org.joda.time.DateTimeZone,175
UNKNOWN ASTNode type : catch (IllegalArgumentException ex) {
  zone=DateTimeZone.getDefault();
}

========
if(zone==null){
throw new IllegalArgumentException("DateTimeZone must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(zone==null){
throw new NullPointerException("Zone must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(zone==DateTimeZone.UTC){
throw new IllegalArgumentException("The datetime zone must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(zone==null){
if(zone==DateTimeZone.UTC){
return withUTC();
}
throw new IllegalArgumentException("The datetime zone must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==null){
if(zone==DateTimeZone.UTC){
return getBase();
}
throw new IllegalArgumentException("The datetime zone must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==null){
if(zone==null){
return DateTimeZone.getDefault();
}
throw new IllegalArgumentException("The datetime zone must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==null){
if(zone==getZone()){
return this;
}
throw new IllegalArgumentException("The datetime zone must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==null){
if(zone==getParam()){
return this;
}
throw new IllegalArgumentException("The datetime zone must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==null){
if(getZone()==zone){
return this;
}
throw new IllegalArgumentException("The datetime zone must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone!=null){
throw new IllegalArgumentException("The datetime zone must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(zone==null){
if(zone!=null){
return zone;
}
throw new IllegalArgumentException("The datetime zone must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(UTC==null){
throw new IllegalArgumentException("The datetime zone must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(UTC==zone){
throw new IllegalArgumentException("The datetime zone must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(iZone==null){
throw new IllegalArgumentException("The datetime zone must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==null){
if(UTC==zone){
return this;
}
throw new IllegalArgumentException("The datetime zone must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==getZone()){
return this;
}
if(zone==null){
throw new IllegalArgumentException("The datetime zone must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iID.equals("UTC")){
return DateTimeZone.UTC;
}
if(zone==null){
throw new IllegalArgumentException("The datetime zone must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone!=null){
if(zone!=null){
return zone;
}
throw new IllegalArgumentException("The datetime zone must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
if(zone==DateTimeZone.UTC){
return withUTC();
}
throw new IllegalArgumentException("The datetime zone must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setProvider0(cProvider);
SecurityManager sm=System.getSecurityManager();
if(sm!=null){
sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
}
if(zone==null){
throw new IllegalArgumentException("The datetime zone must not be null");
}
synchronized(DateTimeZone.class){
cDefault=zone;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
setNameProvider0(cNameProvider);
SecurityManager sm=System.getSecurityManager();
if(sm!=null){
sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
}
if(zone==null){
throw new IllegalArgumentException("The datetime zone must not be null");
}
synchronized(DateTimeZone.class){
cDefault=zone;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
SecurityManager sm=System.getSecurityManager();
if(sm!=null){
sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
}
if(zone==null){
throw new IllegalArgumentException("DateTimeZone must not be null");
}
synchronized(DateTimeZone.class){
cDefault=zone;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
SecurityManager sm=System.getSecurityManager();
if(sm!=null){
sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
}
if(zone==null){
throw new IllegalArgumentException("The MillisProvider must not be null");
}
synchronized(DateTimeZone.class){
cDefault=zone;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
checkPermission();
SecurityManager sm=System.getSecurityManager();
if(sm!=null){
sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
}
if(zone==null){
throw new IllegalArgumentException("The datetime zone must not be null");
}
synchronized(DateTimeZone.class){
cDefault=zone;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
SecurityManager sm=System.getSecurityManager();
if(sm!=null){
sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
}
if(zone==null){
if(zone==null){
return DateTimeZone.getDefault();
}
throw new IllegalArgumentException("The datetime zone must not be null");
}
synchronized(DateTimeZone.class){
cDefault=zone;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
SecurityManager sm=System.getSecurityManager();
if(sm!=null){
sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
}
if(zone==DateTimeZone.UTC){
throw new IllegalArgumentException("The datetime zone must not be null");
}
synchronized(DateTimeZone.class){
cDefault=zone;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
SecurityManager sm=System.getSecurityManager();
if(sm!=null){
sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
}
if(zone==null){
if(zone==DateTimeZone.UTC){
return withUTC();
}
throw new IllegalArgumentException("The datetime zone must not be null");
}
synchronized(DateTimeZone.class){
cDefault=zone;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
SecurityManager sm=System.getSecurityManager();
if(sm!=null){
sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
}
if(zone==null){
if(zone==DateTimeZone.UTC){
return getBase();
}
throw new IllegalArgumentException("The datetime zone must not be null");
}
synchronized(DateTimeZone.class){
cDefault=zone;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
SecurityManager sm=System.getSecurityManager();
if(sm!=null){
sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
}
if(zone!=null){
throw new IllegalArgumentException("The datetime zone must not be null");
}
synchronized(DateTimeZone.class){
cDefault=zone;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
SecurityManager sm=System.getSecurityManager();
if(sm!=null){
sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
}
if(zone==null){
throw new NullPointerException("Zone must not be null");
}
synchronized(DateTimeZone.class){
cDefault=zone;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
SecurityManager sm=System.getSecurityManager();
if(sm!=null){
sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
}
if(zone==null){
if(zone==getZone()){
return this;
}
throw new IllegalArgumentException("The datetime zone must not be null");
}
synchronized(DateTimeZone.class){
cDefault=zone;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
SecurityManager sm=System.getSecurityManager();
if(sm!=null){
sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
}
if(zone==null){
if(zone==getParam()){
return this;
}
throw new IllegalArgumentException("The datetime zone must not be null");
}
synchronized(DateTimeZone.class){
cDefault=zone;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
serialVersionUID=getChronology().withZone(zone).set(this,instant);
SecurityManager sm=System.getSecurityManager();
if(sm!=null){
sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
}
if(zone==null){
throw new IllegalArgumentException("The datetime zone must not be null");
}
synchronized(DateTimeZone.class){
cDefault=zone;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
SecurityManager sm=System.getSecurityManager();
if(sm!=null){
sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
}
if(UTC==null){
throw new IllegalArgumentException("The datetime zone must not be null");
}
synchronized(DateTimeZone.class){
cDefault=zone;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
SecurityManager sm=System.getSecurityManager();
if(sm!=null){
sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
}
if(zone==null){
if(getZone()==zone){
return this;
}
throw new IllegalArgumentException("The datetime zone must not be null");
}
synchronized(DateTimeZone.class){
cDefault=zone;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
SecurityManager sm=System.getSecurityManager();
if(sm!=null){
sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
}
zone=DateTimeUtils.getZone(zone);
if(zone==null){
throw new IllegalArgumentException("The datetime zone must not be null");
}
synchronized(DateTimeZone.class){
cDefault=zone;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
cDefault=DateTimeUtils.getZone(zone);
SecurityManager sm=System.getSecurityManager();
if(sm!=null){
sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
}
if(zone==null){
throw new IllegalArgumentException("The datetime zone must not be null");
}
synchronized(DateTimeZone.class){
cDefault=zone;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
SecurityManager sm=System.getSecurityManager();
if(sm!=null){
sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
}
if(zone==null){
throw new IllegalInstantException(serialVersionUID,zone.getID());
}
synchronized(DateTimeZone.class){
cDefault=zone;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
SecurityManager sm=System.getSecurityManager();
if(sm!=null){
if(zone!=null){
return zone;
}
sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
}
if(zone==null){
throw new IllegalArgumentException("The datetime zone must not be null");
}
synchronized(DateTimeZone.class){
cDefault=zone;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(MAX_MILLIS==0){
return DateTimeZone.UTC;
}
SecurityManager sm=System.getSecurityManager();
if(sm!=null){
sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
}
if(zone==null){
throw new IllegalArgumentException("The datetime zone must not be null");
}
synchronized(DateTimeZone.class){
cDefault=zone;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iFixedOffsetCache==null){
iFixedOffsetCache=new HashMap<String,SoftReference<DateTimeZone>>();
}
SecurityManager sm=System.getSecurityManager();
if(sm!=null){
sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
}
if(zone==null){
throw new IllegalArgumentException("The datetime zone must not be null");
}
synchronized(DateTimeZone.class){
cDefault=zone;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
SecurityManager sm=System.getSecurityManager();
if(sm!=null){
sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
}
if(iZone==null){
throw new IllegalArgumentException("The datetime zone must not be null");
}
synchronized(DateTimeZone.class){
cDefault=zone;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
SecurityManager sm=System.getSecurityManager();
if(sm!=null){
sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
}
if(zone==null){
if(zone==zone){
return this;
}
throw new IllegalArgumentException("The datetime zone must not be null");
}
synchronized(DateTimeZone.class){
cDefault=zone;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
zone=DateTimeUtils.getZone(zone);
SecurityManager sm=System.getSecurityManager();
if(sm!=null){
sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
}
if(zone==null){
throw new IllegalArgumentException("The datetime zone must not be null");
}
synchronized(DateTimeZone.class){
cDefault=zone;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
serialVersionUID=getChronology().withZone(zone).dayOfMonth().roundFloor(instant);
SecurityManager sm=System.getSecurityManager();
if(sm!=null){
sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
}
if(zone==null){
throw new IllegalArgumentException("The datetime zone must not be null");
}
synchronized(DateTimeZone.class){
cDefault=zone;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((serialVersionUID^serialVersionUID+zone.getOffset(serialVersionUID))<0&&(instant^zone.getOffset(serialVersionUID))>=0){
zone=DateTimeZone.UTC;
offset=0;
adjustedInstant=instant;
}
SecurityManager sm=System.getSecurityManager();
if(sm!=null){
sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
}
if(zone==null){
throw new IllegalArgumentException("The datetime zone must not be null");
}
synchronized(DateTimeZone.class){
cDefault=zone;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
SecurityManager sm=System.getSecurityManager();
if(sm!=null){
sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
}
if(zone==DateTimeZone.UTC){
if(zone==DateTimeZone.UTC){
return withUTC();
}
throw new IllegalArgumentException("The datetime zone must not be null");
}
synchronized(DateTimeZone.class){
cDefault=zone;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.DateTimeZone,176
org.joda.time.DateTimeZone,179
org.joda.time.DateTimeZone,182
Find no block!
org.joda.time.DateTimeZone,183
org.joda.time.DateTimeZone,184
Find no block!
org.joda.time.DateTimeZone,185
Find no block!
org.joda.time.DateTimeZone,910
========
 final long offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offsetLocal;
 final long offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int offsetLocal=getOffset(instantAdjusted);
 final long instantAdjusted=instantLocal-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final long offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offsetLocal;
 final int offsetAdjusted=getOffset(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offsetLocal;
 final long offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetAdjusted<=getOffset(instantLocal)){
return serialVersionUID;
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offsetOriginal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal==offsetAdjusted){
return instantAdjusted;
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantUTC-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offset;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantAdjusted)<0&&(instantUTC^offsetLocal)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instant-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantAdjusted)<0&&(instant^offsetLocal)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantAdjusted=selectChronology(chrono);
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantLocal+offsetLocal)<0&&(instant^offsetLocal)>=0){
UTC=DateTimeZone.UTC;
offset=0;
adjustedInstant=instant;
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instant-offset;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantMillis-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(serialVersionUID==instantAdjusted||next>serialVersionUID){
break;
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantAdjusted=serialVersionUID;
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(MAX_MILLIS==offsetLocal&&iID.equals(UTC.getNameKey(instantAdjusted))){
System.out.println("*d* Error in "+UTC.getID());
return false;
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantAdjusted)<0&&(instantLocal^offsetLocal)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantAdjusted=selectChronology(chrono);
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instant-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantLocal+offsetLocal)<0&&(instant^offsetLocal)>=0){
UTC=DateTimeZone.UTC;
offset=0;
adjustedInstant=instant;
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instant-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantAdjusted=selectChronology(chrono);
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offset;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantLocal+offsetLocal)<0&&(instant^offsetLocal)>=0){
UTC=DateTimeZone.UTC;
offset=0;
adjustedInstant=instant;
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offset;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantAdjusted=selectChronology(chrono);
if((instantLocal^instantLocal+offsetLocal)<0&&(instant^offsetLocal)>=0){
UTC=DateTimeZone.UTC;
offset=0;
adjustedInstant=instant;
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantAdjusted=selectChronology(chrono);
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instant-offset;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantLocal+offsetLocal)<0&&(instant^offsetLocal)>=0){
UTC=DateTimeZone.UTC;
offset=0;
adjustedInstant=instant;
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instant-offset;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantAdjusted=selectChronology(chrono);
if((instantLocal^instantLocal+offsetLocal)<0&&(instant^offsetLocal)>=0){
UTC=DateTimeZone.UTC;
offset=0;
adjustedInstant=instant;
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instant-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantAdjusted=selectChronology(chrono);
if((instantLocal^instantLocal+offsetLocal)<0&&(instant^offsetLocal)>=0){
UTC=DateTimeZone.UTC;
offset=0;
adjustedInstant=instant;
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offset;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantAdjusted=selectChronology(chrono);
if((instantLocal^instantLocal+offsetLocal)<0&&(instant^offsetLocal)>=0){
UTC=DateTimeZone.UTC;
offset=0;
adjustedInstant=instant;
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instant-offset;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantAdjusted)<0&&(instant^offsetLocal)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instant-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantAdjusted)<0&&(instant^offsetLocal)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offset;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantAdjusted)<0&&(instant^offsetLocal)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instant-offset;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.DateTimeZone,912
org.joda.time.DateTimeZone,913
org.joda.time.DateTimeZone,915
========
if(nextLocal==nextAdjusted){
return offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(instantLocal==(nextAdjusted-nextLocal)){
return offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(nextLocal!=(nextAdjusted-nextLocal)){
return offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(nextLocal==(nextAdjusted-nextLocal)){
return offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(instantAdjusted==(nextLocal-nextAdjusted)){
return offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(nextLocal!=(nextLocal-nextAdjusted)){
return offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(nextLocal==(nextLocal-nextAdjusted)){
return offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(nextLocal!=nextAdjusted){
return offsetPrev;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((offsetLocal-offsetAdjusted)<offsetAdjusted){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((offsetLocal-offsetAdjusted)<MAX_MILLIS){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=previousTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetPrev;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prev<=instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(getOffset(prev)<=instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(getOffset(prev)<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(prev<offsetAfter){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prev<millis){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prev<iPeriodStart){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prev<transitions.length){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prev<length){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prev<instant){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prev<instantUTC){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetPrev<prev){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prev<next){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prev<end){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
prev=instantAdjusted;
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal==diff&&iID.equals(UTC.getNameKey(prev))){
System.out.println("*d* Error in "+UTC.getID());
return false;
}
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prev<MIN_VALUE){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocalFromOriginal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetBefore>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offset>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantUTC>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal>0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(i>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<MIN_VALUE){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextOffset>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantAdjusted==prev||next>serialVersionUID){
break;
}
if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
prev=instantAdjusted;
if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iMonthOfYear>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(adjustedInstant>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
prev+=offsetAdjusted;
if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
serialVersionUID=ISOChronology.getInstanceUTC().millisOfDay().set(prev,0);
if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
serialVersionUID=ISOChronology.getInstanceUTC().millisOfDay().add(prev,offsetAdjusted);
if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
serialVersionUID=setDayOfMonthPrevious(ISOChronology.getInstanceUTC(),prev);
if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offset){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
if(nextAdjusted==(instantAdjusted-offsetAdjusted)){
nextAdjusted=Long.MAX_VALUE;
}
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
if(nextAdjusted==(instantAdjusted-offsetAdjusted)){
nextAdjusted=Long.MAX_VALUE;
}
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetBefore!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAfter){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(serialVersionUID<instantLocal||instant>=nextLocal){
return instant;
}
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=length){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offsetAdjusted=(i>=0)?(i+1):~i;
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantAdjusted<nextAdjusted){
instant=end;
}
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(i>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(i>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<MIN_VALUE){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
return instantAdjusted;
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prev>Long.MIN_VALUE){
return prev-1;
}
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i!=length){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=length){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i!=length){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=null){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offsetLocal=~i;
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant!=instant){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(adjustedInstant!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=instant){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant!=offset){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(adjustedInstant!=instant){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(adjustedInstant!=offset){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.DateTimeZone,928
org.joda.time.DateTimeZone,938
========
if(offsetLocal!=offset){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
if(nextAdjusted==(instantAdjusted-offsetAdjusted)){
nextAdjusted=Long.MAX_VALUE;
}
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
if(nextAdjusted==(instantAdjusted-offsetAdjusted)){
nextAdjusted=Long.MAX_VALUE;
}
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(afterStart!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=diff){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return instant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(serialVersionUID<instantLocal||instant>=nextLocal){
return instant;
}
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=length){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offsetAdjusted=(i>=0)?(i+1):~i;
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantAdjusted<nextAdjusted){
instant=end;
}
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetPrev;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return iOffset;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return prev;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(i>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(i>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<MIN_VALUE){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
return instantAdjusted;
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offsetLocal=~i;
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prev>Long.MIN_VALUE){
return prev-1;
}
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i!=length){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return prev;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=length){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=length){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return prev;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return prev;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i!=length){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i!=length){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return prev;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return prev;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=length){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return prev;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i!=length){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return prev;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
if((instantAdjusted^nextLocal)<0&&(instantUTC^prev)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offsetLocal=~i;
if(i!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offset;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
if((instantAdjusted^nextAdjusted)<0&&(instant^offsetPrev)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return oldInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
if(UTC==null){
newZone=DateTimeZone.getDefault();
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
if((instantAdjusted^nextAdjusted)<0&&(instant^offsetPrev)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return offsetPrev;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
if((instantAdjusted^nextAdjusted)<0&&(instant^offsetPrev)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return offset;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.DateTimeZone,952
========
if((instantUTC^instantLocal)<0&&(instantLocal^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantUTC^instantLocal)<0&&(instantLocal^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instant^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantUTC^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantUTC^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(instantLocal==offset){
return instantUTC;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=offset){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new IllegalArgumentException("The offset cannot be zero");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(offset==0){
return DateTimeZone.UTC;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new IllegalArgumentException("Positive hours must not have negative minutes: "+MAX_MILLIS);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(offset==0L){
return DateTimeZone.UTC;
}else {
iID=printOffset(offset);
return fixedOffsetZone(id,offset);
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
id=printOffset(offset);
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(offset==0L){
return DateTimeZone.UTC;
}else {
iID=printOffset(offset);
return fixedOffsetZone(convId,offset);
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
convId=printOffset(offset);
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(MAX_MILLIS>23){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset=MAX_MILLIS*DateTimeConstants.MILLIS_PER_HOUR;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
MAX_MILLIS-=2;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset=MAX_MILLIS*DateTimeConstants.MILLIS_PER_HOUR;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(MAX_MILLIS>23){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_MINUTE;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_MINUTE;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
MAX_MILLIS-=2;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_MINUTE;
MAX_MILLIS-=2;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_MINUTE;
MAX_MILLIS-=2;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_SECOND;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_SECOND;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_SECOND;
MAX_MILLIS-=2;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_SECOND;
MAX_MILLIS-=2;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantUTC^instantLocal)<instantLocal&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(offset==instantLocal&&iID.equals(iID)){
System.out.println("*d* Error in "+UTC.getID());
return false;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
System.out.println("*d* Error in "+UTC.getID());
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=(iID.charAt(MAX_MILLIS++)-'0')*100;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new IllegalInstantException("Illegal instant due to time zone offset transition ("+UTC);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(iID!=null){
message="Cannot parse \""+iID;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new IllegalInstantException(instantUTC,UTC.getID());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantUTC^instantLocal)<MAX_MILLIS&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(nextTransition(serialVersionUID)!=nextTransition(instantLocal-MAX_MILLIS)){
return offset;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantLocal^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantLocal^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantLocal+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offsetOriginal;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(instantLocal==offset){
return instantUTC;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instant+offset;
if((instant^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instant^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instant+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instant^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(instantLocal==Integer.MIN_VALUE){
iOffset=UTC.getOffset(instantUTC);
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=offsetBefore+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offsetAfter;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(getOffset(instantUTC)<=getOffset(instantLocal+3*DateTimeConstants.MILLIS_PER_HOUR)){
return instantLocal;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(getOffset(instantUTC)<=getOffset(instantLocal+3*DateTimeConstants.MILLIS_PER_HOUR)){
return instantLocal;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffsetFromLocal(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instant+offset;
if((instant^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instant+offset;
if((instantUTC^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffsetFromLocal(instantUTC);
long instantLocal=instant+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instant+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffsetFromLocal(instantUTC);
long instantLocal=instantUTC+offset;
if((instant^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instant^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffsetFromLocal(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffsetFromLocal(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffsetFromLocal(instantUTC);
long instantLocal=instant+offset;
if((instant^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instant+offset;
if((instant^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffsetFromLocal(instantUTC);
long instantLocal=instant+offset;
if((instantUTC^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instant+offset;
if((instantUTC^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffsetFromLocal(instantUTC);
long instantLocal=instant+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffsetFromLocal(instantUTC);
long instantLocal=instantUTC+offset;
if((instant^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instant^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffsetFromLocal(instantUTC);
long instantLocal=instantUTC+offset;
if((instant^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffsetFromLocal(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffsetFromLocal(instantUTC);
long instantLocal=instant+offset;
if((instant^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instant+offset;
if((instant^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffsetFromLocal(instantUTC);
long instantLocal=instant+offset;
if((instant^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffsetFromLocal(instantUTC);
long instantLocal=instant+offset;
if((instantUTC^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffsetFromLocal(instantUTC);
long instantLocal=instantUTC+offset;
if((instant^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
return 0;
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new IllegalInstantException(instantLocal,getZone().getID());
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
instantLocal-=offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffsetFromLocal(instantUTC);
long instantLocal=instantUTC+offset;
instantLocal-=offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(serialVersionUID);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&instantUTC>serialVersionUID){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
serialVersionUID=instantUTC;
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offset==instantLocal&&iID.equals(UTC.getNameKey(serialVersionUID))){
System.out.println("*d* Error in "+UTC.getID());
return false;
}
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(serialVersionUID);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&instantUTC>serialVersionUID){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(offset==0L){
return DateTimeZone.UTC;
}else {
iID=printOffset(offset);
return fixedOffsetZone(id,offset);
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
id=printOffset(offset);
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(offset==0L){
return DateTimeZone.UTC;
}else {
iID=printOffset(offset);
return fixedOffsetZone(convId,offset);
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
convId=printOffset(offset);
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new IllegalInstantException(serialVersionUID,getID());
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!iID.equals(UTC.getID())){
return true;
}
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
offset-=instantLocal*DateTimeConstants.MILLIS_PER_SECOND;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
if(UTC==null){
newZone=DateTimeZone.getDefault();
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+MILLIS_PER_SECOND;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
int instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
offset-=MAX_MILLIS*DateTimeConstants.MILLIS_PER_MINUTE;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+MILLIS_PER_HOUR;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<offset&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(nextTransition(serialVersionUID)!=nextTransition(instantUTC-offset)){
return instantLocal;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<offset&&(instantUTC^offset)>=0){
if(nextTransition(serialVersionUID)!=nextTransition(instantUTC-offset)){
return instantLocal;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(instantLocal!=null){
return name;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(getNameKey(instantUTC)==null){
return iID;
}
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(getNameKey(instantUTC)==null){
return iID;
}
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(instantLocal!=null){
return name;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(instantLocal>23){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
MAX_MILLIS++;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(digitCount(iID,MAX_MILLIS,2)<2){
return ~position;
}
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(offset>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=offset*DateTimeConstants.MILLIS_PER_MINUTE;
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal-=2;
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MAX_MILLIS+=2;
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=offset*DateTimeConstants.MILLIS_PER_SECOND;
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal-=2;
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(offset>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MAX_MILLIS+=2;
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(offset>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal-=2;
MAX_MILLIS+=2;
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal-=2;
MAX_MILLIS+=2;
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(offset>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffsetToAdd(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=offset){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(instantLocal!=null){
return zone;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=new FixedDateTimeZone(iID,null,offset,offset);
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iFixedOffsetCache.put(iID,new SoftReference<DateTimeZone>(instantLocal));
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new IllegalArgumentException("The offset cannot be zero");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
instantLocal=offset;
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(offset==0){
return DateTimeZone.UTC;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal+=offset;
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<0&&MAX_MILLIS>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<-23||MAX_MILLIS>23){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<-23&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&MAX_MILLIS>23){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&MAX_MILLIS>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new IllegalArgumentException("Hours out of range: "+MAX_MILLIS);
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(MAX_MILLIS<-59||minutesOffset>59){
throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
}
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(MAX_MILLIS>0&&MAX_MILLIS<0){
throw new IllegalArgumentException("Positive hours must not have negative minutes: "+minutesOffset);
}
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<0&&(instantUTC^offset)>0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<0&&MAX_MILLIS>23){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<0&&(instantUTC^offset)>=0){
throw new IllegalArgumentException("Hours out of range: "+MAX_MILLIS);
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&MAX_MILLIS>0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<-23&&MAX_MILLIS>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&MAX_MILLIS>=0){
throw new IllegalArgumentException("Hours out of range: "+MAX_MILLIS);
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<-23&&(instantUTC^offset)>0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>0){
throw new IllegalArgumentException("Hours out of range: "+MAX_MILLIS);
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<-23&&MAX_MILLIS>23){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<-23&&(instantUTC^offset)>=0){
throw new IllegalArgumentException("Hours out of range: "+MAX_MILLIS);
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&MAX_MILLIS>23){
throw new IllegalArgumentException("Hours out of range: "+MAX_MILLIS);
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<0&&MAX_MILLIS>0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<0&&MAX_MILLIS>=0){
throw new IllegalArgumentException("Hours out of range: "+MAX_MILLIS);
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<0&&(instantUTC^offset)>0){
throw new IllegalArgumentException("Hours out of range: "+MAX_MILLIS);
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<0&&MAX_MILLIS>23){
throw new IllegalArgumentException("Hours out of range: "+MAX_MILLIS);
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<-23&&MAX_MILLIS>0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&MAX_MILLIS>0){
throw new IllegalArgumentException("Hours out of range: "+MAX_MILLIS);
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<-23&&MAX_MILLIS>=0){
throw new IllegalArgumentException("Hours out of range: "+MAX_MILLIS);
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<-23&&(instantUTC^offset)>0){
throw new IllegalArgumentException("Hours out of range: "+MAX_MILLIS);
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<-23&&MAX_MILLIS>23){
throw new IllegalArgumentException("Hours out of range: "+MAX_MILLIS);
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<0&&MAX_MILLIS>0){
throw new IllegalArgumentException("Hours out of range: "+MAX_MILLIS);
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<-23&&MAX_MILLIS>0){
throw new IllegalArgumentException("Hours out of range: "+MAX_MILLIS);
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantUTC-offset;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return serialVersionUID-offset;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.DateTimeZone,953
org.joda.time.DateTimeZone,955
org.joda.time.DateTimeZone,958
org.joda.time.DateTimeZone,979
========
if(offsetLocalFromOriginal==instantLocal){
return instantUTC;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocalFromOriginal==offset){
return instantUTC;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocalFromOriginal==instantUTC){
return instantUTC;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
long offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instant-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-MILLIS_PER_HOUR;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
long offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetAfter){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantLocal;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantLocal;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
long offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantLocal;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
long offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantLocal;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantUTC-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==instantUTC){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offset;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offset){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantUTC-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offset;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==instantUTC){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offset){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(instantLocal);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==length){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal!=offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instant-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==instant){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(instantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==instant){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instant-offset;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instant-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offset){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instant-offset;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offset){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return UTC.convertLocalToUTC(instantLocal,false,originalInstantUTC);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
if(UTC==null){
newZone=DateTimeZone.getDefault();
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
if(UTC==this){
return originalInstantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
if(UTC==this){
return originalInstantUTC;
}
return UTC.convertLocalToUTC(instantLocal,false,originalInstantUTC);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(originalInstantUTC==instantUTC||next>originalInstantUTC){
break;
}
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantUTC=originalInstantUTC;
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==null){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iID!=null){
return name;
}
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iID!=null){
return name;
}
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==null){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(instantUTC);
long instantUTC=instant-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offset;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==instant){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(instantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==instant){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(instantUTC);
long instantUTC=instantLocal-offset;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(instantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offset){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instant-offset;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==instant){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(instantUTC);
long instantUTC=instant-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==instant){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(instantUTC);
long instantUTC=instant-offset;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(instantUTC);
long instantUTC=instant-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offset){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(instantUTC);
long instantUTC=instantLocal-offset;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==instant){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(instantUTC);
long instantUTC=instantLocal-offset;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offset){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(instantUTC);
long instantUTC=instant-offset;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==instant){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(instantUTC);
long instantUTC=instant-offset;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offset){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==instantLocal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return UTC.convertLocalToUTC(instantUTC,false,instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offsetOriginal=getOffsetToAdd(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetLocal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextTransition(instantLocal-offsetOriginal)==(instantLocal-offsetOriginal)){
nextAdjusted=Long.MAX_VALUE;
}
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextTransition(instantLocal-offsetLocalFromOriginal)!=nextTransition(instantLocal-offsetOriginal)){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offsetOriginal=offsetLocalFromOriginal;
}
}
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!iID.equals(UTC.getID())){
return true;
}
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.DateTimeZone,980
org.joda.time.DateTimeZone,981
org.joda.time.DateTimeZone,982
org.joda.time.DateTimeZone,983
org.joda.time.DateTimeZone,985
org.joda.time.DateTimeZone,1002
========
if(nextLocal!=(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(instantLocal!=nextLocal){
nextLocal=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(nextLocal==(instantLocal-offset)){
nextLocal=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(nextLocal==(instantUTC-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextAdjusted!=(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(instantLocal!=nextAdjusted){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(instantLocal==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(instantLocal!=(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(nextAdjusted==(instantUTC-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offsetLocal=MAX_MILLIS*DateTimeConstants.MILLIS_PER_HOUR;
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
nextAdjusted-=2;
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offsetLocal=MAX_MILLIS*DateTimeConstants.MILLIS_PER_HOUR;
nextAdjusted-=2;
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offsetLocal+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_MINUTE;
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offsetLocal+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_MINUTE;
nextAdjusted-=2;
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offsetLocal+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_SECOND;
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offsetLocal+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_SECOND;
nextAdjusted-=2;
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset-=MAX_MILLIS*DateTimeConstants.MILLIS_PER_MINUTE;
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset-=MAX_MILLIS*DateTimeConstants.MILLIS_PER_SECOND;
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
nextAdjusted=FieldUtils.safeMultiply(MAX_MILLIS,DateTimeConstants.MILLIS_PER_MINUTE);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
nextAdjusted=offset;
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(nextAdjusted==(instant-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextAdjusted==(instantLocal-offset)){
zone=DateTimeZone.UTC;
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextAdjusted==(instantLocal-offset)){
offset=0;
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(nextAdjusted==(instantLocal-offset)){
zone=DateTimeZone.UTC;
offset=0;

nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nextAdjusted+=(iID.charAt(MAX_MILLIS++)-'0')*100;
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iID=convId.substring(3);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
serialVersionUID-=offset;
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextAdjusted==(instant-offset)){
zone=DateTimeZone.UTC;
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextAdjusted==(instant-offset)){
offset=0;
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextAdjusted==(instant-offset)){
zone=DateTimeZone.UTC;
offset=0;

nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextAdjusted==(instantLocal-offset)){
zone=DateTimeZone.UTC;
offset=0;
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextAdjusted==(instantLocal-offset)){
zone=DateTimeZone.UTC;
zone=DateTimeZone.UTC;
offset=0;

nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextAdjusted==(instantLocal-offset)){
offset=0;
zone=DateTimeZone.UTC;
offset=0;

nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextAdjusted==(instant-offset)){
zone=DateTimeZone.UTC;
offset=0;
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextAdjusted==(instant-offset)){
zone=DateTimeZone.UTC;
zone=DateTimeZone.UTC;
offset=0;

nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextAdjusted==(instant-offset)){
offset=0;
zone=DateTimeZone.UTC;
offset=0;

nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextAdjusted==(instantLocal-offset)){
zone=DateTimeZone.UTC;
offset=0;
zone=DateTimeZone.UTC;
offset=0;

nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextAdjusted==(instant-offset)){
zone=DateTimeZone.UTC;
offset=0;
zone=DateTimeZone.UTC;
offset=0;

nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict){
throw new IllegalInstantException("Illegal instant due to time zone offset transition ("+UTC);
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(strict){
if(iID!=null){
message="Cannot parse \""+iID;
}
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict){
throw new IllegalInstantException(instantLocal,getZone().getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal-=offset;
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(strict){
if(offset==getOffset(instantLocal)){
return instantLocal-getOffset(instantLocal);
}
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(strict){
if(nextTransition(instantLocal)!=nextTransition(instantLocal-offsetLocal)){
return offsetLocal;
}
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(strict){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(strict){
throw new ArithmeticException("Adding time zone offset caused overflow");
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(strict){
if(offsetLocal==0L){
return DateTimeZone.UTC;
}else {
iID=printOffset(offset);
return fixedOffsetZone(id,offset);
}
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict){
if(offsetLocal==MAX_MILLIS&&iID.equals(iID)){
System.out.println("*d* Error in "+UTC.getID());
return false;
}
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict){
System.out.println("*d* Error in "+UTC.getID());
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=maxValue;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict){
throw new IllegalArgumentException("The offset cannot be zero");
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset=MAX_MILLIS;
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset=MAX_MILLIS;
if(strict){
throw new IllegalArgumentException("The offset cannot be zero");
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(strict){
if(offset==0L){
return DateTimeZone.UTC;
}else {
iID=printOffset(offset);
return fixedOffsetZone(convId,offset);
}
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict){
if(offset>23){
return ~MAX_MILLIS;
}
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
MAX_MILLIS++;
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(digitCount(iID,MAX_MILLIS,2)<2){
return ~position;
}
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offsetLocal-=MAX_MILLIS*DateTimeConstants.MILLIS_PER_MINUTE;
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(strict){
if(FormatUtils.parseTwoDigits(iID,MAX_MILLIS)>59){
return ~MAX_MILLIS;
}
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=FormatUtils.parseTwoDigits(iID,MAX_MILLIS)*DateTimeConstants.MILLIS_PER_MINUTE;
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MAX_MILLIS-=2;
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MAX_MILLIS+=2;
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=FormatUtils.parseTwoDigits(iID,MAX_MILLIS)*DateTimeConstants.MILLIS_PER_SECOND;
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MAX_MILLIS-=2;
if(strict){
if(FormatUtils.parseTwoDigits(iID,MAX_MILLIS)>59){
return ~MAX_MILLIS;
}
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MAX_MILLIS+=2;
if(strict){
if(FormatUtils.parseTwoDigits(iID,MAX_MILLIS)>59){
return ~MAX_MILLIS;
}
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MAX_MILLIS-=2;
MAX_MILLIS+=2;
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MAX_MILLIS-=2;
MAX_MILLIS+=2;
if(strict){
if(FormatUtils.parseTwoDigits(iID,MAX_MILLIS)>59){
return ~MAX_MILLIS;
}
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict){
if(instantLocal-previousTransition(instantLocal)<=offset){
return getOffset(previousTransition(instantLocal));
}
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offset;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
zone=DateTimeZone.UTC;
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
adjustedInstant=instantLocal;
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
zone=DateTimeZone.UTC;
adjustedInstant=instantLocal;

offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
zone=DateTimeZone.UTC;
adjustedInstant=instantLocal;
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
zone=DateTimeZone.UTC;
zone=DateTimeZone.UTC;
adjustedInstant=instantLocal;

offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
adjustedInstant=instantLocal;
zone=DateTimeZone.UTC;
adjustedInstant=instantLocal;

offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
zone=DateTimeZone.UTC;
adjustedInstant=instantLocal;
zone=DateTimeZone.UTC;
adjustedInstant=instantLocal;

offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict){
throw new IllegalArgumentException("Minutes out of range: "+MAX_MILLIS);
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(MAX_MILLIS>0&&MAX_MILLIS<0){
throw new IllegalArgumentException("Positive hours must not have negative minutes: "+minutesOffset);
}
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextTransition(instantLocal)!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal==0){
throw new IllegalArgumentException("The offset cannot be zero");
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset=offsetLocal;
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal==0){
throw new IllegalArgumentException("The offset cannot be zero");
}
offset=offsetLocal;
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
MAX_MILLIS++;
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(digitCount(iID,MAX_MILLIS,2)<2){
return ~position;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal+=MAX_MILLIS;
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=nextAdjusted*DateTimeConstants.MILLIS_PER_MINUTE;
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
MAX_MILLIS-=2;
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MAX_MILLIS+=2;
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=nextAdjusted*DateTimeConstants.MILLIS_PER_SECOND;
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=nextAdjusted*DateTimeConstants.MILLIS_PER_SECOND;
MAX_MILLIS-=2;
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=nextAdjusted*DateTimeConstants.MILLIS_PER_SECOND;
MAX_MILLIS+=2;
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MAX_MILLIS-=2;
MAX_MILLIS+=2;
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=nextAdjusted*DateTimeConstants.MILLIS_PER_SECOND;
MAX_MILLIS-=2;
MAX_MILLIS+=2;
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetAdjusted||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal!=(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal!=nextAdjusted){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==nextAdjusted){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offsetLocal=(i>=0)?(i+1):~i;
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantLocal<nextAdjusted){
instant=end;
}
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(minValue||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(MAX_MILLIS==0){
throw new IllegalArgumentException("The offset cannot be zero");
}
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset=MAX_MILLIS;
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(MAX_MILLIS==0){
throw new IllegalArgumentException("The offset cannot be zero");
}
offset=MAX_MILLIS;
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(strict&&offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(iOffsetParsed||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict||offsetLocal<0){
long nextLocal=forOffsetMillis(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict){
if(iID.charAt(MAX_MILLIS)!='.'&&text.charAt(position)!=','){
break;
}
MAX_MILLIS--;
position++;
}
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MAX_MILLIS=digitCount(iID,MAX_MILLIS,3);
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nextAdjusted+=(iID.charAt(MAX_MILLIS++)-'0')*100;
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(MAX_MILLIS>1){
nextAdjusted+=(iID.charAt(MAX_MILLIS++)-'0')*10;
if(count>2){
offset+=text.charAt(position++)-'0';
}
}
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offset){
if(offsetLocal||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offset){
if(offsetAdjusted||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal!=(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal!=nextAdjusted){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==nextAdjusted){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset=(i>=0)?(i+1):~i;
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantLocal<nextAdjusted){
instant=end;
}
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=null){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(instantUTC!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextOffset!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal==offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
MAX_MILLIS=offsetLocal;
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(hoursOffset!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(MAX_MILLIS<-59||minutesOffset>59){
throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
}
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
try{
int nextAdjusted=offset*60;
if(hoursInMinutes<0){
MAX_MILLIS=hoursInMinutes-Math.abs(minutesOffset);
}else {
minutesOffset=hoursInMinutes+minutesOffset;
}
nextLocal=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
}catch (ArithmeticException ex) {
  throw new IllegalArgumentException("Offset is too large");
}

if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(adjustedInstant!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MAX_MILLIS--;
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MAX_MILLIS++;
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(digitCount(iID,MAX_MILLIS,2)<2){
return ~position;
}
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextAdjusted>23){
return ~MAX_MILLIS;
}
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offsetLocal=nextAdjusted*DateTimeConstants.MILLIS_PER_HOUR;
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MAX_MILLIS-=2;
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
FormatUtils.appendPaddedInteger(new StringBuffer(),nextLocal,2);
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset-=nextLocal*(int)DateTimeConstants.MILLIS_PER_HOUR;
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new StringBuffer().append(':');
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
FormatUtils.appendPaddedInteger(new StringBuffer(),nextAdjusted,2);
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset-=nextAdjusted*DateTimeConstants.MILLIS_PER_MINUTE;
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offset==0){
return new StringBuffer().toString();
}
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.DateTimeZone,1004
org.joda.time.DateTimeZone,1006
org.joda.time.DateTimeZone,1035
========
long instantUTC=instantUTC-offset;
if((instantLocal^instantUTC)<0&&(instantUTC^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantUTC-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantUTC^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantUTC^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantUTC=instant-offset;
if((instant^instantUTC)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instant^instantUTC)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instant^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^sum)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^diff)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instant^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instantLocal^instantUTC)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<offsetLocal){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(instantUTC==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offsetOriginal;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(getOffset(instantUTC)==offset){
return instantUTC;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(nextTransition(serialVersionUID)!=instantUTC){
return offsetLocal;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantUTC=instantLocal-offset;
offset-=offset*DateTimeConstants.MILLIS_PER_MINUTE;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantUTC=instantLocal-offset;
offset-=offset*DateTimeConstants.MILLIS_PER_SECOND;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<MAX_MILLIS&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset==MAX_MILLIS&&iID.equals(iID)){
System.out.println("*d* Error in "+UTC.getID());
return false;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
System.out.println("*d* Error in "+UTC.getID());
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<MAX_MILLIS&&(instantLocal^offset)<0){
System.out.println("*d* Error in "+UTC.getID());
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset==0L){
return DateTimeZone.UTC;
}else {
iID=printOffset(offset);
return fixedOffsetZone(id,offset);
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
id=printOffset(offset);
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset==0L){
return DateTimeZone.UTC;
}else {
iID=printOffset(offset);
return fixedOffsetZone(convId,offset);
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
convId=printOffset(offset);
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset>23){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset=offset*DateTimeConstants.MILLIS_PER_HOUR;
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
MAX_MILLIS-=2;
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset=offset*DateTimeConstants.MILLIS_PER_HOUR;
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset>23){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=offset*DateTimeConstants.MILLIS_PER_MINUTE;
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=offset*DateTimeConstants.MILLIS_PER_MINUTE;
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
MAX_MILLIS-=2;
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=offset*DateTimeConstants.MILLIS_PER_MINUTE;
MAX_MILLIS-=2;
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=offset*DateTimeConstants.MILLIS_PER_MINUTE;
MAX_MILLIS-=2;
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=offset*DateTimeConstants.MILLIS_PER_SECOND;
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=offset*DateTimeConstants.MILLIS_PER_SECOND;
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=offset*DateTimeConstants.MILLIS_PER_SECOND;
MAX_MILLIS-=2;
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=offset*DateTimeConstants.MILLIS_PER_SECOND;
MAX_MILLIS-=2;
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset==0){
return DateTimeZone.UTC;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new IllegalInstantException("Illegal instant due to time zone offset transition ("+UTC);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(iID!=null){
message="Cannot parse \""+iID;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=(iID.charAt(MAX_MILLIS++)-'0')*100;
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if(MAX_MILLIS<-59&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantUTC=instantLocal-offset;
if(MAX_MILLIS<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new IllegalArgumentException("Minutes out of range: "+MAX_MILLIS);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offset>0&&MAX_MILLIS<0){
throw new IllegalArgumentException("Positive hours must not have negative minutes: "+minutesOffset);
}
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if(MAX_MILLIS<-59&&(instantLocal^offset)<0){
throw new IllegalArgumentException("Minutes out of range: "+MAX_MILLIS);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantUTC=instantLocal-offset;
if(MAX_MILLIS<0&&(instantLocal^offset)<0){
throw new IllegalArgumentException("Minutes out of range: "+MAX_MILLIS);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantUTC=instantLocal-MILLIS_PER_HOUR;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^adjustedInstant)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new IllegalArgumentException("The offset cannot be zero");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
MAX_MILLIS=offset;
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<offset){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new IllegalInstantException(serialVersionUID,getZone().getID());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
serialVersionUID-=offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instantLocal^sum)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instant^sum)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instant^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^sum)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^sum)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instant^sum)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instant^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instantLocal^sum)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instantLocal^instantUTC)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instantLocal^sum)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instant^sum)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instant^instantUTC)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instant^sum)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^sum)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instant^sum)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instant^instantUTC)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instant^sum)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instantLocal^sum)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instant^sum)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instantLocal^adjustedInstant)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instant^adjustedInstant)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^adjustedInstant)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instant^adjustedInstant)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instantLocal^adjustedInstant)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instant^adjustedInstant)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instant^adjustedInstant)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.DateTimeZone,1037
========
if((instantLocal^instantUTC)<0&&(instantUTC^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantUTC^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instant^instantUTC)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^sum)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^diff)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<offset){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new IllegalArgumentException("The offset cannot be zero");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset==0){
return DateTimeZone.UTC;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&MAX_MILLIS<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new IllegalArgumentException("Positive hours must not have negative minutes: "+MAX_MILLIS);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&MAX_MILLIS<0){
throw new IllegalArgumentException("Positive hours must not have negative minutes: "+MAX_MILLIS);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset==0L){
return DateTimeZone.UTC;
}else {
iID=printOffset(offset);
return fixedOffsetZone(id,offset);
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
id=printOffset(offset);
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset==0L){
return DateTimeZone.UTC;
}else {
iID=printOffset(offset);
return fixedOffsetZone(convId,offset);
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
convId=printOffset(offset);
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<offsetLocal&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(nextTransition(serialVersionUID)!=nextTransition(instantUTC-offsetLocal)){
return offset;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<offsetLocal&&(instantLocal^offset)<0){
if(nextTransition(serialVersionUID)!=nextTransition(instantUTC-offsetLocal)){
return offset;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^adjustedInstant)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(MAX_MILLIS>23){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset=MAX_MILLIS*DateTimeConstants.MILLIS_PER_HOUR;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
MAX_MILLIS-=2;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset=MAX_MILLIS*DateTimeConstants.MILLIS_PER_HOUR;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(MAX_MILLIS>23){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_MINUTE;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_MINUTE;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
MAX_MILLIS-=2;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_MINUTE;
MAX_MILLIS-=2;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_MINUTE;
MAX_MILLIS-=2;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_SECOND;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_SECOND;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_SECOND;
MAX_MILLIS-=2;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_SECOND;
MAX_MILLIS-=2;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offsetLocal==offset){
return instantUTC;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<MAX_MILLIS&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset==MAX_MILLIS&&iID.equals(iID)){
System.out.println("*d* Error in "+UTC.getID());
return false;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
System.out.println("*d* Error in "+UTC.getID());
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<MAX_MILLIS&&(instantLocal^offset)<0){
System.out.println("*d* Error in "+UTC.getID());
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=(iID.charAt(MAX_MILLIS++)-'0')*100;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new IllegalInstantException("Illegal instant due to time zone offset transition ("+UTC);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(iID!=null){
message="Cannot parse \""+iID;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^sum)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^sum)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^sum)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^sum)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^instantUTC)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^sum)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^sum)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^sum)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new IllegalInstantException(instantUTC,UTC.getID());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instant^adjustedInstant)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^adjustedInstant)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^adjustedInstant)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.DateTimeZone,1040
========
if((instantLocal^instantUTC)<0&&(instantUTC^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantUTC^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instant^instantUTC)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^sum)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^diff)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<offset){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offsetLocal==offset){
return instantUTC;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return oldInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
if(UTC==null){
newZone=DateTimeZone.getDefault();
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset==0){
return DateTimeZone.UTC;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset==0L){
return DateTimeZone.UTC;
}else {
iID=printOffset(offset);
return fixedOffsetZone(id,offset);
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
id=printOffset(offset);
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset==0L){
return DateTimeZone.UTC;
}else {
iID=printOffset(offset);
return fixedOffsetZone(convId,offset);
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
convId=printOffset(offset);
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<offsetLocal&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(nextTransition(serialVersionUID)!=nextTransition(instantLocal-offsetLocal)){
return offsetLocal;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<offsetLocal&&(instantLocal^offset)<0){
if(nextTransition(serialVersionUID)!=nextTransition(instantLocal-offsetLocal)){
return offsetLocal;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(MAX_MILLIS<-59&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(MAX_MILLIS<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new IllegalArgumentException("Minutes out of range: "+MAX_MILLIS);
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offset>0&&MAX_MILLIS<0){
throw new IllegalArgumentException("Positive hours must not have negative minutes: "+minutesOffset);
}
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(MAX_MILLIS<-59&&(instantLocal^offset)<0){
throw new IllegalArgumentException("Minutes out of range: "+MAX_MILLIS);
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(MAX_MILLIS<0&&(instantLocal^offset)<0){
throw new IllegalArgumentException("Minutes out of range: "+MAX_MILLIS);
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<MAX_MILLIS&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset==MAX_MILLIS&&iID.equals(iID)){
System.out.println("*d* Error in "+UTC.getID());
return false;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
System.out.println("*d* Error in "+UTC.getID());
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<MAX_MILLIS&&(instantLocal^offset)<0){
System.out.println("*d* Error in "+UTC.getID());
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(MAX_MILLIS>23){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset=MAX_MILLIS*DateTimeConstants.MILLIS_PER_HOUR;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
MAX_MILLIS-=2;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset=MAX_MILLIS*DateTimeConstants.MILLIS_PER_HOUR;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(MAX_MILLIS>23){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_MINUTE;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_MINUTE;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
MAX_MILLIS-=2;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_MINUTE;
MAX_MILLIS-=2;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_MINUTE;
MAX_MILLIS-=2;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_SECOND;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_SECOND;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_SECOND;
MAX_MILLIS-=2;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_SECOND;
MAX_MILLIS-=2;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^adjustedInstant)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=(iID.charAt(MAX_MILLIS++)-'0')*100;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new IllegalInstantException("Illegal instant due to time zone offset transition ("+UTC);
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(iID!=null){
message="Cannot parse \""+iID;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^sum)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^sum)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^sum)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^sum)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^instantUTC)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^sum)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^sum)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^sum)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return serialVersionUID-offset;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return millis;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new IllegalArgumentException("The offset cannot be zero");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
MAX_MILLIS=offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new IllegalInstantException(instantUTC,getZone().getID());
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantUTC-=offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instant^adjustedInstant)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^adjustedInstant)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^adjustedInstant)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantLocal-(strict?offset:getOffsetFromLocalToSubtract(instant));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC-offset;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return UTC.convertUTCToLocal(instantUTC)-offset;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return next;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return prev;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.tz.DateTimeZoneBuilder,1528
========
i=~i;
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iTailZone==null){
return iWallOffsets[iStandardOffset-1];
}
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iTailZone==null){
return iNameKeys[iStandardOffset-1];
}
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=iInitialSaveMillis){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iRuleSets.get(iStandardOffset).firstTransition(instant)==null){
continue;
}
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
addTransition(transitions,iRuleSets.get(iStandardOffset).firstTransition(instant));
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iTailZone!=null){
return true;
}
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(transitions.length<=1){
return false;
}
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=iTransitions;
iWallOffsets[0]=iStandardOffset;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=iTransitions;
iStandardOffset=iWallOffsets[0];
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=iTransitions;
char i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=iTransitions;
long i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long[] transitions=iTransitions;
int i=transitions.get(transitions.size()).binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=iTransitions;
iStandardOffset=iInitialSaveMillis;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(roundFloor(instant)!=instant){
instant=add(newInstant,1);
}
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(serialVersionUID==0||iInitialSaveMillis==0){
return instant;
}
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iInitialSaveMillis==0){
return instant;
}
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instant,"resulting");
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instant,"resulting");
long[] transitions=iTransitions;
long i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
FieldUtils.verifyValueBounds(this,iInitialSaveMillis,DateTimeConstants.BCE,DateTimeConstants.CE);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=iTransitions;
if(iNameKey==null){
return iNameKey;
}
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iInitialNameKey!=null){
return name;
}
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iInitialNameKey!=null){
return name;
}
long[] transitions=iTransitions;
if(iNameKey==null){
return iNameKey;
}
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
FieldUtils.verifyValueBounds(this,iInitialSaveMillis,1,i);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=iToYear){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==Long.MIN_VALUE){
iInitialSaveMillis=Integer.MIN_VALUE;
}else {
year=ISOChronology.getInstanceUTC().year().get(instant+i);
}
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(instant<serialVersionUID||instant>=serialVersionUID){
return instant;
}
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=iTransitions;
FieldUtils.verifyValueBounds(this,iInitialSaveMillis,MIN,iStandardOffset);
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iMode=='w'){
iInitialSaveMillis=iStandardOffset+i;
}else if(iMode=='s'){
offset=standardOffset;
}else {
offset=0;
}
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant+=iInitialSaveMillis;
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=iTransitions;
checkLimits(instant,null);
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(serialVersionUID,"resulting");
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().add(instant,iInitialSaveMillis),"resulting");
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=iTransitions;
checkLimits(instant,null);
long i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().addWrapField(instant,iInitialSaveMillis),"resulting");
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().set(instant,iInitialSaveMillis),"resulting");
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=iTransitions;
if(serialVersionUID==0||iInitialSaveMillis==0){
return this;
}
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=MILLIS_PER_HOUR;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().roundFloor(instant),"resulting");
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().roundCeiling(instant),"resulting");
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().roundHalfFloor(instant),"resulting");
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().roundHalfCeiling(instant),"resulting");
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().roundHalfEven(instant),"resulting");
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().remainder(instant),"resulting");
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=monthOfYear().set(instant,iMonthOfYear);
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=dayOfMonth().set(instant,iMonthOfYear);
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iMode=='w'){
iInitialSaveMillis=iStandardOffset+i;
}else if(iMode=='s'){
offset=standardOffset;
}else {
offset=0;
}
instant+=iInitialSaveMillis;
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=hourOfDay().set(instant,iMillisOfDay);
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=minuteOfHour().set(instant,iMonthOfYear);
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=secondOfMinute().set(instant,iMonthOfYear);
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=monthOfYear().set(instant,iMonthOfYear);
long[] transitions=iTransitions;
long i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=dayOfMonth().set(instant,iMonthOfYear);
long[] transitions=iTransitions;
long i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=monthOfYear().set(instant,iMonthOfYear);
instant=dayOfMonth().set(instant,iMonthOfYear);
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=monthOfYear().set(instant,iMonthOfYear);
instant=dayOfMonth().set(instant,iMonthOfYear);
long[] transitions=iTransitions;
long i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=iTransitions;
if(iInitialSaveMillis==0){
return this;
}
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=iTransitions;
if(iInitialSaveMillis==0){
return this;
}
long i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().add(instant,instant),"resulting");
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().add(instant,iInitialSaveMillis),"resulting");
long[] transitions=iTransitions;
long i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().add(instant,iInitialSaveMillis),"resulting");
long[] transitions=iTransitions;
checkLimits(instant,null);
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().add(instant,iInitialSaveMillis),"resulting");
long[] transitions=iTransitions;
checkLimits(instant,null);
long i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().add(instant,instant),"resulting");
long[] transitions=iTransitions;
long i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().add(instant,instant),"resulting");
long[] transitions=iTransitions;
checkLimits(instant,null);
int i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().add(instant,instant),"resulting");
long[] transitions=iTransitions;
checkLimits(instant,null);
long i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=iTransitions;
if(serialVersionUID==0||iInitialSaveMillis==0){
return this;
}
long i=Arrays.binarySearch(transitions,instant);
if(i>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.tz.DateTimeZoneBuilder,1529
org.joda.time.tz.DateTimeZoneBuilder,1530
========
if(value>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(i>=iInitialSaveMillis){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parsePos>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(length>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(j>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(minDaysInFirstWeek>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(pass>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index>=0){
return iWallOffsets[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.tz.DateTimeZoneBuilder,1533
========
if(value>0){
return iWallOffsets[i-1];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=0){
return iWallOffsets[i-1];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(i>0&&types[i-1]==types[i]){
return iWallOffsets[i-1];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parsePos>0){
return iWallOffsets[i-1];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(length>0){
return iWallOffsets[i-1];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>iInitialSaveMillis){
return iWallOffsets[i-1];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(bestValidPos>0){
return iWallOffsets[i-1];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
i=(i>=0)?(i+1):~i;
if(i>0){
return iWallOffsets[i-1];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(poolSize>0){
return iWallOffsets[i-1];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iNameKeys[i]=iNameKeys[iInitialSaveMillis];
if(i>0){
return iWallOffsets[i-1];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(j>0){
return iWallOffsets[i-1];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(len>0){
return iWallOffsets[i-1];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index>0){
return iWallOffsets[i-1];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(minDaysInFirstWeek>0){
return iWallOffsets[i-1];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(compare>0){
return iWallOffsets[i-1];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(length<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(value<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
i=~i;
if(i<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 0
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_endOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_tokyo_endOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_endOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_endOfYear
Failing tests: 0
TESTING : time_7
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 600 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test
  - org.joda.time.tz.TestCompiler::testCompile
  - org.joda.time.tz.TestBuilder::testReverseTransitions
  - org.joda.time.tz.TestBuilder::testForwardTransitions
  - org.joda.time.tz.TestBuilder::testSerialization
  - org.joda.time.format.TestISODateTimeFormat::testFormat_basicTTime
  - org.joda.time.format.TestISODateTimeFormat::testFormat_basicWeekDateTime
  - org.joda.time.format.TestISODateTimeFormat::testFormat_ordinalDateTimeNoMillis
  - org.joda.time.format.TestISODateTimeFormat::testFormat_basicTime
  - org.joda.time.format.TestISODateTimeFormat::testFormat_hourMinuteSecondMillis
  - org.joda.time.format.TestISODateTimeFormat::testFormat_tTimeNoMillis
  - org.joda.time.format.TestISODateTimeFormat::testFormat_dateHourMinute
  - org.joda.time.format.TestISODateTimeFormat::testFormat_dateHourMinuteSecondMillis
  - org.joda.time.format.TestISODateTimeFormat::testFormat_basicDateTimeNoMillis
  - org.joda.time.format.TestISODateTimeFormat::testFormat_time
  - org.joda.time.format.TestISODateTimeFormat::testFormat_hour
  - org.joda.time.format.TestISODateTimeFormat::testFormat_basicOrdinalDateTime
  - org.joda.time.format.TestISODateTimeFormat::testFormat_basicDateTime
  - org.joda.time.format.TestISODateTimeFormat::testFormat_basicWeekDateTimeNoMillis
  - org.joda.time.format.TestISODateTimeFormat::testFormat_basicTTimeNoMillis
  - org.joda.time.format.TestISODateTimeFormat::testFormat_ordinalDateTime
  - org.joda.time.format.TestISODateTimeFormat::testFormat_dateTimeNoMillis
  - org.joda.time.format.TestISODateTimeFormat::testFormat_basicOrdinalDateTimeNoMillis
  - org.joda.time.format.TestISODateTimeFormat::testFormat_timeNoMillis
  - org.joda.time.format.TestISODateTimeFormat::testFormat_hourMinute
  - org.joda.time.format.TestISODateTimeFormat::testFormat_tTime
  - org.joda.time.format.TestISODateTimeFormat::testFormat_weekDateTime
  - org.joda.time.format.TestISODateTimeFormat::testFormat_dateTime
  - org.joda.time.format.TestISODateTimeFormat::testFormat_dateHour
  - org.joda.time.format.TestISODateTimeFormat::testFormat_hourMinuteSecond
  - org.joda.time.format.TestISODateTimeFormat::testFormat_dateHourMinuteSecond
  - org.joda.time.format.TestISODateTimeFormat::testFormat_hourMinuteSecondFraction
  - org.joda.time.format.TestISODateTimeFormat::testFormat_basicTimeNoMillis
  - org.joda.time.format.TestISODateTimeFormat::testFormat_weekDateTimeNoMillis
  - org.joda.time.format.TestISODateTimeFormat::testFormat_dateHourMinuteSecondFraction
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseOffset
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_localPrintParseOffset
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_localPrintParseOffsetAndZone
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseOffsetAndZone
  - org.joda.time.format.TestDateTimeFormatter::testPrint_appendableMethods
  - org.joda.time.format.TestDateTimeFormatter::testZoneNameNearTransition
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_simple
  - org.joda.time.format.TestDateTimeFormatter::testPrint_simple
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_zone2
  - org.joda.time.format.TestDateTimeFormatter::testZoneShortNameNearTransition
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_zone
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_chrono
  - org.joda.time.format.TestDateTimeFormatter::testPrint_chrono
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_zone2
  - org.joda.time.format.TestDateTimeFormatter::testParseDateTime_zone2
  - org.joda.time.format.TestDateTimeFormatter::testPrint_writerMethods
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_simple_precedence
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_offsetParsed
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_simple
  - org.joda.time.format.TestDateTimeFormatter::testParseDateTime_offsetParsed
  - org.joda.time.format.TestDateTimeFormatter::testPrint_zone
  - org.joda.time.format.TestDateTimeFormatter::testParseDateTime_simple
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_zone
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_chrono
  - org.joda.time.format.TestDateTimeFormatter::testParseDateTime_simple_precedence
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_offsetParsed
  - org.joda.time.format.TestDateTimeFormatter::testParseDateTime_chrono
  - org.joda.time.format.TestDateTimeFormatter::testParseDateTime_zone
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_simple_precedence
  - org.joda.time.format.TestDateTimeFormatter::testPrint_chrono_and_zone
  - org.joda.time.format.TestDateTimeFormatter::testPrint_bufferMethods
  - org.joda.time.format.TestDateTimeFormatStyle::testForStyle_longDateTime
  - org.joda.time.format.TestDateTimeFormatStyle::testForStyle_shortFullDateTime
  - org.joda.time.format.TestDateTimeFormatStyle::testForStyle_mediumFullDateTime
  - org.joda.time.format.TestDateTimeFormatStyle::testForStyle_longTime
  - org.joda.time.format.TestDateTimeFormatStyle::testForStyle_mediumShortDateTime
  - org.joda.time.format.TestDateTimeFormatStyle::testForStyle_shortMediumDateTime
  - org.joda.time.format.TestDateTimeFormatStyle::testForStyle_shortLongDateTime
  - org.joda.time.format.TestDateTimeFormatStyle::testForStyle_fullTime
  - org.joda.time.format.TestDateTimeFormatStyle::testForStyle_mediumLongDateTime
  - org.joda.time.format.TestDateTimeFormatStyle::testForStyle_mediumTime
  - org.joda.time.format.TestDateTimeFormatStyle::testForStyle_shortDateTime
  - org.joda.time.format.TestDateTimeFormatStyle::testForStyle_shortTime
  - org.joda.time.format.TestDateTimeFormatStyle::testForStyle_shortDate
  - org.joda.time.format.TestDateTimeFormatStyle::testForStyle_fullDateTime
  - org.joda.time.format.TestDateTimeFormatStyle::testForStyle_mediumDateTime
  - org.joda.time.format.TestDateTimeFormat::testFormat_zoneAmount
  - org.joda.time.format.TestDateTimeFormat::testFormat_clockhourOfDay
  - org.joda.time.format.TestDateTimeFormat::testFormat_hourOfDay
  - org.joda.time.format.TestDateTimeFormat::testFormat_zoneAmountColon
  - org.joda.time.format.TestDateTimeFormat::testFormat_clockhourOfHalfday
  - org.joda.time.format.TestDateTimeFormat::testFormat_halfdayOfDay
  - org.joda.time.format.TestDateTimeFormat::testFormat_hourOfHalfday
  - org.joda.time.convert.TestStringConverter::testGetDateTime5
  - org.joda.time.convert.TestStringConverter::testGetDateTime3
  - org.joda.time.convert.TestStringConverter::testGetDateTime1
  - org.joda.time.convert.TestStringConverter::testGetInstantMillis_Object_Zone
  - org.joda.time.convert.TestStringConverter::testGetInstantMillis_Object_Chronology
  - org.joda.time.convert.TestNullConverter::testGetPartialValues
  - org.joda.time.chrono.TestLenientChronology::test_isoChrononolgy_Chicago
  - org.joda.time.chrono.TestLenientChronology::test_strictChrononolgy_Chicago
  - org.joda.time.chrono.TestLenientChronology::test_lenientChrononolgy_Chicago
  - org.joda.time.chrono.TestIslamicChronology::testSampleDateWithZone
  - org.joda.time.chrono.TestEthiopicChronology::testSampleDateWithZone
  - org.joda.time.chrono.TestCopticChronology::testSampleDateWithZone
  - org.joda.time.TestYearMonth_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestYearMonthDay_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestTimeOfDay_Constructors::testConstructor_ObjectString4
  - org.joda.time.TestTimeOfDay_Constructors::testConstructor_ObjectString2
  - org.joda.time.TestTimeOfDay_Constructors::testConstructor
  - org.joda.time.TestTimeOfDay_Constructors::testConstructor_long2_Chronology
  - org.joda.time.TestTimeOfDay_Constructors::testConstructor_nullChronology
  - org.joda.time.TestTimeOfDay_Constructors::testConstructor_long1_Chronology
  - org.joda.time.TestTimeOfDay_Constructors::testConstructor_Object_nullChronology
  - org.joda.time.TestTimeOfDay_Constructors::testConstructor_nullObject
  - org.joda.time.TestTimeOfDay_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestTimeOfDay_Constructors::testConstructor_long2
  - org.joda.time.TestTimeOfDay_Constructors::testConstructor_long1
  - org.joda.time.TestTimeOfDay_Constructors::testConstructor_long_nullChronology
  - org.joda.time.TestTimeOfDay_Constructors::testConstructor_nullObject_nullChronology
  - org.joda.time.TestTimeOfDay_Constructors::testConstructor_Chronology
  - org.joda.time.TestTimeOfDay_Constructors::testConstructor_Object2
  - org.joda.time.TestTimeOfDay_Constructors::testConstructor_Object1
  - org.joda.time.TestTimeOfDay_Constructors::testConstructor_nullObject_Chronology
  - org.joda.time.TestTimeOfDay_Constructors::testConstructor_Object_Chronology
  - org.joda.time.TestTimeOfDay_Basics::testToDateTime_RI
  - org.joda.time.TestTimeOfDay_Basics::testToDateTime_nullRI
  - org.joda.time.TestTimeOfDay_Basics::testGet
  - org.joda.time.TestSerialization::testSerializedTimeOfDay
  - org.joda.time.TestSerialization::testSerializedLocalDateTime
  - org.joda.time.TestSerialization::testSerializedDateMidnight
  - org.joda.time.TestSerialization::testSerializedLocalTime
  - org.joda.time.TestPeriod_Constructors::testConstructor_RI_RI4
  - org.joda.time.TestPeriod_Constructors::testConstructor_RI_RI3
  - org.joda.time.TestPeriod_Constructors::testConstructor_RI_RI_PeriodType4
  - org.joda.time.TestPartial_Basics::testToDateTime_RI
  - org.joda.time.TestPartial_Basics::testToDateTime_nullRI
  - org.joda.time.TestMutablePeriod_Constructors::testConstructor_RI_RI4
  - org.joda.time.TestMutablePeriod_Constructors::testConstructor_RI_RI3
  - org.joda.time.TestMutablePeriod_Constructors::testConstructor_RI_RI_PeriodType4
  - org.joda.time.TestMutableDateTime_Sets::testSetYear_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetMilliOfDay_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetMilliOfDay_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetWeekOfWeekyear_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetMilliOfSecond_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetMilliOfSecond_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetHourOfDay_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetHourOfDay_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetDayOfYear_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetMinuteOfDay_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetMinuteOfDay_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetSecondOfMinute_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetSecondOfMinute_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetDayOfMonth_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetDayOfMonth_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetSecondOfDay_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetSecondOfDay_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetMonthOfYear_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetWeekyear_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetZoneRetainFields_DateTimeZone4
  - org.joda.time.TestMutableDateTime_Sets::testSetZoneRetainFields_DateTimeZone3
  - org.joda.time.TestMutableDateTime_Sets::testSetZoneRetainFields_DateTimeZone1
  - org.joda.time.TestMutableDateTime_Sets::testSetDayOfWeek_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetDayOfWeek_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetMinuteOfHour_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetMinuteOfHour_int1
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetTextDayOfMonth
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetDayOfWeek
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddWrapFieldYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetTextDayOfWeek
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddWeekOfWeekyear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyRoundCeilingHourOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetTextYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddWrapFieldDayOfMonth
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddDayOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddDayOfWeek
  - org.joda.time.TestMutableDateTime_Properties::testPropertyRoundFloorHourOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertyRoundHalfEvenHourOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertyRoundHalfFloorHourOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetDayOfMonth
  - org.joda.time.TestMutableDateTime_Properties::testPropertyRoundHalfCeilingHourOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddLongDayOfWeek
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddDayOfMonth
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddWrapFieldDayOfWeek
  - org.joda.time.TestMutableDateTime_Constructors::testConstructor_int_int_int_int_int_int_int
  - org.joda.time.TestMutableDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_nullChronology
  - org.joda.time.TestMutableDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_Chronology
  - org.joda.time.TestMutableDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_DateTimeZone
  - org.joda.time.TestMutableDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_nullDateTimeZone
  - org.joda.time.TestMutableDateTime_Basics::testGet_DateTimeFieldType
  - org.joda.time.TestMutableDateTime_Basics::testGetMethods
  - org.joda.time.TestMutableDateTime_Basics::testToString_String_String
  - org.joda.time.TestMutableDateTime_Basics::testRounding6
  - org.joda.time.TestMutableDateTime_Basics::testRounding5
  - org.joda.time.TestMutableDateTime_Basics::testRounding4
  - org.joda.time.TestMutableDateTime_Basics::testRounding3
  - org.joda.time.TestMutableDateTime_Basics::testRounding2
  - org.joda.time.TestMutableDateTime_Basics::testRounding1
  - org.joda.time.TestMutableDateTime_Basics::testGet_DateTimeField
  - org.joda.time.TestMutableDateTime_Basics::testToString_DTFormatter
  - org.joda.time.TestMutableDateTime_Basics::testToString
  - org.joda.time.TestMutableDateTime_Basics::testToString_String
  - org.joda.time.TestMutableDateTime_Adds::testAddSeconds_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddMillis_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddDays_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddMinutes_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddYears_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddWeekyears_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddHours_int1
  - org.joda.time.TestMutableDateTime_Adds::testAdd_RP1
  - org.joda.time.TestMonthDay_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestLocalTime_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestLocalTime_Basics::testToDateTime_RI
  - org.joda.time.TestLocalTime_Basics::testToDateTime_nullRI
  - org.joda.time.TestLocalDate_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestLocalDate_Basics::testToInterval_Zone_noMidnight
  - org.joda.time.TestLocalDateTime_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestInstant_Constructors::testParse_noFormatter
  - org.joda.time.TestInstant_Basics::testGet_DateTimeField
  - org.joda.time.TestIllegalFieldValueException::testZoneTransition
  - org.joda.time.TestDateTime_Properties::testPropertySetTextDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertySetWeekOfWeekyear
  - org.joda.time.TestDateTime_Properties::testPropertySetDayOfYear
  - org.joda.time.TestDateTime_Properties::testPropertySetDayOfWeek
  - org.joda.time.TestDateTime_Properties::testPropertyAddWrapFieldYear
  - org.joda.time.TestDateTime_Properties::testPropertySetMonthOfYear
  - org.joda.time.TestDateTime_Properties::testPropertySetYear
  - org.joda.time.TestDateTime_Properties::testPropertySetTextDayOfYear
  - org.joda.time.TestDateTime_Properties::testPropertySetTextDayOfWeek
  - org.joda.time.TestDateTime_Properties::testPropertyAddWeekOfWeekyear
  - org.joda.time.TestDateTime_Properties::testPropertyRoundCeilingHourOfDay
  - org.joda.time.TestDateTime_Properties::testPropertySetTextYear
  - org.joda.time.TestDateTime_Properties::testPropertyAddWrapFieldDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertyAddMonthOfYear
  - org.joda.time.TestDateTime_Properties::testPropertyAddWrapFieldWeekOfWeekyear
  - org.joda.time.TestDateTime_Properties::testPropertyWithMinimumValueDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertyAddDayOfYear
  - org.joda.time.TestDateTime_Properties::testPropertyAddDayOfWeek
  - org.joda.time.TestDateTime_Properties::testPropertySetTextMonthOfYear
  - org.joda.time.TestDateTime_Properties::testPropertyRoundFloorHourOfDay
  - org.joda.time.TestDateTime_Properties::testPropertyRoundHalfEvenHourOfDay
  - org.joda.time.TestDateTime_Properties::testPropertyRoundHalfFloorHourOfDay
  - org.joda.time.TestDateTime_Properties::testPropertySetTextWeekOfWeekyear
  - org.joda.time.TestDateTime_Properties::testPropertyAddWrapFieldMonthOfYear
  - org.joda.time.TestDateTime_Properties::testPropertyWithMaximumValueDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertySetDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertyRoundHalfCeilingHourOfDay
  - org.joda.time.TestDateTime_Properties::testPropertyAddLongDayOfWeek
  - org.joda.time.TestDateTime_Properties::testPropertyAddYear
  - org.joda.time.TestDateTime_Properties::testPropertyAddDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertyAddWrapFieldDayOfYear
  - org.joda.time.TestDateTime_Properties::testPropertyAddWrapFieldDayOfWeek
  - org.joda.time.TestDateTime_Constructors::testConstructor_ObjectString6
  - org.joda.time.TestDateTime_Constructors::testConstructor_ObjectString4
  - org.joda.time.TestDateTime_Constructors::testConstructor_ObjectString2
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_nullChronology
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_int
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_nullChronology
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_nullChronology
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_DateTimeZone
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_Chronology
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_Chronology
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_Chronology
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_DateTimeZone
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_nullDateTimeZone
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_DateTimeZone
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_nullDateTimeZone
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_nullDateTimeZone
  - org.joda.time.TestDateTime_Basics::testWithZoneRetainFields_DateTimeZone
  - org.joda.time.TestDateTime_Basics::testGet_DateTimeFieldType
  - org.joda.time.TestDateTime_Basics::testToString_String_Locale
  - org.joda.time.TestDateTime_Basics::testGet_DateTimeField
  - org.joda.time.TestDateTime_Basics::testGetters
  - org.joda.time.TestDateTime_Basics::testToString_DTFormatter
  - org.joda.time.TestDateTime_Basics::testToString
  - org.joda.time.TestDateTime_Basics::testToString_String
  - org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_athens
  - org.joda.time.TestDateTimeZoneCutover::test_getOffsetFromLocal_Moscow_Autumn
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_minute_NewYork_Spring_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_secondOfMinute_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_minusHour_NewYork_Autumn
  - org.joda.time.TestDateTimeZoneCutover::testPlusMinutesInDstChange
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_day_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_NewYorkIsCorrect_Spring
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_minuteOfHour_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_getOffsetFromLocal_Moscow_Autumn_overlap_mins
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_hourOfDay_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_GuatemataIsCorrect_Autumn
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusHour_Moscow_Autumn
  - org.joda.time.TestDateTimeZoneCutover::test_NewYorkIsCorrect_Autumn
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourAcross_Moscow_Spring
  - org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourBack_NewYork_Spring
  - org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_paris
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_day_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_hourOfDay_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_summer
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_hour_NewYork_Spring_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_day_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_hour_NewYork_Spring_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_JustAfterLastEverOverlap
  - org.joda.time.TestDateTimeZoneCutover::test_getOffsetFromLocal_Guatemata_Autumn
  - org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_losAngeles
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_minute_NewYork_Spring_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_day_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_day_NewYork_Spring_postCutover
  - org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_winter
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourAcross_NewYork_Spring
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourForward_NewYork_Spring
  - org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange
  - org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_newYork
  - org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer
  - org.joda.time.TestDateTimeZoneCutover::test_MoscowIsCorrect_Spring
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_hourOfDay_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_constructor_NewYork_Autumn
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_minute_NewYork_Spring_preCutover
  - org.joda.time.TestDateTimeZoneCutover::testBug3476684_adjustOffset
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_hourOfDay_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_secondOfMinute_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_day_NewYork_Spring_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_constructor_Moscow_Autumn
  - org.joda.time.TestDateTimeZoneCutover::test_MoscowIsCorrect_Autumn
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_day_NewYork_Spring_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusHour_Guatemata_Autumn
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_hour_NewYork_Spring_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_secondOfMinute_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_minuteOfHour_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_minusHour_Moscow_Autumn
  - org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_minusHour_Guatemata_Autumn
  - org.joda.time.TestDateTimeZoneCutover::testPlusSecondsInDstChange
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_secondOfMinute_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::testPlusMillisInDstChange
  - org.joda.time.TestDateTimeZoneCutover::test_getOffsetFromLocal_NewYork_Spring
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_day_NewYork_Spring_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_minute_NewYork_Spring_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourForward_Moscow_Spring
  - org.joda.time.TestDateTimeZoneCutover::testBug3192457_adjustOffset
  - org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange
  - org.joda.time.TestDateTimeZoneCutover::test_getOffsetFromLocal_Moscow_Spring
  - org.joda.time.TestDateTimeZoneCutover::test_getOffsetFromLocal_NewYork_Autumn
  - org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_minuteOfHour_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_minuteOfHour_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_hour_NewYork_Spring_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusHour_NewYork_Autumn
  - org.joda.time.TestDateTimeZone::testPatchedNameKeysSydneyHistoric
  - org.joda.time.TestDateTimeZone::testCommentParse
  - org.joda.time.TestDateTimeZone::testGetMillisKeepLocal
  - org.joda.time.TestDateTimeZone::testPatchedNameKeysSydney
  - org.joda.time.TestDateTimeZone::testGetOffset_long
  - org.joda.time.TestDateTimeZone::testIsLocalDateTimeGap_Berlin
  - org.joda.time.TestDateTimeZone::testGetOffset_RI
  - org.joda.time.TestDateTimeZone::testIsLocalDateTimeGap_NewYork
  - org.joda.time.TestDateMidnight_Properties::testPropertyRoundFloorMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyRoundHalfCeilingMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyWithMinimumValueDayOfMonth
  - org.joda.time.TestDateMidnight_Properties::testPropertyWithMaximumValueDayOfMonth
  - org.joda.time.TestDateMidnight_Properties::testPropertyRoundCeilingMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyRoundHalfFloorMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyRoundHalfEvenMonthOfYear
  - org.joda.time.TestDateMidnight_Constructors::testConstructor
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_nullDateTimeZone
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_int_int_int
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_long2_Chronology
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_int_int_int_nullChronology
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_nullChronology
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_badconverterObject
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_Object_nullDateTimeZone
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_long1_Chronology
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_Object_nullChronology
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_long_nullDateTimeZone
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_nullObject
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestDateMidnight_Constructors::test_now_DateTimeZone
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_long2
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_long1
  - org.joda.time.TestDateMidnight_Constructors::test_now_Chronology
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_Object
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_nullObject_DateTimeZone
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_badconverterObject_Chronology
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_long_nullChronology
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_nullObject_nullChronology
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_Chronology
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_int_int_int_DateTimeZone
  - org.joda.time.TestDateMidnight_Constructors::test_now
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_Object_DateTimeZone
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_int_int_int_Chronology
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_long1_DateTimeZone
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_nullObject_nullDateTimeZone
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_nullObject_Chronology
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_long2_DateTimeZone
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_badconverterObject_DateTimeZone
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_int_int_int_nullDateTimeZone
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_Object_Chronology
  - org.joda.time.TestDateMidnight_Basics::testWithZoneRetainFields_DateTimeZone
  - org.joda.time.TestDateMidnight_Basics::testWithMillis_long
  - org.joda.time.TestDateMidnight_Basics::testIsEqual
  - org.joda.time.TestDateMidnight_Basics::testIsAfter
  - org.joda.time.TestDateMidnight_Basics::testWithChronology_Chronology
  - org.joda.time.TestDateMidnight_Basics::testToString_String_String
  - org.joda.time.TestDateMidnight_Basics::testToDateTime
  - org.joda.time.TestDateMidnight_Basics::testToInstant
  - org.joda.time.TestDateMidnight_Basics::testIsBefore
  - org.joda.time.TestDateMidnight_Basics::testToDateTime_Chronology
  - org.joda.time.TestDateMidnight_Basics::testGetters
  - org.joda.time.TestDateMidnight_Basics::testToDateTime_DateTimeZone
  - org.joda.time.TestDateMidnight_Basics::testToString_DTFormatter
  - org.joda.time.TestDateMidnight_Basics::testCompareTo
  - org.joda.time.TestDateMidnight_Basics::testToString
  - org.joda.time.TestDateMidnight_Basics::testEqualsHashCode
  - org.joda.time.TestDateMidnight_Basics::testToString_String
Failing tests: 411
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(parsePos<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return iInitialSaveMillis;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i<iMonthOfYear){
if(i>0){
return iWallOffsets[i-1];
}
return iMonthOfYear;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i<=transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(i<iMonthOfYear){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(bestValidPos<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return iMonthOfYear;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i<length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(curOffset<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(length<=transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(poolSize<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iNameKeys[i]=iNameKeys[iMonthOfYear];
if(i<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(j<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i<types.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i<args.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(minDaysInFirstWeek<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(compare<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prev<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(millis<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(pass<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i<variants.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(savedFieldsCount<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(errorPos<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(limit<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(afterCount<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(max<transitions.length){
if(max>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(max<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i<transitions.length){
if(max>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iFieldType<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(newPos<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(pos<transitions.length){
if(pos>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(pos<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i<transitions.length){
if(pos>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(len<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(value>=0){
return iWallOffsets[i];
}
i=~i;
if(i<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=length){
return iWallOffsets[i];
}
i=~i;
if(i<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iTailZone==null){
return iWallOffsets[i-1];
}
if(i>=0){
return iWallOffsets[i];
}
i=~i;
if(i<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parsePos>=0){
return iWallOffsets[i];
}
i=~i;
if(i<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(length>=0){
return iWallOffsets[i];
}
i=~i;
if(i<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=iInitialSaveMillis){
return iWallOffsets[i];
}
i=~i;
if(i<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iTailZone==null){
return iNameKeys[i-1];
}
if(i>=0){
return iWallOffsets[i];
}
i=~i;
if(i<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=0){
return iWallOffsets[i];
}
i=~i;
if(poolSize<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=0){
return iWallOffsets[i];
}
i=~i;
if(minDaysInFirstWeek<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>0){
return iWallOffsets[i];
}
i=~i;
if(i<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(i>=0){
return iWallOffsets[i];
}
i=~i;
if(length<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iTailZone==null){
return instant;
}
if(i>=0){
return iWallOffsets[i];
}
i=~i;
if(i<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant<transitions[transitions.length-1]){
instant=end;
}
if(i>=0){
return iWallOffsets[i];
}
i=~i;
if(i<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(poolSize>=0){
return iWallOffsets[i];
}
i=~i;
if(i<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=0){
return iWallOffsets[i];
}
i=~i;
if(prev<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=0){
return iWallOffsets[i];
}
i=~i;
if(millis<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(compare>=0){
return iWallOffsets[i];
}
i=~i;
if(i<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=0){
return iWallOffsets[i];
}
i=~i;
if(pass<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=0){
return iWallOffsets[i];
}
i=~i;
if(i<variants.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(j>=0){
return iWallOffsets[i];
}
i=~i;
if(i<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=0){
return iWallOffsets[i];
}
i=~i;
if(i<types.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=0){
return iWallOffsets[i];
}
i=~i;
if(i<=transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(i>=0){
return iWallOffsets[i];
}
i=~i;
if(length<=transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(savedFieldsCount>=0){
return iWallOffsets[i];
}
i=~i;
if(i<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iInitialSaveMillis=0;
if(i>=0){
return iWallOffsets[i];
}
i=~i;
if(i<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(afterCount>=0){
return iWallOffsets[i];
}
i=~i;
if(i<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index>=0){
return iWallOffsets[i];
}
i=~i;
if(i<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=0){
return iWallOffsets[i];
}
i=~i;
if(newPos<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(position>=0){
return iWallOffsets[i];
}
i=~i;
if(i<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(max>=0){
return iWallOffsets[i];
}
i=~i;
if(i<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(len>=0){
return iWallOffsets[i];
}
i=~i;
if(i<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iInitialNameKey=str.substring(2,i-1);
if(i>=0){
return iWallOffsets[i];
}
i=~i;
if(i<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(pos>=0){
return iWallOffsets[i];
}
i=~i;
if(i<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iInitialNameKey==null){
throw new IllegalArgumentException("Literal must not be null");
}
if(i>=0){
return iWallOffsets[i];
}
i=~i;
if(i<transitions.length){
if(i>0){
return iWallOffsets[i-1];
}
return 0;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.tz.DateTimeZoneBuilder,1534
org.joda.time.tz.DateTimeZoneBuilder,1535
org.joda.time.tz.DateTimeZoneBuilder,1536
org.joda.time.tz.DateTimeZoneBuilder,1570
========
if(i>=0){
return iNameKeys[i];
}
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=0){
return iWallOffsets[i];
}
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=0){
return iStandardOffsets[i];
}
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=0){
if(instant>Long.MIN_VALUE){
return instant-1;
}
return instant;
}
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i<transitions.length){
return transitions[i];
}
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=iTransitions;
long i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(transitions[i-1]>Long.MIN_VALUE){
return prev-1;
}
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iRuleSets.get(iStandardOffset).firstTransition(instant)==null){
continue;
}
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=iTransitions;
char i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iNameKeys[iStandardOffset]=iNameKeys[i];
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
iWallOffsets[0]=iStandardOffset;
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i==0){
break;
}
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
i--;
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=iTransitions;
iStandardOffset=iInitialSaveMillis;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=iTransitions;
int i=transitions.get(i).binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iTailZone!=null){
return true;
}
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(transitions.length<=1){
return false;
}
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(roundFloor(instant)!=instant){
instant=add(newInstant,1);
}
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getNameKey(instant)==null){
return iNameKey;
}
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==Long.MIN_VALUE){
iInitialSaveMillis=Integer.MIN_VALUE;
}else {
year=ISOChronology.getInstanceUTC().year().get(instant+i);
}
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(serialVersionUID==0||iInitialSaveMillis==0){
return instant;
}
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i=='w'){
iInitialSaveMillis=iStandardOffset+iSaveMillis;
}else if(iMode=='s'){
offset=standardOffset;
}else {
offset=0;
}
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant+=iInitialSaveMillis;
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iToYear>i){
dayToUse=maxDay;
}
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iInitialSaveMillis==0){
return instant;
}
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instant,"resulting");
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instant,"resulting");
long[] transitions=iTransitions;
long i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant-roundFloor(instant)<=roundCeiling(instant)-instant){
return roundFloor(instant);
}else {
return roundCeiling(instant);
}
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(roundCeiling(instant)-instant<=instant-roundFloor(instant)){
return roundCeiling(instant);
}else {
return roundFloor(instant);
}
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iInitialNameKey!=null){
return name;
}
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=iTransitions;
FieldUtils.verifyValueBounds(this,iInitialSaveMillis,MIN,iStandardOffset);
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iInitialSaveMillis>i){
thisDom=maxDom;
}
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=iTransitions;
checkLimits(instant,null);
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(serialVersionUID,"resulting");
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
FieldUtils.verifyValueBounds(this,i,0,getMaximumValue());
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=0){
return value/iStandardOffset;
}else {
return ((value+1)/iDivisor)-1;
}
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=MILLIS_PER_HOUR;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().add(instant,iInitialSaveMillis),"resulting");
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=iTransitions;
checkLimits(instant,null);
long i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().addWrapField(instant,iInitialSaveMillis),"resulting");
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().set(instant,iInitialSaveMillis),"resulting");
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=0){
return value%iStandardOffset;
}else {
return (iDivisor-1)+((value+1)%iDivisor);
}
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i=='w'){
iInitialSaveMillis=iStandardOffset+iSaveMillis;
}else if(iMode=='s'){
offset=standardOffset;
}else {
offset=0;
}
instant+=iInitialSaveMillis;
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=iTransitions;
if(serialVersionUID==0||iInitialSaveMillis==0){
return this;
}
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().roundFloor(instant),"resulting");
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().roundCeiling(instant),"resulting");
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().roundHalfFloor(instant),"resulting");
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().roundHalfCeiling(instant),"resulting");
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().roundHalfEven(instant),"resulting");
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().remainder(instant),"resulting");
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=monthOfYear().set(instant,iMonthOfYear);
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=dayOfMonth().set(instant,iMonthOfYear);
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=hourOfDay().set(instant,iMillisOfDay);
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=minuteOfHour().set(instant,iMonthOfYear);
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=secondOfMinute().set(instant,iMonthOfYear);
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=monthOfYear().set(instant,iMonthOfYear);
long[] transitions=iTransitions;
long i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=dayOfMonth().set(instant,iMonthOfYear);
long[] transitions=iTransitions;
long i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=monthOfYear().set(instant,iMonthOfYear);
instant=dayOfMonth().set(instant,iMonthOfYear);
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=monthOfYear().set(instant,iMonthOfYear);
instant=dayOfMonth().set(instant,iMonthOfYear);
long[] transitions=iTransitions;
long i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=iTransitions;
if(iInitialSaveMillis==0){
return this;
}
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=iTransitions;
if(iInitialSaveMillis==0){
return this;
}
long i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().add(instant,instant),"resulting");
long[] transitions=iTransitions;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().add(instant,iInitialSaveMillis),"resulting");
long[] transitions=iTransitions;
long i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().add(instant,iInitialSaveMillis),"resulting");
long[] transitions=iTransitions;
checkLimits(instant,null);
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().add(instant,iInitialSaveMillis),"resulting");
long[] transitions=iTransitions;
checkLimits(instant,null);
long i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().add(instant,instant),"resulting");
long[] transitions=iTransitions;
long i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().add(instant,instant),"resulting");
long[] transitions=iTransitions;
checkLimits(instant,null);
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().add(instant,instant),"resulting");
long[] transitions=iTransitions;
checkLimits(instant,null);
long i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long[] transitions=iTransitions;
if(serialVersionUID==0||iInitialSaveMillis==0){
return this;
}
long i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.tz.DateTimeZoneBuilder,1571
org.joda.time.tz.DateTimeZoneBuilder,1572
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(length<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iTailZone==null){
return iNameKeys[i-1];
}
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iTailZone==null){
return iWallOffsets[i-1];
}
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iTailZone==null){
return iStandardOffsets[i-1];
}
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<=transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<iMonthOfYear){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(bestValidPos<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(parsePos<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iRuleSets.get(i).firstTransition(instant)==null){
continue;
}
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
addTransition(transitions,iRuleSets.get(i).firstTransition(instant));
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
char i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(j<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(tokenLen<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
iWallOffsets[0]=i;
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<iInitialSaveMillis){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(minDaysInFirstWeek<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<args.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(pass<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(poolSize<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iStandardOffset=iInitialSaveMillis;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.safeMultiply(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=transitions.get(i).binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<variants.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(iTailZone!=null){
return true;
}
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(length<=transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<types.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<iMillis){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(instant<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(iGapDuration<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(roundFloor(instant)!=instant){
instant=add(newInstant,1);
}
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(serialVersionUID==0||iMonthOfYear==0){
return instant;
}
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getNameKey(instant)==null){
return iNameKey;
}
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<instant){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(yearStart<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<=instant){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(monthOfYear<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(savedFieldsCount<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iMonthOfYear==0){
return instant;
}
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==Long.MIN_VALUE){
iInitialSaveMillis=Integer.MIN_VALUE;
}else {
year=ISOChronology.getInstanceUTC().year().get(instant+i);
}
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(months<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant+=iInitialSaveMillis;
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(instant<instant){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(sum<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(diff<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(instant<length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant-roundFloor(instant)<=roundCeiling(instant)-instant){
return roundFloor(instant);
}else {
return roundCeiling(instant);
}
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(roundCeiling(instant)-instant<=instant-roundFloor(instant)){
return roundCeiling(instant);
}else {
return roundFloor(instant);
}
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(wow<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(oldEra<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
FieldUtils.verifyValueBounds(this,iInitialSaveMillis,DateTimeConstants.BCE,DateTimeConstants.CE);
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(prev<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(instant<iMillis){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(iGapDuration<iMillis){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(next<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<=length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iToYear>iDayOfMonth){
dayToUse=maxDay;
}
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instant,"resulting");
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(years<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(overlapStart<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant-serialVersionUID>=serialVersionUID){
return iAdvance?instant:instant-diff;
}else {
return earlierOrLater?instant+diff:instant;
}
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instant,"resulting");
long i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
FieldUtils.verifyValueBounds(this,iMonthOfYear,MIN,i);
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iMonthOfYear>iMonthOfYear){
thisDom=maxDom;
}
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getWrappedField().get(instant)==0){
value=getMaximumValue();
}
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(prev<instant){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(next<=transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(next<length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(next<instant){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(next<=length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(next<=instant){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(week<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=SECONDS_MILLIS){
iMonthOfYear=(int)(length/DateTimeConstants.MILLIS_PER_SECOND);
}
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instant,null);
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(serialVersionUID,"resulting");
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
iInitialSaveMillis=0;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(value<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iInitialNameKey.regionMatches(true,iMonthOfYear,iNameKey,0,iNameKey.length())){
return position+textLength;
}
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(serialVersionUID==0||iMonthOfYear==0){
return this;
}
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().add(instant,iMonthOfYear),"resulting");
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instant,null);
long i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().addWrapField(instant,iMonthOfYear),"resulting");
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().set(instant,iMonthOfYear),"resulting");
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=GJChronology.getInstanceUTC().binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(sum<instant){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().roundFloor(instant),"resulting");
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().roundCeiling(instant),"resulting");
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().roundHalfFloor(instant),"resulting");
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().roundHalfCeiling(instant),"resulting");
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().roundHalfEven(instant),"resulting");
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().remainder(instant),"resulting");
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(newPos<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(position<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=monthOfYear().set(instant,iMonthOfYear);
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=dayOfMonth().set(instant,iMonthOfYear);
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=hourOfDay().set(instant,iDayOfMonth);
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=minuteOfHour().set(instant,iMonthOfYear);
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=secondOfMinute().set(instant,iMonthOfYear);
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=monthOfYear().set(instant,iMonthOfYear);
long i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=dayOfMonth().set(instant,iMonthOfYear);
long i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=monthOfYear().set(instant,iMonthOfYear);
instant=dayOfMonth().set(instant,iMonthOfYear);
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=monthOfYear().set(instant,iMonthOfYear);
instant=dayOfMonth().set(instant,iMonthOfYear);
long i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iMonthOfYear==0){
return this;
}
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iMonthOfYear==0){
return this;
}
long i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(pos<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(serialVersionUID==0||iMonthOfYear==0){
return this;
}
long i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().add(instant,instant),"resulting");
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().add(instant,iMonthOfYear),"resulting");
long i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instant,null);
checkLimits(getWrappedField().add(instant,iMonthOfYear),"resulting");
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instant,null);
checkLimits(getWrappedField().add(instant,iMonthOfYear),"resulting");
long i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().add(instant,instant),"resulting");
long i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instant,null);
checkLimits(getWrappedField().add(instant,instant),"resulting");
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instant,null);
checkLimits(getWrappedField().add(instant,instant),"resulting");
long i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(len<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int i=Arrays.binarySearch(transitions,instant);
i=(i>=0)?(i+1):~i;
if(max<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.tz.DateTimeZoneBuilder,1573
========
if(value<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i<=transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i<iInitialSaveMillis){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(bestValidPos<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(transitions.length<=1){
return false;
}
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant<transitions[transitions.length-1]){
instant=end;
}
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(length<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i<types.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(j<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i<args.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parsePos<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(poolSize<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iNameKeys[i]=iNameKeys[iInitialSaveMillis];
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i<length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
i--;
if(i<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(minDaysInFirstWeek<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prev<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(millis<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(pass<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(savedFieldsCount<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(newPos<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(position<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(errorPos<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(limit<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i<i+3){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(pos<transitions.length){
return transitions[i];
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.tz.DateTimeZoneBuilder,1574
org.joda.time.tz.CachedDateTimeZone,103
========
return getInfo(instant).getNameKey(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getInfo(instant).getStandardOffset(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return findMatchingRecurrence(instant).getNameKey();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().roundFloor(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getInfo(instant).roundFloor(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().roundCeiling(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getInfo(instant).roundCeiling(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().remainder(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getInfo(instant).remainder(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().roundHalfFloor(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getInfo(instant).roundHalfFloor(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().roundHalfCeiling(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getInfo(instant).roundHalfCeiling(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().roundHalfEven(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getInfo(instant).roundHalfEven(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().isLeap(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getInfo(instant).isLeap(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().getLeapAmount(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getInfo(instant).getLeapAmount(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getInfo(instant).getMaximumValue(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().add(instant,iStandardOffset);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().addWrapField(instant,iStandardOffset);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return millisOfSecond().set(instant,iStandardOffset);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getInfo(instant).isLeapYear(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getDurationField().add(instant,iStandardOffset);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return FieldUtils.safeToInt(getValueAsLong(iPeriodStart,instant));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getInfo(instant).safeToInt(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iZone.nextTransition(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getInfo(instant).nextTransition(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iZone.previousTransition(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getInfo(instant).previousTransition(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getInfo(instant).get(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getInfo(instant).getAsText(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getInfo(instant).getAsShortText(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getInfo(instant).getMinimumValue(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().get(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instant,null);
return getInfo(instant).getOffset(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instant,null);
return getWrappedField().isLeap(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instant,null);
return getInfo(instant).isLeap(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instant,null);
return getWrappedField().getLeapAmount(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instant,null);
return getInfo(instant).getLeapAmount(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().getMinimumValue(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instant,null);
return getInfo(instant).getMinimumValue(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().getMaximumValue(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instant,null);
return getInfo(instant).getMaximumValue(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return FieldUtils.safeAdd(instant,iStandardOffset);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().getValue(iPeriodStart,instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().getValueAsLong(iPeriodStart,instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().getMillis(iStandardOffset,instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iNextInfo.getOffset(iPeriodStart);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getInfo(instant).getOffset(iPeriodStart);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iNextInfo==null||iPeriodStart<iNextInfo.iPeriodStart){
if(iOffset==Integer.MIN_VALUE){
iOffset=iZoneRef.getOffset(iPeriodStart);
}
return iOffset;
}
return getInfo(instant).getOffset(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().add(instant,iStandardOffset*iOffset);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return julianToGregorianByWeekyear(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getInfo(instant).julianToGregorianByWeekyear(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return julianToGregorianByYear(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getInfo(instant).julianToGregorianByYear(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return gregorianToJulianByWeekyear(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getInfo(instant).gregorianToJulianByWeekyear(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return gregorianToJulianByYear(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getInfo(instant).gregorianToJulianByYear(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return new StringBuffer(requirePrinter().estimatePrintedLength()).toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
printTo(new StringBuffer(requirePrinter().estimatePrintedLength()),instant);
return getInfo(instant).getOffset(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return add(instant,-iPeriodStart);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iPeriodStart==Long.MIN_VALUE){
throw new ArithmeticException("Long.MIN_VALUE cannot be negated");
}
return getInfo(instant).getOffset(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().getMillis(FieldUtils.safeMultiply(iPeriodStart,iOffset),instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().add(instant,FieldUtils.safeMultiply(iPeriodStart,iOffset));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().getMillis(((long)iStandardOffset)*((long)iOffset),instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().add(instant,((long)iStandardOffset)*((long)iOffset));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().roundFloor(field.set(instant,get(instant)*iOffset));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return add(instant,-iStandardOffset);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iStandardOffset==Integer.MIN_VALUE){
return subtract(instant,(long)value);
}
return getInfo(instant).getOffset(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return FieldUtils.safeAdd(instant,FieldUtils.safeMultiply(iPeriodStart,iPeriodStart));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return FieldUtils.safeAdd(instant,iStandardOffset*iPeriodStart);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getDaysInYearMonth(getYear(instant),getMonthOfYear(instant,getYear(instant)));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
FieldUtils.verifyValueBounds(this,iStandardOffset,getMinimumValue(),getMaximumValueForSet(instant,value));
return getInfo(instant).getOffset(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().set(instant,getDivided(getWrappedField().get(instant))*iOffset+iStandardOffset);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
FieldUtils.verifyValueBounds(this,iStandardOffset,0,iOffset-1);
return getInfo(instant).getOffset(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().set(instant,iStandardOffset*iOffset+getRemainder(getWrappedField().get(instant)));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
FieldUtils.verifyValueBounds(this,iStandardOffset,iOffset,iOffset);
return getInfo(instant).getOffset(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return millisOfDay().set(instant,iStandardOffset);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=monthOfYear().set(instant,iStandardOffset);
return getInfo(instant).getOffset(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=dayOfMonth().set(instant,iStandardOffset);
return getInfo(instant).getOffset(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().set(instant,iStandardOffset);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
FieldUtils.verifyValueBounds(this,iStandardOffset,1,getMaximumValue());
return getInfo(instant).getOffset(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iStandardOffset==getMaximumValue()){
value=0;
}
return getInfo(instant).getOffset(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=hourOfDay().set(instant,iStandardOffset);
return getInfo(instant).getOffset(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=minuteOfHour().set(instant,iStandardOffset);
return getInfo(instant).getOffset(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=secondOfMinute().set(instant,iStandardOffset);
return getInfo(instant).getOffset(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return FieldUtils.safeAdd(instant,FieldUtils.safeMultiply(iPeriodStart,iStandardOffset));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iPeriodStart==0||iStandardOffset==0){
return instant;
}
return getInfo(instant).getOffset(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().add(instant,iPeriodStart);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getDurationField().add(instant,iPeriodStart);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().getMillis(iPeriodStart,instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().add(instant,iPeriodStart*iOffset);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return FieldUtils.safeAdd(instant,iPeriodStart);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.tz.CachedDateTimeZone,140
========
if(iNextInfo==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(info==null||(int)((info.iPeriodStart>>32))!=iPeriodStart){
info=createInfo(millis);
cache[index]=info;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iNextInfo==null||(int)((info.iPeriodStart>>32))!=iPeriodStart){
info=createInfo(millis);
cache[index]=info;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZoneRef.nextTransition(millis)==millis||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(info==null||(int)((info.iPeriodStart>>32))!=end){
info=createInfo(millis);
cache[index]=info;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
millis=iZoneRef.nextTransition(millis);
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZoneRef.previousTransition(millis)==millis||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
millis=iZoneRef.previousTransition(millis);
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(period!=0){
info=createInfo(millis);
cache[index]=info;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(period!=0||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
cache[period]=iStandardOffset;
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
millis-=period;
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(info==null&&(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iOffset==period-1){
info=createInfo(millis);
cache[index]=info;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(info==null||(int)((info.iPeriodStart>>32))==period){
info=createInfo(millis);
cache[index]=info;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(info==null||iOffset==period-1){
info=createInfo(millis);
cache[index]=info;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(info==null||iOffset!=period){
info=createInfo(millis);
cache[index]=info;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(info==null||(int)((info.iPeriodStart>>32))!=ruleSetCount){
info=createInfo(millis);
cache[index]=info;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(info==null||(int)((info.iPeriodStart>>32))!=period){
if(period==NONE){
type=TIME;
}else if(iStandardOffset==NONE){
type=DATE;
}
info=createInfo(millis);
cache[index]=info;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(info==null||(int)((info.iPeriodStart>>32))!=period){
cStyleCache[index]=info;
info=createInfo(millis);
cache[index]=info;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(info==null||(int)((info.iPeriodStart>>32))!=period){
if(period==NONE){
type=TIME;
}else if(iStandardOffset==NONE){
type=DATE;
}
cStyleCache[index]=info;

info=createInfo(millis);
cache[index]=info;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(cache[index]==-1){
throw new UnsupportedOperationException("Field is not supported");
}
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
FieldUtils.verifyValueBounds(this,iStandardOffset,iOffset,getMaximumValue());
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(period==iZoneRef.getOffset(millis)||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(info==null||period==-1){
info=createInfo(millis);
cache[index]=info;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(info==null||(int)((info.iPeriodStart>>32))!=-1){
info=createInfo(millis);
cache[index]=info;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(info==null&&(int)((info.iPeriodStart>>32))==period){
info=createInfo(millis);
cache[index]=info;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(info==null&&period==-1){
info=createInfo(millis);
cache[index]=info;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(info==null&&(int)((info.iPeriodStart>>32))!=-1){
info=createInfo(millis);
cache[index]=info;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(info==null||(int)((info.iPeriodStart>>32))==-1){
info=createInfo(millis);
cache[index]=info;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(info==null&&(int)((info.iPeriodStart>>32))==-1){
info=createInfo(millis);
cache[index]=info;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(size()!=(ReadablePeriod)period.size()){
return false;
}
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(period instanceof ReadablePeriod==false){
return false;
}
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(iZone.nextTransition(millis&(0xffffffffL<<32))==millis&(0xffffffffL<<32)||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=end){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index==-1){
throw new UnsupportedOperationException("Field is not supported");
}
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&length;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(iStandardOffset<0){
return iNameKey;
}
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=length&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
cache=(Entry[])entries.clone();
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
if(iStandardOffset==0){
return false;
}
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
cache[index]=FieldUtils.safeAdd(values[realIndex],iStandardOffset);
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=dateStyle&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&timeStyle;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
if(period==NONE){
type=TIME;
}else if(iStandardOffset==NONE){
type=DATE;
}
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
cStyleCache[index]=info;
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
if(period==NONE){
type=TIME;
}else if(iStandardOffset==NONE){
type=DATE;
}
cStyleCache[index]=info;

info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
if(iZoneRef==null){
zone=DateTimeZone.getDefault();
}
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
info+=getType().hashCode();
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(iNextInfo==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=iPeriodStart){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(iNextInfo==null||(int)((info.iPeriodStart>>32))!=iPeriodStart){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(iZoneRef.nextTransition(millis)==millis||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
millis=iZoneRef.nextTransition(millis);
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(cInfoCacheMask==period&&iNameKey.equals(iZoneRef.getNameKey(millis))){
System.out.println("*d* Error in "+iZoneRef.getID());
return false;
}
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(iZoneRef.previousTransition(millis)==millis||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
super();
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null&&(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(iOffset==cInfoCacheMask-1){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))==period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||iOffset==cInfoCacheMask-1){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||iOffset!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=ruleSetCount){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
FieldUtils.verifyValueBounds(this,iStandardOffset,iOffset,getMaximumValue());
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
millis+=getTotalMillisByYearMonth(iStandardOffset,iStandardOffset);
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
iPeriodStart+=getTotalMillisByYearMonth(iStandardOffset,iStandardOffset);
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
millis=ISOChronology.getInstanceUTC().monthOfYear().set(millis,iOffset);
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
millis=ISOChronology.getInstanceUTC().millisOfDay().set(millis,iOffset);
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
millis=setDayOfMonth(ISOChronology.getInstanceUTC(),millis);
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iOffset!=0){
millis=setDayOfWeek(ISOChronology.getInstanceUTC(),millis);
}
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(period instanceof ReadablePeriod==false){
return false;
}
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(size()!=(ReadablePeriod)period.size()){
return false;
}
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(period!=0||getMonths()!=0){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(period!=0||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||getMonths()!=0){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
millis+=(((long)getHours())*((long)DateTimeConstants.MILLIS_PER_HOUR));
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
millis+=(((long)getDays())*((long)DateTimeConstants.MILLIS_PER_DAY));
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
millis+=(((long)getWeeks())*((long)DateTimeConstants.MILLIS_PER_WEEK));
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
iZone=DateTimeUtils.getZone(newZone);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==DateTimeUtils.getZone(getZone())){
return this;
}
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==DateTimeUtils.getZone(getZone())){
return this;
}
int period=(int)(millis>>32);
iZone=DateTimeUtils.getZone(newZone);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==DateTimeUtils.getZone(getZone())){
return ;
}
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setChronology(getChronology().withZone(iZone));
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setMillis(millis);
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=MILLIS_PER_MINUTE;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
checkYearsAndMonths("Minutes");
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
millis+=((long)getSeconds())*DateTimeConstants.MILLIS_PER_SECOND;
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
iPeriodStart=FieldUtils.safeAdd(minutes,getMinutes());
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
iPeriodStart=FieldUtils.safeAdd(minutes,((long)getHours())*((long)DateTimeConstants.MINUTES_PER_HOUR));
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
iPeriodStart=FieldUtils.safeAdd(minutes,((long)getDays())*((long)DateTimeConstants.MINUTES_PER_DAY));
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
iPeriodStart=FieldUtils.safeAdd(minutes,((long)getWeeks())*((long)DateTimeConstants.MINUTES_PER_WEEK));
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=MILLIS_PER_HOUR;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
checkYearsAndMonths("Hours");
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
millis+=((long)getMinutes())*DateTimeConstants.MILLIS_PER_MINUTE;
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
iPeriodStart=FieldUtils.safeAdd(hours,getHours());
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
iPeriodStart=FieldUtils.safeAdd(hours,((long)getDays())*((long)DateTimeConstants.HOURS_PER_DAY));
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
iPeriodStart=FieldUtils.safeAdd(hours,((long)getWeeks())*((long)DateTimeConstants.HOURS_PER_WEEK));
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=MILLIS_PER_DAY;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
checkYearsAndMonths("Days");
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
millis+=((long)getHours())*DateTimeConstants.MILLIS_PER_HOUR;
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
iPeriodStart=FieldUtils.safeAdd(days,getDays());
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
iPeriodStart=FieldUtils.safeAdd(days,((long)getWeeks())*((long)DateTimeConstants.DAYS_PER_WEEK));
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int period=(int)(millis>>32);
millis+=((long)getSeconds())*DateTimeConstants.MILLIS_PER_SECOND;
millis+=((long)getMinutes())*DateTimeConstants.MILLIS_PER_MINUTE;
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkYearsAndMonths("Weeks");
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
millis+=((long)getSeconds())*DateTimeConstants.MILLIS_PER_SECOND;
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
millis+=((long)getMinutes())*DateTimeConstants.MILLIS_PER_MINUTE;
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
millis+=((long)getHours())*DateTimeConstants.MILLIS_PER_HOUR;
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
millis+=((long)getDays())*DateTimeConstants.MILLIS_PER_DAY;
int period=(int)(millis>>32);
Info[] cache=iInfoCache;
int index=period&cInfoCacheMask;
Info info=cache[index];
if(info==null||(int)((info.iPeriodStart>>32))!=period){
info=createInfo(millis);
cache[index]=info;
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.tz.CachedDateTimeZone,141
org.joda.time.tz.CachedDateTimeZone,142
org.joda.time.tz.CachedDateTimeZone,143
org.joda.time.tz.CachedDateTimeZone,144
org.joda.time.tz.CachedDateTimeZone,145
org.joda.time.tz.CachedDateTimeZone,146
org.joda.time.tz.CachedDateTimeZone,148
org.joda.time.tz.CachedDateTimeZone,152
========
int periodStart=millis&(0xffffffffL<<32);
Info info=new Info(iZone,periodStart);
int end=periodStart|0xffffffffL;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int periodStart=millis&(0xffffffffL<<32);
Info info=new Info(iZone,periodStart);
long end=periodStart|0xffffffffL;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long periodStart=millis&(0xffffffffL<<32);
Info info=new Info(iZone,periodStart);
int end=periodStart|0xffffffffL;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long periodStart=millis&(0xffffffffL<<32);
Info info=new Info(iZone,periodStart);
long end=millis|0xffffffffL;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
end+=getType().hashCode();
long periodStart=millis&(0xffffffffL<<32);
Info info=new Info(iZone,periodStart);
long end=periodStart|0xffffffffL;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long periodStart=millis&(0xffffffffL<<32);
Info info=new Info(iZone,periodStart);
int end=millis|0xffffffffL;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
boolean periodStart=millis&(0xffffffffL<<32);
Info info=new Info(iZone,periodStart);
long end=periodStart|0xffffffffL;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long periodStart=millis&(0xffffffffL<<32);
Info info=new Info(iZone,periodStart);
periodStart+=((long)getSeconds())*DateTimeConstants.MILLIS_PER_SECOND;
long end=periodStart|0xffffffffL;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iPeriodStart=FieldUtils.safeAdd(minutes,getMinutes());
long periodStart=millis&(0xffffffffL<<32);
Info info=new Info(iZone,periodStart);
long end=periodStart|0xffffffffL;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iPeriodStart=FieldUtils.safeAdd(minutes,((long)getHours())*((long)DateTimeConstants.MINUTES_PER_HOUR));
long periodStart=millis&(0xffffffffL<<32);
Info info=new Info(iZone,periodStart);
long end=periodStart|0xffffffffL;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
millis+=((long)getSeconds())*DateTimeConstants.MILLIS_PER_SECOND;
long periodStart=millis&(0xffffffffL<<32);
Info info=new Info(iZone,periodStart);
long end=periodStart|0xffffffffL;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
millis+=((long)getMinutes())*DateTimeConstants.MILLIS_PER_MINUTE;
long periodStart=millis&(0xffffffffL<<32);
Info info=new Info(iZone,periodStart);
long end=periodStart|0xffffffffL;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
periodStart=FieldUtils.safeAdd(hours,getHours());
long periodStart=millis&(0xffffffffL<<32);
Info info=new Info(iZone,periodStart);
long end=periodStart|0xffffffffL;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long periodStart=millis&(0xffffffffL<<32);
Info info=new Info(iZone,periodStart);
if(iStandardOffset<=0){
iStandardOffset=(relativeYear+3)>>2;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(iStandardOffset)){
leapYears++;
}
}
long end=periodStart|0xffffffffL;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long periodStart=millis&(0xffffffffL<<32);
Info info=new Info(iZone,periodStart);
periodStart+=((long)getMinutes())*DateTimeConstants.MILLIS_PER_MINUTE;
long end=periodStart|0xffffffffL;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long periodStart=millis&(0xffffffffL<<32);
Info info=new Info(iZone,periodStart);
periodStart+=((long)getHours())*DateTimeConstants.MILLIS_PER_HOUR;
long end=periodStart|0xffffffffL;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iPeriodStart=FieldUtils.safeAdd(days,getDays());
long periodStart=millis&(0xffffffffL<<32);
Info info=new Info(iZone,periodStart);
long end=periodStart|0xffffffffL;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iPeriodStart=FieldUtils.safeAdd(days,((long)getWeeks())*((long)DateTimeConstants.DAYS_PER_WEEK));
long periodStart=millis&(0xffffffffL<<32);
Info info=new Info(iZone,periodStart);
long end=periodStart|0xffffffffL;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
millis+=((long)getHours())*DateTimeConstants.MILLIS_PER_HOUR;
long periodStart=millis&(0xffffffffL<<32);
Info info=new Info(iZone,periodStart);
long end=periodStart|0xffffffffL;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
millis+=((long)getDays())*DateTimeConstants.MILLIS_PER_DAY;
long periodStart=millis&(0xffffffffL<<32);
Info info=new Info(iZone,periodStart);
long end=periodStart|0xffffffffL;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((int)((millis-getYearMillis(iStandardOffset))/DateTimeConstants.MILLIS_PER_DAY)==354){
return 12;
}
long periodStart=millis&(0xffffffffL<<32);
Info info=new Info(iZone,periodStart);
long end=periodStart|0xffffffffL;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.tz.CachedDateTimeZone,153
org.joda.time.tz.CachedDateTimeZone,155
========
Info info=new Info(iZone,periodStart);
int end=periodStart|0xffffffffL;
Info chain=info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Info info=new Info(iZone,periodStart);
long end=instant|0xffffffffL;
Info chain=info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((periodStart^end)<0&&(instant^this.iZone.getOffset(periodStart))>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
Info info=new Info(iZone,periodStart);
long end=periodStart|0xffffffffL;
Info chain=info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((periodStart^end)<0&&(instant^this.iZone.getOffsetFromLocal(periodStart))<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
Info info=new Info(iZone,periodStart);
long end=periodStart|0xffffffffL;
Info chain=info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((periodStart^end)<0&&(instant^this.iZone.getOffset(periodStart))>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
Info info=new Info(iZone,periodStart);
long end=instant|0xffffffffL;
Info chain=info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Info info=new Info(iZone,periodStart);
long end=periodStart|0xffffffffL;
if(!iNameKey.equals(iZoneRef.getID())){
return true;
}
Info chain=info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.tz.CachedDateTimeZone,156
UNKNOWN ASTNode type : catch (IllegalArgumentException e) {
  end=instant;
}

UNKNOWN ASTNode type : catch (ArithmeticException e) {
  end=instant;
}

UNKNOWN ASTNode type : catch (IllegalArgumentException e) {
  end=instant;
}

UNKNOWN ASTNode type : catch (ArithmeticException e) {
  end=instant;
}

UNKNOWN ASTNode type : catch (IllegalArgumentException e) {
  end=instant;
}

UNKNOWN ASTNode type : catch (ArithmeticException e) {
  end=instant;
}

========
if(next==millis||next>end){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(next==periodStart&&next>end){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (compile.tests)................................................ 
========
if(iOffset==2||next>end){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iPeriodStart<end){
instant=end;
}
if(next==periodStart||next>end){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(next==periodStart||next>0){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(next==periodStart&&next>0){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (compile.tests)................................................ 
========
if(nextTransition(iPeriodStart-iStandardOffset)==(iPeriodStart-iStandardOffset)){
nextAdjusted=Long.MAX_VALUE;
}
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
periodStart=next;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iStandardOffset==iZoneRef.getOffset(periodStart)&&iNameKey.equals(iZoneRef.getNameKey(periodStart))){
System.out.println("*d* Error in "+iZoneRef.getID());
return false;
}
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iPeriodStart<end||instant>=nextTransition(periodStart)+iPeriodStart-next){
return instant;
}
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart&&next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (compile.tests)................................................ 
========
while(true){
if(next<=end){
nextMillis=next;
}
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
periodStart+=iStandardOffset;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iPeriodStart=ISOChronology.getInstanceUTC().millisOfDay().set(next,0);
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iPeriodStart=ISOChronology.getInstanceUTC().millisOfDay().add(next,iOffset);
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iPeriodStart=setDayOfMonthNext(ISOChronology.getInstanceUTC(),next);
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
enclosing.iZone=this.iZone;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
enclosing.iOffset=this.iOffset;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
enclosing.iSavedFields=this.iSavedFields;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.next<enclosing.iSavedFieldsCount){
enclosing.iSavedFieldsShared=true;
}
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
enclosing.iSavedFieldsCount=this.iSavedFieldsCount;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iZone=iZoneRef;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
periodStart=ISOChronology.getInstanceUTC().year().set(0,2050);
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
end=ISOChronology.getInstanceUTC().year().set(0,1850);
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long end=periodStart|0xffffffffL;
Info chain=info;
next=(i>=0)?(i+1):~i;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(periodStart<end){
instant=end;
}
long end=periodStart|0xffffffffL;
Info chain=info;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
periodStart=next;
long end=periodStart|0xffffffffL;
Info chain=info;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iStandardOffset==iZoneRef.getOffset(periodStart)&&iNameKey.equals(iZoneRef.getNameKey(periodStart))){
System.out.println("*d* Error in "+iZoneRef.getID());
return false;
}
long end=periodStart|0xffffffffL;
Info chain=info;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long end=offsetBefore|0xffffffffL;
Info chain=info;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iPeriodStart<end||instant>=nextTransition(iPeriodStart)+periodStart-next){
return instant;
}
long end=periodStart|0xffffffffL;
Info chain=info;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long end=periodStart|0xffffffffL;
Info chain=info;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart&&next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (compile.tests)................................................ 
========
long end=periodStart|0xffffffffL;
Info chain=info;
while(true){
if(next<=end){
nextMillis=next;
}
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long end=periodStart|0xffffffffL;
Info chain=info;
while(true){
if(next>periodStart){
break;
}
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long end=periodStart|0xffffffffL;
periodStart+=iStandardOffset;
Info chain=info;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iPeriodStart=ISOChronology.getInstanceUTC().millisOfDay().set(next,0);
long end=periodStart|0xffffffffL;
Info chain=info;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iPeriodStart=ISOChronology.getInstanceUTC().millisOfDay().add(next,iOffset);
long end=periodStart|0xffffffffL;
Info chain=info;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iPeriodStart=setDayOfMonthNext(ISOChronology.getInstanceUTC(),next);
long end=periodStart|0xffffffffL;
Info chain=info;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int end=periodStart|0xffffffffL;
Info chain=info;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
enclosing.iZone=this.iZone;
long end=periodStart|0xffffffffL;
Info chain=info;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
enclosing.iOffset=this.iOffset;
long end=periodStart|0xffffffffL;
Info chain=info;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
enclosing.iSavedFields=this.iSavedFields;
long end=periodStart|0xffffffffL;
Info chain=info;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.next<enclosing.iSavedFieldsCount){
enclosing.iSavedFieldsShared=true;
}
long end=periodStart|0xffffffffL;
Info chain=info;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
enclosing.iSavedFieldsCount=this.iSavedFieldsCount;
long end=periodStart|0xffffffffL;
Info chain=info;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long end=instant|0xffffffffL;
Info chain=info;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iZone=iZoneRef;
long end=periodStart|0xffffffffL;
Info chain=info;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long end=millis|0xffffffffL;
Info chain=info;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long end=periodStart|0xffffffffL;
Info chain=info;
while(true){
cache[index]=chain;
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int end=millis|0xffffffffL;
Info chain=info;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long end=periodStart|0xffffffffL;
Info chain=info;
periodStart=ISOChronology.getInstanceUTC().year().set(0,2050);
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long end=periodStart|0xffffffffL;
Info chain=info;
end=ISOChronology.getInstanceUTC().year().set(0,1850);
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.tz.CachedDateTimeZone,158
org.joda.time.tz.CachedDateTimeZone,159
org.joda.time.tz.CachedDateTimeZone,160
org.joda.time.tz.CachedDateTimeZone,166
========
if(nextTransition(iPeriodStart-iStandardOffset)==(iPeriodStart-iStandardOffset)){
nextAdjusted=Long.MAX_VALUE;
}
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iOffset=(i>=0)?(i+1):~i;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(periodStart<next){
instant=end;
}
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
periodStart=next;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iStandardOffset==iZoneRef.getOffset(periodStart)&&iNameKey.equals(iZoneRef.getNameKey(periodStart))){
System.out.println("*d* Error in "+iZoneRef.getID());
return false;
}
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iPeriodStart<end||instant>=nextTransition(periodStart)+iPeriodStart-next){
return instant;
}
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart&&next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (compile.tests)................................................ 
========
while(true){
if(next<=end){
nextMillis=next;
}
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
if(periodStart>iPeriodStart){
break;
}
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
periodStart+=iStandardOffset;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iPeriodStart=ISOChronology.getInstanceUTC().millisOfDay().set(next,0);
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iPeriodStart=ISOChronology.getInstanceUTC().millisOfDay().add(next,iOffset);
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iPeriodStart=setDayOfMonthNext(ISOChronology.getInstanceUTC(),next);
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
enclosing.iZone=this.iZone;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
enclosing.iOffset=this.iOffset;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
enclosing.iSavedFields=this.iSavedFields;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.next<enclosing.iSavedFieldsCount){
enclosing.iSavedFieldsShared=true;
}
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
enclosing.iSavedFieldsCount=this.iSavedFieldsCount;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iZone=iZoneRef;
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
periodStart=ISOChronology.getInstanceUTC().year().set(0,2050);
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
end=ISOChronology.getInstanceUTC().year().set(0,1850);
while(true){
long next=iZone.nextTransition(periodStart);
if(next==periodStart||next>end){
break;
}
periodStart=next;
chain=(chain.iNextInfo=new Info(iZone,periodStart));
}
return info;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.BaseChronology,132
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,hourOfDay);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,minuteOfHour);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,secondOfMinute);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,hourOfDay);
instant=dayOfMonth().set(instant,minuteOfHour);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,hourOfDay);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,secondOfMinute);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,minuteOfHour);
instant=hourOfDay().set(instant,secondOfMinute);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,hourOfDay);
instant=dayOfMonth().set(instant,minuteOfHour);
instant=hourOfDay().set(instant,secondOfMinute);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfDay().set(instant,hourOfDay);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,hourOfDay);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,millisOfSecond);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,hourOfDay);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,millisOfSecond);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,minuteOfHour);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,millisOfSecond);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,secondOfMinute);
instant=minuteOfHour().set(instant,millisOfSecond);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,hourOfDay);
instant=dayOfMonth().set(instant,minuteOfHour);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,millisOfSecond);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,hourOfDay);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,secondOfMinute);
instant=minuteOfHour().set(instant,millisOfSecond);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,minuteOfHour);
instant=hourOfDay().set(instant,secondOfMinute);
instant=minuteOfHour().set(instant,millisOfSecond);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,hourOfDay);
instant=dayOfMonth().set(instant,minuteOfHour);
instant=hourOfDay().set(instant,secondOfMinute);
instant=minuteOfHour().set(instant,millisOfSecond);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,year);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,monthOfYear);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,dayOfMonth);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,year);
instant=dayOfMonth().set(instant,monthOfYear);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,year);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,dayOfMonth);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,monthOfYear);
instant=hourOfDay().set(instant,dayOfMonth);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,year);
instant=dayOfMonth().set(instant,monthOfYear);
instant=hourOfDay().set(instant,dayOfMonth);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,dayOfMonth);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().add(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().add(instant,dayOfMonth);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,instant);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,instant);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,hourOfDay);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,dayOfMonth);
instant=dayOfMonth().set(instant,hourOfDay);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,instant);
instant=dayOfMonth().set(instant,instant);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().add(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return getWrappedField().roundFloor(field.set(instant,get(instant)*minuteOfHour));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,minuteOfHour);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
checkLimits(instant,null);
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().set(instant,minuteOfHour),"resulting");
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(serialVersionUID,"resulting");
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,minuteOfHour);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return getWrappedField().set(instant,dayOfMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,dayOfMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
FieldUtils.verifyValueBounds(this,dayOfMonth,1,minuteOfHour);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
if(dayOfMonth==minuteOfHour){
value=0;
}
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().safeAdd(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(dayOfMonth==0){
return instant;
}
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return getWrappedField().set(instant,getDivided(getWrappedField().get(instant))*dayOfMonth+minuteOfHour);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
FieldUtils.verifyValueBounds(this,minuteOfHour,0,dayOfMonth-1);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return getWrappedField().set(instant,monthOfYear*year+getRemainder(getWrappedField().get(instant)));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
FieldUtils.verifyValueBounds(this,monthOfYear,minuteOfHour,dayOfMonth);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(dayOfMonth==0){
return instant;
}
int instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int instant=year().set(0,year);
instant=monthOfYear().set(instant,minuteOfHour);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instant,"resulting");
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
serialVersionUID=ISOChronology.getInstanceUTC().year().set(0,2050);
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
serialVersionUID=ISOChronology.getInstanceUTC().year().set(0,1850);
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
checkLimits(instant,null);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return getWrappedField().getValue(serialVersionUID,instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().getValue(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
checkLimits(instant,null);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return getWrappedField().getValueAsLong(serialVersionUID,instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().getValueAsLong(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return getWrappedField().getMillis(minuteOfHour,instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().getMillis(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return getWrappedField().get(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return getWrappedField().isLeap(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return getWrappedField().getLeapAmount(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return getWrappedField().getMinimumValue(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return getWrappedField().getMaximumValue(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().setYear(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return new StringBuffer(requirePrinter().estimatePrintedLength()).toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
printTo(new StringBuffer(requirePrinter().estimatePrintedLength()),instant);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().safeMultiply(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return getWrappedField().getMillis(FieldUtils.safeMultiply(serialVersionUID,minuteOfHour),instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return getWrappedField().add(instant,FieldUtils.safeMultiply(serialVersionUID,minuteOfHour));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().add(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().safeMultiply(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().add(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getWrappedField().get(instant)==0){
value=getMaximumValue();
}
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().roundFloor(instant),"resulting");
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().roundCeiling(instant),"resulting");
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().roundHalfFloor(instant),"resulting");
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().roundHalfCeiling(instant),"resulting");
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().roundHalfEven(instant),"resulting");
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().remainder(instant),"resulting");
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return julianToGregorianByWeekyear(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return julianToGregorianByYear(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return gregorianToJulianByWeekyear(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return gregorianToJulianByYear(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().add(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(minuteOfHour==0){
return this;
}
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(minuteOfHour==0){
return this;
}
long instant=year().add(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(millisOfSecond==0){
return this;
}
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().subtract(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(minuteOfHour==0){
return this;
}
long instant=year().subtract(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(millisOfSecond==0){
return this;
}
long instant=year().subtract(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(millisOfSecond==0){
return this;
}
long instant=year().add(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case ROUND_CEILING :

long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case ROUND_HALF_CEILING :

long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(year<=0){
year=1-year;
}
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(year<=0){
year=1-year;
}
int instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return getWrappedField().getMillis(((long)dayOfMonth)*((long)dayOfMonth),instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return getWrappedField().add(instant,((long)dayOfMonth)*((long)dayOfMonth));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return FieldUtils.safeAdd(instant,FieldUtils.safeMultiply(serialVersionUID,serialVersionUID));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().safeAdd(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().safeMultiply(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return FieldUtils.safeAdd(instant,FieldUtils.safeMultiply(serialVersionUID,serialVersionUID));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().add(instant,minuteOfHour),"resulting");
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instant,null);
long instant=year().add(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().addWrapField(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
checkLimits(getWrappedField().addWrapField(instant,minuteOfHour),"resulting");
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instant,null);
long instant=year().addWrapField(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
FieldUtils.verifyValueBounds(this,get(instant),dayOfMonth,monthOfYear);
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return getDaysInYearMonth(monthOfYear,dayOfMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().getDaysInYearMonth(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return add(instant,-minuteOfHour);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
if(minuteOfHour==Integer.MIN_VALUE){
return subtract(instant,(long)value);
}
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return FieldUtils.safeAdd(instant,dayOfMonth*serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(serialVersionUID==0||minuteOfHour==0){
return this;
}
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return add(instant,-serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
if(serialVersionUID==Long.MIN_VALUE){
throw new ArithmeticException("Long.MIN_VALUE cannot be negated");
}
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
if(serialVersionUID==Long.MIN_VALUE){
throw new ArithmeticException("Long.MIN_VALUE cannot be negated");
}
return millisOfSecond().add(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
FieldUtils.verifyValueBounds(this,minuteOfHour,getMinimumValue(),getMaximumValueForSet(instant,value));
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==Long.MIN_VALUE){
year=Integer.MIN_VALUE;
}else {
year=ISOChronology.getInstanceUTC().year().get(instant+minuteOfHour+minuteOfHour);
}
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,minuteOfHour);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
FieldUtils.verifyValueBounds(this,minuteOfHour,DateTimeConstants.BCE,DateTimeConstants.CE);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return FieldUtils.safeAdd(instant,FieldUtils.safeMultiply(serialVersionUID,minuteOfHour));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(serialVersionUID==0||minuteOfHour==0){
return instant;
}
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().safeMultiply(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return FieldUtils.safeAdd(instant,FieldUtils.safeMultiply(serialVersionUID,minuteOfHour));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().safeMultiply(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().safeAdd(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getWrappedField().get(instant)>=0){
return value/dayOfMonth;
}else {
return ((value+1)/iDivisor)-1;
}
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
if(dayOfMonth>354){
if(!isLeapYear(year)){
dayOfYear--;
}
}
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
if(dayOfMonth>365){
if(!isLeapYear(year)){
dayOfYear--;
}
}
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getWrappedField().get(instant)>=0){
return value%dayOfMonth;
}else {
return (iDivisor-1)+((value+1)%iDivisor);
}
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant-roundFloor(instant)<=roundCeiling(instant)-instant){
return roundFloor(instant);
}else {
return roundCeiling(instant);
}
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(roundCeiling(instant)-instant<=instant-roundFloor(instant)){
return roundCeiling(instant);
}else {
return roundFloor(instant);
}
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int instant=year().set(0,year);
instant=monthOfYear().add(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getOffset(instant)<=getOffset(instant+3*DateTimeConstants.MILLIS_PER_HOUR)){
return instant;
}
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
dayOfMonth=~i;
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
dayOfMonth=~i;
int instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().getDaysInYearMonth(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
FieldUtils.verifyValueBounds(this,monthOfYear,MIN,minuteOfHour);
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(dayOfMonth>dayOfMonth){
thisDom=maxDom;
}
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant-roundFloor(instant)<roundCeiling(instant)-instant){
return roundFloor(instant);
}else if(diffToCeiling<diffFromFloor){
return roundCeiling(instant);
}else {
if((get(ceiling)&1)==0){
return ceiling;
}
return floor;
}
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(secondOfMinute>secondOfMinute){
dayToUse=maxDay;
}
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int instant=year().getDaysInYearMonth(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
minuteOfHour=(i>=0)?(i+1):~i;
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
boolean instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return ISODateTimeFormat.forFields(new ArrayList<DateTimeFieldType>(),true,true).print(this);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
new ArrayList<DateTimeFieldType>().add(DateTimeFieldType.monthOfYear());
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
new ArrayList<DateTimeFieldType>().add(DateTimeFieldType.dayOfMonth());
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
FieldUtils.verifyValueBounds(this,get(instant),minuteOfHour,dayOfMonth);
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().add(instant,serialVersionUID),"resulting");
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().add(instant,minuteOfHour),"resulting");
long instant=year().add(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instant,null);
checkLimits(getWrappedField().add(instant,minuteOfHour),"resulting");
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instant,null);
checkLimits(getWrappedField().add(instant,minuteOfHour),"resulting");
long instant=year().add(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().add(instant,serialVersionUID),"resulting");
long instant=year().add(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instant,null);
checkLimits(getWrappedField().add(instant,serialVersionUID),"resulting");
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instant,null);
checkLimits(getWrappedField().add(instant,serialVersionUID),"resulting");
long instant=year().add(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return getWrappedField().getMillis(serialVersionUID,instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
checkLimits(instant,null);
return millisOfSecond().getMillis(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return getChronology().year().get(getLocalMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return getChronology().monthOfYear().get(getLocalMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return getChronology().dayOfMonth().get(getLocalMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case DAY_OF_YEAR :

long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case DAY_OF_MONTH :

long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case MINUTE_OF_DAY :

long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case SECOND_OF_DAY :

long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case MILLIS_OF_DAY :

long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return getChronology().millisOfDay().get(getLocalMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return getChronology().hourOfDay().get(getLocalMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return getChronology().minuteOfHour().get(getLocalMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return getChronology().secondOfMinute().get(getLocalMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return getChronology().millisOfSecond().get(getLocalMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

long instant=year().set(0,year);
instant=monthOfYear().set(instant,monthOfYear);
instant=dayOfMonth().set(instant,dayOfMonth);
instant=hourOfDay().set(instant,hourOfDay);
instant=minuteOfHour().set(instant,minuteOfHour);
instant=secondOfMinute().set(instant,secondOfMinute);
return millisOfSecond().set(instant,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.BaseChronology,133
org.joda.time.chrono.BaseChronology,134
org.joda.time.chrono.BaseChronology,135
org.joda.time.chrono.BaseChronology,136
org.joda.time.chrono.BaseChronology,137
org.joda.time.chrono.BaseChronology,138
org.joda.time.chrono.AssembledChronology,131
========
if((base=iBase)!=null&&(iBaseFlags&6)==6){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((base=iBase)!=null&&(iBaseFlags&6)==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((base=iBase)!=null&&(iBaseFlags&5)==6){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((base=iBase)!=null&&(iBaseFlags&5)==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,millisOfDay);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((base=iBase)!=null&&(iBaseFlags&1)==1){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((base=iBase)!=null&&(iBaseFlags&1)==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((base=iBase)!=null&&(iBaseFlags&5)==1){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((base=iBase)!=null&&(iBaseFlags&5)==5){
return base.getDateTimeMillis(serialVersionUID,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((base=iBase)!=null&&(iBaseFlags&1)==1){
return base.getDateTimeMillis(serialVersionUID,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((base=iBase)!=null&&(iBaseFlags&1)==5){
return base.getDateTimeMillis(serialVersionUID,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((base=iBase)!=null&&(iBaseFlags&5)==1){
return base.getDateTimeMillis(serialVersionUID,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(monthOfYear!=2||iBaseFlags!=29){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((base=iBase)!=null&&(iBaseFlags&5)!=5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(monthOfYear!=2&&(iBaseFlags&5)==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((base=iBase)!=null&&iBaseFlags!=29){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((base=iBase)!=null&&iBaseFlags==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((base=iBase)!=null&&(iBaseFlags&5)==29){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((base=iBase)!=null&&iBaseFlags!=5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((base=iBase)!=null&&(iBaseFlags&5)!=29){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((base=iBase)!=null&&iBaseFlags==29){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((base=iBase)!=null&&(iBaseFlags&5)==5){
return base.getZone();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(info.iYear!=year){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((base=iBase)!=null&&info.iYear!=year){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((base=iBase)!=null&&(iBaseFlags&5)==year){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(iBaseFlags==12&&(iBaseFlags&5)==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
base=base.withUTC();
if((base=iBase)!=null&&(iBaseFlags&5)==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(base==null){
throw new IllegalArgumentException("UTC chronology must not be null");
}
if((base=iBase)!=null&&(iBaseFlags&5)==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((base=iBase)!=null&&(iBaseFlags&5)==iBaseFlags){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
org.joda.time.chrono.AssembledChronology,133
org.joda.time.chrono.AssembledChronology,136
========
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&1)==1){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&1)==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&5)==1){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&5)==5){
return base.getDateTimeMillis(serialVersionUID,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&5)==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(serialVersionUID,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&1)==1){
return base.getDateTimeMillis(serialVersionUID,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&1)==1){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(serialVersionUID,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&1)==5){
return base.getDateTimeMillis(serialVersionUID,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&1)==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(serialVersionUID,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&5)==1){
return base.getDateTimeMillis(serialVersionUID,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&5)==1){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(serialVersionUID,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&5)==5){
return base.getDateTimeMillis(serialVersionUID,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(serialVersionUID,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&1)==1){
return base.getDateTimeMillis(serialVersionUID,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(serialVersionUID,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&1)==5){
return base.getDateTimeMillis(serialVersionUID,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(serialVersionUID,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&5)==1){
return base.getDateTimeMillis(serialVersionUID,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(serialVersionUID,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&6)==6){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&6)==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&5)==6){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&5)==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,millisOfDay);
}
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&5)==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,millisOfDay);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if(monthOfYear!=2||iBaseFlags!=29){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&5)!=5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Chronology base;
if(monthOfYear!=2&&(iBaseFlags&5)==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=iBase)!=null&&iBaseFlags!=29){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Chronology base;
if((base=iBase)!=null&&iBaseFlags==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&5)==29){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Chronology base;
if((base=iBase)!=null&&iBaseFlags!=5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&5)!=29){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Chronology base;
if((base=iBase)!=null&&iBaseFlags==29){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&5)==5){
return base.getZone();
}
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if(info.iYear!=year){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=iBase)!=null&&info.iYear!=year){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&5)==year){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Chronology base;
if(iBaseFlags==12&&(iBaseFlags&5)==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(serialVersionUID)<year){
serialVersionUID+=DateTimeConstants.MILLIS_PER_WEEK;
}else if(workWoyYear>year){
workInstant-=DateTimeConstants.MILLIS_PER_WEEK;
}
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&5)==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
serialVersionUID=getYearMonthDayMillis(year,1,iBaseFlags);
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&5)==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
serialVersionUID+=millisOfDay;
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&5)==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
serialVersionUID=getYearMonthDayMillis(year,1,iBaseFlags);
serialVersionUID+=millisOfDay;
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&5)==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&5)==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.set(serialVersionUID,year);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&5)==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(this,year,1,getMaximumValue());
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&5)==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(this,year,0,getMaximumValue());
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&5)==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
if(getWrappedField().get(serialVersionUID)<0){
year=-year;
}
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
base=base.withUTC();
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&5)==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(base==null){
throw new IllegalArgumentException("UTC chronology must not be null");
}
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&5)==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=iBase)!=null&&(iBaseFlags&5)==iBaseFlags){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
return super.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
org.joda.time.chrono.GJChronology,269
org.joda.time.chrono.GJChronology,270
Find no block!
org.joda.time.chrono.GJChronology,279
========
base=base;
super(base,new Object[]{julian,gregorian,cutoverInstant});

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.GJChronology,280
Find no block!
org.joda.time.chrono.GJChronology,105
Find no block!
org.joda.time.chrono.GJChronology,108
Find no block!
org.joda.time.chrono.GJChronology,83
========
return iGregorianField.get(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iJulianField.get(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.get(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().get(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instant,null);
return to.getDateTimeMillis(from.year().get(instant),from.monthOfYear().get(instant),from.dayOfMonth().get(instant),from.millisOfDay().get(instant));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return chrono.getDateTimeMillis(from.year().get(instant),from.monthOfYear().get(instant),from.dayOfMonth().get(instant),from.millisOfDay().get(instant));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return to.dayOfMonth().roundFloor(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return chronology.getDateTimeMillis(from.year().get(instant),from.monthOfYear().get(instant),from.dayOfMonth().get(instant),from.millisOfDay().get(instant));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return from.getZone().convertLocalToUTC(from.getZone().convertUTCToLocal(instant),false,instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return iBase.getDateTimeMillis(from.year().get(instant),from.monthOfYear().get(instant),from.dayOfMonth().get(instant),from.millisOfDay().get(instant));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iCutover=getType().getField(from.withUTC()).add(localInstant,iCutover);
return to.getDateTimeMillis(from.year().get(instant),from.monthOfYear().get(instant),from.dayOfMonth().get(instant),from.millisOfDay().get(instant));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return findMatchingRecurrence(instant).getNameKey();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().roundFloor(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().roundCeiling(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().remainder(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().roundHalfFloor(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().roundHalfCeiling(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().roundHalfEven(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().isLeap(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().getLeapAmount(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getInfo(instant).getNameKey(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getInfo(instant).getOffset(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getInfo(instant).getStandardOffset(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return FieldUtils.safeToInt(getValueAsLong(iCutover,instant));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instant,null);
return getWrappedField().isLeap(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instant,null);
return getWrappedField().getLeapAmount(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().getMinimumValue(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().getMaximumValue(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().getValue(iCutover,instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().getValueAsLong(iCutover,instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getValue(iCutover,addOffset(instant));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getValueAsLong(iCutover,addOffset(instant));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return Integer.toString(get());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.roundFloor(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getAsText(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getAsShortText(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.isLeap(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getLeapAmount(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getMinimumValue(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getMaximumValue(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.roundCeiling(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.roundHalfFloor(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.roundHalfCeiling(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.roundHalfEven(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.remainder(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return new StringBuffer(requirePrinter().estimatePrintedLength()).toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
printTo(new StringBuffer(requirePrinter().estimatePrintedLength()),instant);
return to.getDateTimeMillis(from.year().get(instant),from.monthOfYear().get(instant),from.dayOfMonth().get(instant),from.millisOfDay().get(instant));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getValue(iCutover,instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getValueAsLong(iCutover,instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return julianToGregorianByWeekyear(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return julianToGregorianByYear(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return gregorianToJulianByWeekyear(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return gregorianToJulianByYear(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().getMillis(iCutover,instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().add(instant,iCutover);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.isLeap(iCutover);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getLeapAmount(iCutover);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.remainder(iCutover);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getMinimumValue(iCutover);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getMaximumValue(iCutover);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getChronology().year().get(getLocalMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getChronology().monthOfYear().get(getLocalMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getChronology().dayOfMonth().get(getLocalMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getChronology().millisOfDay().get(getLocalMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getChronology().year().get(getMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getChronology().monthOfYear().get(getMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getChronology().dayOfMonth().get(getMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getChronology().millisOfDay().get(getMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return base.getDateTimeMillis(from.year().get(instant),from.monthOfYear().get(instant),from.dayOfMonth().get(instant),from.millisOfDay().get(instant));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return FieldUtils.safeAdd(instant,FieldUtils.safeMultiply(iCutover,iCutoverMillis));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iGregorianField.get(getMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iGregorianField==null){
throw new IllegalArgumentException("The DateTimeField must not be null");
}
return to.getDateTimeMillis(from.year().get(instant),from.monthOfYear().get(instant),from.dayOfMonth().get(instant),from.millisOfDay().get(instant));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getDaysInYearMonth(getYear(instant),getMonthOfYear(instant,getYear(instant)));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iJulianField.getMinimumValue(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iGregorianField.getMaximumValue(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return add(instant,-iCutover);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iCutover==Long.MIN_VALUE){
throw new ArithmeticException("Long.MIN_VALUE cannot be negated");
}
return to.getDateTimeMillis(from.year().get(instant),from.monthOfYear().get(instant),from.dayOfMonth().get(instant),from.millisOfDay().get(instant));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iGregorianField.isLeap(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iJulianField.isLeap(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iGregorianField.getLeapAmount(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iJulianField.getLeapAmount(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return to.getMinimumValue(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iGregorianField.getDateTimeMillis(from.year().get(instant),from.monthOfYear().get(instant),from.dayOfMonth().get(instant),from.millisOfDay().get(instant));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iJulianField.getDateTimeMillis(from.year().get(instant),from.monthOfYear().get(instant),from.dayOfMonth().get(instant),from.millisOfDay().get(instant));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return to.getMaximumValue(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iJulianField.getMaximumValue(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return FieldUtils.safeAdd(instant,iCutover);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getField().get(getMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getChronology().era().get(getLocalMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getChronology().centuryOfEra().get(getLocalMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getChronology().yearOfEra().get(getLocalMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getChronology().yearOfCentury().get(getLocalMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getChronology().weekyear().get(getLocalMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getChronology().weekOfWeekyear().get(getLocalMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getChronology().dayOfYear().get(getLocalMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getChronology().dayOfWeek().get(getLocalMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getChronology().hourOfDay().get(getLocalMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getChronology().minuteOfHour().get(getLocalMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getChronology().secondOfMinute().get(getLocalMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getChronology().millisOfSecond().get(getLocalMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getChronology().era().get(getMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getChronology().centuryOfEra().get(getMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getChronology().yearOfEra().get(getMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getChronology().yearOfCentury().get(getMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getChronology().weekyear().get(getMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getChronology().weekOfWeekyear().get(getMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getChronology().dayOfYear().get(getMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getChronology().dayOfWeek().get(getMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getChronology().hourOfDay().get(getMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getChronology().minuteOfDay().get(getMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getChronology().minuteOfHour().get(getMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getChronology().secondOfDay().get(getMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getChronology().secondOfMinute().get(getMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getChronology().millisOfSecond().get(getMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return ISODateTimeFormat.forFields(new ArrayList<DateTimeFieldType>(),true,true).print(this);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new ArrayList<DateTimeFieldType>().add(DateTimeFieldType.monthOfYear());
return to.getDateTimeMillis(from.year().get(instant),from.monthOfYear().get(instant),from.dayOfMonth().get(instant),from.millisOfDay().get(instant));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new ArrayList<DateTimeFieldType>().add(DateTimeFieldType.dayOfMonth());
return to.getDateTimeMillis(from.year().get(instant),from.monthOfYear().get(instant),from.dayOfMonth().get(instant),from.millisOfDay().get(instant));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfDay(),millis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfMonth(),days());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return UnsupportedDateTimeField.getInstance(DateTimeFieldType.monthOfYear(),months());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return UnsupportedDateTimeField.getInstance(DateTimeFieldType.year(),years());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return to.monthOfYear();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return to.dayOfMonth();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return to.year();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return to.millisOfDay();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getDurationField().add(instant,iCutover);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instant,null);
return getWrappedField().getMillis(iCutover,instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getMillis(iCutover,addOffset(instant));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iGregorianField.add(instant,iCutover);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.add(instant,iCutover);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getMillis(iCutover,instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.GJChronology,173
========
return getInstance(zone,DEFAULT_CUTOVER,4);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return getInstance(zone,iCutoverInstant,4);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getInstance(DateTimeZone.UTC,DEFAULT_CUTOVER,4);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return getInstance(DateTimeZone.UTC,gregorianCutover,4);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return getInstance(DateTimeZone.getDefault(),DEFAULT_CUTOVER,4);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return getInstance(zone,iCutoverInstant,getMinimumDaysInFirstWeek());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==null){
zone=DateTimeZone.getDefault();
}
return getInstance(zone,gregorianCutover,4);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(zone==getZone()){
return this;
}
return getInstance(zone,gregorianCutover,4);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==null){
zone=DateTimeZone.getDefault();
}
return getInstance(zone,iCutoverInstant,4);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getInstance(getZone(),iCutoverInstant,getMinimumDaysInFirstWeek());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==null){
zone=DateTimeZone.getDefault();
}
return getInstance(zone,iCutoverInstant,getMinimumDaysInFirstWeek());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==getZone()){
return this;
}
return getInstance(zone,iCutoverInstant,getMinimumDaysInFirstWeek());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==getZone()){
return this;
}
return getInstance(zone,iCutoverInstant,4);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==null){
zone=DateTimeZone.getDefault();
}
if(zone==getZone()){
return this;
}
return getInstance(zone,gregorianCutover,4);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==null){
zone=DateTimeZone.getDefault();
}
if(zone==getZone()){
return this;
}
return getInstance(zone,iCutoverInstant,getMinimumDaysInFirstWeek());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==null){
zone=DateTimeZone.getDefault();
}
if(zone==getZone()){
return this;
}
return getInstance(zone,iCutoverInstant,4);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.GJChronology,189
========
if(getZone()==zone){
return this;
}
zone=DateTimeUtils.getZone(zone);
Instant cutoverInstant;
if(gregorianCutover==null){
cutoverInstant=DEFAULT_CUTOVER;
}else {
cutoverInstant=gregorianCutover.toInstant();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
zone=DateTimeUtils.getZone(zone);
Instant cutoverInstant;
if(gregorianCutover==DateTimeUtils.getZone(getZone())){
cutoverInstant=DEFAULT_CUTOVER;
}else {
cutoverInstant=gregorianCutover.toInstant();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone!=null){
return zone;
}
zone=DateTimeUtils.getZone(zone);
Instant cutoverInstant;
if(gregorianCutover==null){
cutoverInstant=DEFAULT_CUTOVER;
}else {
cutoverInstant=gregorianCutover.toInstant();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getChronology().getZone()!=zone){
setChronology(chrono.withZone(newZone));
}
zone=DateTimeUtils.getZone(zone);
Instant cutoverInstant;
if(gregorianCutover==null){
cutoverInstant=DEFAULT_CUTOVER;
}else {
cutoverInstant=gregorianCutover.toInstant();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setChronology(getChronology().withZone(zone));
zone=DateTimeUtils.getZone(zone);
Instant cutoverInstant;
if(gregorianCutover==null){
cutoverInstant=DEFAULT_CUTOVER;
}else {
cutoverInstant=gregorianCutover.toInstant();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setMillis(DateTimeUtils.getZone(getZone()).getMillisKeepLocal(zone,getMillis()));
zone=DateTimeUtils.getZone(zone);
Instant cutoverInstant;
if(gregorianCutover==null){
cutoverInstant=DEFAULT_CUTOVER;
}else {
cutoverInstant=gregorianCutover.toInstant();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iCutover=getChronology().withZone(zone).dayOfMonth().roundFloor(instant);
zone=DateTimeUtils.getZone(zone);
Instant cutoverInstant;
if(gregorianCutover==null){
cutoverInstant=DEFAULT_CUTOVER;
}else {
cutoverInstant=gregorianCutover.toInstant();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
zone=DateTimeUtils.getZone(zone);
Instant cutoverInstant;
if(gregorianCutover==null){
cutoverInstant=DEFAULT_CUTOVER;
}else {
cutoverInstant=gregorianCutover.toInstant();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iCutoverMillis=iCutover;
zone=DateTimeUtils.getZone(zone);
Instant cutoverInstant;
if(gregorianCutover==null){
cutoverInstant=DEFAULT_CUTOVER;
}else {
cutoverInstant=gregorianCutover.toInstant();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
minDaysInFirstWeek=minDaysInFirstWeek;
zone=DateTimeUtils.getZone(zone);
Instant cutoverInstant;
if(gregorianCutover==null){
cutoverInstant=DEFAULT_CUTOVER;
}else {
cutoverInstant=gregorianCutover.toInstant();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
zone=DateTimeUtils.getZone(zone);
Instant cutoverInstant;
if(gregorianCutover!=null){
cutoverInstant=DEFAULT_CUTOVER;
}else {
cutoverInstant=gregorianCutover.toInstant();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
zone=DateTimeUtils.forTimeZone(zone);
Instant cutoverInstant;
if(gregorianCutover==null){
cutoverInstant=DEFAULT_CUTOVER;
}else {
cutoverInstant=gregorianCutover.toInstant();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(iDurationField.getType());
zone=DateTimeUtils.getZone(zone);
Instant cutoverInstant;
if(gregorianCutover==null){
cutoverInstant=DEFAULT_CUTOVER;
}else {
cutoverInstant=gregorianCutover.toInstant();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!iDurationField.isSupported()){
throw new IllegalArgumentException();
}
zone=DateTimeUtils.getZone(zone);
Instant cutoverInstant;
if(gregorianCutover==null){
cutoverInstant=DEFAULT_CUTOVER;
}else {
cutoverInstant=gregorianCutover.toInstant();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iField=iDurationField;
zone=DateTimeUtils.getZone(zone);
Instant cutoverInstant;
if(gregorianCutover==null){
cutoverInstant=DEFAULT_CUTOVER;
}else {
cutoverInstant=gregorianCutover.toInstant();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iConvertByWeekyear=useTimeArithmetic(iDurationField);
zone=DateTimeUtils.getZone(zone);
Instant cutoverInstant;
if(gregorianCutover==null){
cutoverInstant=DEFAULT_CUTOVER;
}else {
cutoverInstant=gregorianCutover.toInstant();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==null){
throw new IllegalArgumentException("The datetime zone must not be null");
}
zone=DateTimeUtils.getZone(zone);
Instant cutoverInstant;
if(gregorianCutover==null){
cutoverInstant=DEFAULT_CUTOVER;
}else {
cutoverInstant=gregorianCutover.toInstant();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(zone==null){
throw new IllegalArgumentException("The datetime zone must not be null");
}
zone=DateTimeUtils.getZone(zone);
Instant cutoverInstant;
if(gregorianCutover!=null){
cutoverInstant=DEFAULT_CUTOVER;
}else {
cutoverInstant=gregorianCutover.toInstant();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
super(iGregorianField.getType());
zone=DateTimeUtils.getZone(zone);
Instant cutoverInstant;
if(gregorianCutover==null){
cutoverInstant=DEFAULT_CUTOVER;
}else {
cutoverInstant=gregorianCutover.toInstant();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!iGregorianField.isSupported()){
throw new IllegalArgumentException();
}
zone=DateTimeUtils.getZone(zone);
Instant cutoverInstant;
if(gregorianCutover==null){
cutoverInstant=DEFAULT_CUTOVER;
}else {
cutoverInstant=gregorianCutover.toInstant();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iField=iGregorianField;
zone=DateTimeUtils.getZone(zone);
Instant cutoverInstant;
if(gregorianCutover==null){
cutoverInstant=DEFAULT_CUTOVER;
}else {
cutoverInstant=gregorianCutover.toInstant();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iDurationField=iDurationField;
zone=DateTimeUtils.getZone(zone);
Instant cutoverInstant;
if(gregorianCutover==null){
cutoverInstant=DEFAULT_CUTOVER;
}else {
cutoverInstant=gregorianCutover.toInstant();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iRangeDurationField=iDurationField;
zone=DateTimeUtils.getZone(zone);
Instant cutoverInstant;
if(gregorianCutover==null){
cutoverInstant=DEFAULT_CUTOVER;
}else {
cutoverInstant=gregorianCutover.toInstant();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.GJChronology,191
org.joda.time.chrono.GJChronology,192
org.joda.time.chrono.GJChronology,194
org.joda.time.chrono.GJChronology,198
Find no block!
org.joda.time.chrono.GJChronology,199
UNKNOWN ASTNode type : catch (ArrayIndexOutOfBoundsException e) {
  throw new IllegalArgumentException("Invalid min days in first week: " + minDaysInFirstWeek);
}

UNKNOWN ASTNode type : catch (ArrayIndexOutOfBoundsException e) {
  throw new IllegalArgumentException("Invalid min days in first week: " + minDaysInFirstWeek);
}

UNKNOWN ASTNode type : catch (ArrayIndexOutOfBoundsException e) {
  throw new IllegalArgumentException("Invalid min days in first week: " + minDaysInFirstWeek);
}

UNKNOWN ASTNode type : catch (ArrayIndexOutOfBoundsException e) {
  throw new IllegalArgumentException("Invalid min days in first week: " + minDaysInFirstWeek);
}

========
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return UTC;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(curOffset==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextOffset==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(curStdOffset==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextStdOffset==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offset==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
UNKNOWN ASTNode type : catch (Exception e) {
  RuleSet rs=ruleSets.get(zone.iRules);
  if (rs == null) {
    throw new IllegalArgumentException("Rules not found: " + zone.iRules);
  }
  rs.addRecurring(builder,zone.iFormat);
}

UNKNOWN ASTNode type : catch (Exception e) {
  RuleSet rs=ruleSets.get(zone.iRules);
  if (rs == null) {
    throw new IllegalArgumentException("Rules not found: " + zone.iRules);
  }
  rs.addRecurring(builder,zone.iFormat);
}

UNKNOWN ASTNode type : catch (Exception e) {
  RuleSet rs=ruleSets.get(zone.iRules);
  if (rs == null) {
    throw new IllegalArgumentException("Rules not found: " + zone.iRules);
  }
  rs.addRecurring(builder,zone.iFormat);
}

UNKNOWN ASTNode type : catch (Exception e) {
  RuleSet rs=ruleSets.get(zone.iRules);
  if (rs == null) {
    throw new IllegalArgumentException("Rules not found: " + zone.iRules);
  }
  rs.addRecurring(builder,zone.iFormat);
}

========
for(int i=chronos.size();--i>=size();){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=chronos.size();--i>=minDaysInFirstWeek;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(zone.previousTransition(iCutover)==iCutover&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=chronos.size();--i>=0;){
millis=zone.previousTransition(iCutover);
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=chronos.size();--i>=0;){
if(iCutover-1!=iCutover){
System.out.println("*r* Error in "+zone.getID());
return false;
}
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=chronos.size();--i>=0;){
millis=zone.previousTransition(iCutover);
if(iCutover-1!=iCutover){
System.out.println("*r* Error in "+zone.getID());
return false;
}

chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=chronos.size();--i>=0;){
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chronos.add(chrono);
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iJulianChronology=iJulianChronology;
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iGregorianChronology=iGregorianChronology;
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iCutoverInstant=cutoverInstant;
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iJulianChronology.getMinimumDaysInFirstWeek()!=iGregorianChronology.getMinimumDaysInFirstWeek()){
throw new IllegalArgumentException();
}
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=chronos.size();--i>=0;){
lastType=iGregorianField.getDurationField().getType();
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
try{
chrono=chronos[minDaysInFirstWeek-1];
}catch (ArrayIndexOutOfBoundsException e) {
  throw new IllegalArgumentException("Invalid min days in first week: " + minDaysInFirstWeek);
}

for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chronos[leapYears.index];
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
i=~i;
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
i=(i>=0)?(i+1):~i;
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==getZone()){
return this;
}
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iCutover>Long.MIN_VALUE){
return prev-1;
}
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
i=minDaysInFirstWeek;
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=cCache.get(zone);
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
i=DateTimeUtils.getZone(zone);
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chronos[minDaysInFirstWeek-1]=chrono;
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chrono);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(r.iName,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chronos!=null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(chronos==null){
field=null;
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ArrayList<GJChronology> chronos=cCache.get(i);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ArrayList<GJChronology> chronos=cCache.get(zone);
if(minDaysInFirstWeek==0){
return DateTimeZone.UTC;
}
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ArrayList<GJChronology> chronos=cCache.get(new PeriodType(null,type.iTypes,null));
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ArrayList<GJChronology> chronos=cCache.get(iCutover);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(gregorianCutover==null){
throw new IllegalArgumentException("The instant must not be null");
}
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(get()<minDaysInFirstWeek){
return -1;
}else if(thisValue>otherValue){
return 1;
}else {
return 0;
}
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ArrayList<GJChronology> chronos=cCache.get(Calendar.ERA);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getWrappedField().get(iCutover)<=0){
year=1-year;
}
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getWrappedField().get(iCutover)==0){
value=getMaximumValue();
}
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(minDaysInFirstWeek==0){
return iCutover;
}
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(minDaysInFirstWeek-chrono.dayOfWeek().get(iCutover)!=0){
if(iConvertByWeekyear){
if(daysToAdd<0){
daysToAdd+=7;
}
}else {
if(daysToAdd>0){
daysToAdd-=7;
}
}
iCutover=chrono.dayOfWeek().add(instant,daysToAdd);
}
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getWrappedField().get(iCutover)>=0){
return value/minDaysInFirstWeek;
}else {
return ((value+1)/iDivisor)-1;
}
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iCutover!=iCutover){
throw new IllegalArgumentException("The addition exceeded the boundaries of LocalTime");
}
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getWrappedField().get(iCutover)>=0){
return value%minDaysInFirstWeek;
}else {
return (iDivisor-1)+((value+1)%iDivisor);
}
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(r.iName,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone!=null){
return zone;
}
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(minDaysInFirstWeek>65535){
throw new UnsupportedOperationException("String pool is too large");
}
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(zone!=null){
iCutoverMillis=zone.getMillisKeepLocal(DateTimeZone.UTC,instantMillis);
}
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setTime(DateTimeUtils.getInstantMillis(gregorianCutover));
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ArrayList<GJChronology> chronos=cCache.getChronology(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iCutover=chrono.set(this,instant);
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
found=true;
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
zone=DateTimeUtils.getZone(zone);
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
chrono=chrono.withZone(zone);
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chrono.withZone(zone);
ArrayList<GJChronology> chronos=cCache.getChronology(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(System.getSecurityManager()!=null){
sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
}
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==null){
throw new IllegalArgumentException("The datetime zone must not be null");
}
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
synchronized(DateTimeZone.class){
zone=zone;
}
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(zone==null){
throw new IllegalArgumentException("The datetime zone must not be null");
}
synchronized(DateTimeZone.class){
zone=zone;
}
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iCutover=chrono.dayOfMonth().roundFloor(instant);
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos!=null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(zone==null){
temp=UTC;
}
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
zone=zone=zone;
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
i=(i>=0)?(i+1):~i;
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iCutover<iCutover){
instant=end;
}
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
zone=DateTimeZone.UTC;
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
offset=0;
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
zone=DateTimeZone.UTC;
offset=0;

chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
zone=DateTimeZone.UTC;
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iDurationField=remainderField.iRangeField;
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
i=(getWrappedField().getMinimumValue()>=0)?i/minDaysInFirstWeek=remainderField.iDivisor:((i+1)/divisor-1);
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
minDaysInFirstWeek=(getWrappedField().getMaximumValue()>=0)?j/minDaysInFirstWeek=remainderField.iDivisor:((j+1)/divisor-1);
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=0){
if(iCutover>Long.MIN_VALUE){
return instant-1;
}
return instant;
}
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
i=~i;
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
i=minDaysInFirstWeek;
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
zone=DateTimeZone.UTC;
offset=0;
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
zone=DateTimeZone.UTC;
zone=DateTimeZone.UTC;
offset=0;

chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
offset=0;
zone=DateTimeZone.UTC;
offset=0;

chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
offset=0;
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
zone=DateTimeZone.UTC;
offset=0;

chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
zone=DateTimeZone.UTC;
offset=0;
zone=DateTimeZone.UTC;
offset=0;

chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
zone=DateTimeZone.UTC;
offset=0;
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
zone=DateTimeZone.UTC;
zone=DateTimeZone.UTC;
offset=0;

chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
offset=0;
zone=DateTimeZone.UTC;
offset=0;

chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
zone=DateTimeZone.UTC;
offset=0;
zone=DateTimeZone.UTC;
offset=0;

chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case SECONDS_MILLIS :

ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(gregorianCutover==null){
throw new IllegalArgumentException("The instant must not be null");
}
if(get()<minDaysInFirstWeek){
return -1;
}else if(thisValue>otherValue){
return 1;
}else {
return 0;
}
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.GJChronology,200
org.joda.time.chrono.GJChronology,201
org.joda.time.chrono.GJChronology,202
org.joda.time.chrono.GJChronology,204
org.joda.time.chrono.GJChronology,205
org.joda.time.chrono.GJChronology,206
org.joda.time.chrono.GJChronology,209
org.joda.time.chrono.GJChronology,213
UNKNOWN ASTNode type : catch (IllegalFieldValueException ex) {
  if (monthOfYear != 2 || dayOfMonth != 29) {
    throw ex;
  }
  instant=iGregorianChronology.getDateTimeMillis(year,monthOfYear,28,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
  if (instant >= iCutoverMillis) {
    throw ex;
  }
}

========
if(zone!=DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(chronoZone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new CopticChronology(LimitChronology.getInstance(chrono,new DateTime(1,1,1,0,0,0,0,chrono),null),null,minDaysInFirstWeek);
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new EthiopicChronology(LimitChronology.getInstance(chrono,new DateTime(1,1,1,0,0,0,0,chrono),null),null,minDaysInFirstWeek);
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==null){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(zone!=null){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
zone=DateTimeUtils.getZone(zone);
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
setTime(DateTimeUtils.getInstantMillis(gregorianCutover));
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iCutover-=zone.getOffsetFromLocal(iCutover);
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono!=null&&chrono.getZone()==zone){
return chrono;
}
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(System.getSecurityManager()!=null){
sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
}
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
iChronology=DateTimeUtils.getInstantChronology(gregorianCutover);
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
iStartMillis=DateTimeUtils.getInstantMillis(gregorianCutover);
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
checkInterval(iCutoverMillis,iCutoverMillis);
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
iChronology=DateTimeUtils.getInstantChronology(gregorianCutover);
iStartMillis=DateTimeUtils.getInstantMillis(gregorianCutover);
checkInterval(iCutoverMillis,iCutoverMillis);

chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(UTC==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.GJChronology,214
org.joda.time.chrono.GJChronology,219
org.joda.time.chrono.GJChronology,220
org.joda.time.chrono.GJChronology,226
UNKNOWN ASTNode type : catch (IllegalFieldValueException ex) {
  if (monthOfYear != 2 || dayOfMonth != 29) {
    throw ex;
  }
  instant=iGregorianChronology.getDateTimeMillis(year,monthOfYear,28,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
  if (instant >= iCutoverMillis) {
    throw ex;
  }
}

========
chronos.add(chrono);
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(gregorianCutover==null){
cutoverInstant=DEFAULT_CUTOVER;
}else {
cutoverInstant=gregorianCutover.toInstant();
}
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(zone!=DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(chronoZone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
iGregorianField.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
iJulianField.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
try{
chrono=chronos[minDaysInFirstWeek-1];
}catch (ArrayIndexOutOfBoundsException e) {
  throw new IllegalArgumentException("Invalid min days in first week: " + minDaysInFirstWeek);
}

if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
out.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone!=null){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(zone==null){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.get(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.getInstance(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
iCutover=super.add(instant,minDaysInFirstWeek);
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.forTimeZone(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
if(chrono!=null){
return chrono;
}
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
setTime(DateTimeUtils.getInstantMillis(gregorianCutover));
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iCutover-=zone.getOffsetFromLocal(iCutover);
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
super(iDurationField.getType());
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
if(!iDurationField.isSupported()){
throw new IllegalArgumentException();
}
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
iField=iDurationField;
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
zone=zone;
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
new ArrayList<DateTimeFieldType>().add(DateTimeFieldType.dayOfMonth());
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iCutover=chrono.dayOfMonth().roundFloor(instant);
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
super(iGregorianField.getType());
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
if(!iGregorianField.isSupported()){
throw new IllegalArgumentException();
}
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
iField=iGregorianField;
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
zone=zone;
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
iDurationField=iDurationField;
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iRangeDurationField=iDurationField;
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iDurationField=iDurationField;
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
iChronology=DateTimeUtils.getInstantChronology(gregorianCutover);
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
iStartMillis=DateTimeUtils.getInstantMillis(gregorianCutover);
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
checkInterval(iCutoverMillis,iCutoverMillis);
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
iChronology=DateTimeUtils.getInstantChronology(gregorianCutover);
iStartMillis=DateTimeUtils.getInstantMillis(gregorianCutover);
checkInterval(iCutoverMillis,iCutoverMillis);

chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chrono=selectChronology(chrono);
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
if((iCutover^iCutover+zone.getOffset(iCutover))<0&&(instant^zone.getOffset(iCutover))>=0){
zone=DateTimeZone.UTC;
offset=0;
adjustedInstant=instant;
}
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().add(iCutover,minDaysInFirstWeek),"resulting");
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
iCutover+=minDaysInFirstWeek;
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iCutover=chrono.millisOfDay().add(next,minDaysInFirstWeek);
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iCutover=setDayOfMonthNext(chrono,next);
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iCutover=chrono.millisOfDay().add(prev,minDaysInFirstWeek);
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iCutover=setDayOfMonthPrevious(chrono,prev);
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
super();
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
minDaysInFirstWeek=minDaysInFirstWeek;
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
minDaysInFirstWeek=minDaysInFirstWeek;
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
out.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(UTC==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chrono=selectChronology(chrono);
if((iCutover^iCutover+zone.getOffset(iCutover))<0&&(instant^zone.getOffset(iCutover))>=0){
zone=DateTimeZone.UTC;
offset=0;
adjustedInstant=instant;
}
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
iCutover=super.add(instant,iCutover);
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().add(iCutover,iCutover),"resulting");
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.GJChronology,227
Find no block!
org.joda.time.chrono.GJChronology,228
========
if(chronos==null){
iFixedOffsetCache=new HashMap<String,SoftReference<DateTimeZone>>();
}
synchronized(cCache){
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);
}
return chrono;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
synchronized(cCache){
try{
chrono=chronos[minDaysInFirstWeek-1];
}catch (ArrayIndexOutOfBoundsException e) {
  throw new IllegalArgumentException("Invalid min days in first week: " + minDaysInFirstWeek);
}

ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);
}
return chrono;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==null){
zone=DateTimeZone.getDefault();
}
synchronized(cCache){
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);
}
return chrono;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(zone==null){
zone=DateTimeZone.getDefault();
}
synchronized(cCache){
try{
chrono=chronos[minDaysInFirstWeek-1];
}catch (ArrayIndexOutOfBoundsException e) {
  throw new IllegalArgumentException("Invalid min days in first week: " + minDaysInFirstWeek);
}

ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);
}
return chrono;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
synchronized(cCache){
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);
}
if(zone==null){
zone=DateTimeZone.getDefault();
}
return chrono;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
synchronized(cCache){
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);
}
if(zone==getZone()){
return this;
}
return chrono;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone!=null){
return zone;
}
synchronized(cCache){
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);
}
return chrono;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(System.getSecurityManager()!=null){
sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
}
synchronized(cCache){
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);
}
return chrono;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==null){
throw new IllegalArgumentException("The datetime zone must not be null");
}
synchronized(cCache){
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);
}
return chrono;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
synchronized(cCache){
zone=zone;
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);
}
return chrono;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
synchronized(cCache){
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);
}
return UTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
synchronized(cCache){
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);
}
new ArrayList<DateTimeFieldType>().add(DateTimeFieldType.monthOfYear());
return chrono;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
synchronized(cCache){
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);
}
new ArrayList<DateTimeFieldType>().add(DateTimeFieldType.dayOfMonth());
return chrono;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
synchronized(cCache){
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);
}
return MAX_VALUE;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
synchronized(cCache){
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);
}
if(zone==null){
zone=DateTimeZone.getDefault();
}
if(zone==getZone()){
return this;
}
return chrono;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
synchronized(cCache){
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);
}
if(iCutover==0||minDaysInFirstWeek==0){
return iCutover;
}
return chrono;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
synchronized(cCache){
ArrayList<GJChronology> chronos=cCache.get(zone);
if(chronos==null){
chronos=new ArrayList<GJChronology>(2);
cCache.put(zone,chronos);
}else {
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}
}
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}
chronos.add(chrono);
}
return MIN_VALUE;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.GJChronology,291
========
if((base=getBase())==null){
return base.getZone();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(base==null){
return base.getZone();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(base!=null){
return base.getZone();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
base=base.withUTC();
if((base=getBase())!=null){
return base.getZone();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(base==null){
throw new IllegalArgumentException("UTC chronology must not be null");
}
if((base=getBase())!=null){
return base.getZone();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((base=getBase())!=DateTimeUtils.getZone(getZone())){
return base.getZone();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((base=getBase())==DateTimeUtils.getZone(getZone())){
return base.getZone();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((base=getBase())!=false){
return base.getZone();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((base=getBase())==false){
return base.getZone();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getZone()!=null){
return base.getZone();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.GJChronology,294
========
Chronology base;
if((base=getBase())==null){
return base.getZone();
}
return DateTimeZone.UTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Chronology base;
if(base==null){
return base.getZone();
}
return DateTimeZone.UTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if(base!=null){
return base.getZone();
}
return DateTimeZone.UTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
base=base.withUTC();
Chronology base;
if((base=getBase())!=null){
return base.getZone();
}
return DateTimeZone.UTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(base==null){
throw new IllegalArgumentException("UTC chronology must not be null");
}
Chronology base;
if((base=getBase())!=null){
return base.getZone();
}
return DateTimeZone.UTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getZone();
}
if(iGregorianField==null){
return null;
}
return DateTimeZone.UTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getZone();
}
if(iGregorianField instanceof StrictDateTimeField){
field=((StrictDateTimeField)field).getWrappedField();
}
return DateTimeZone.UTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getZone();
}
return iCutoverMillis;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getZone();
}
return DateTimeConstants.MILLIS_PER_HOUR;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getZone();
}
return DateTimeConstants.MILLIS_PER_MINUTE;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getZone();
}
return DateTimeConstants.MILLIS_PER_SECOND;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getZone();
}
checkLimits(iCutover,"resulting");
return DateTimeZone.UTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getZone();
}
checkLimits(iCutover,null);
return DateTimeZone.UTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getZone();
}
iCutover-=getZone().getOffsetFromLocal(iCutover);
return DateTimeZone.UTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getZone();
}
if(getZone().getOffsetFromLocal(iCutover)!=getZone().getOffset(iCutover)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return DateTimeZone.UTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getZone();
}
iCutover=getType().getField(base.withUTC()).add(localInstant,iCutover);
return DateTimeZone.UTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getZone();
}
new GregorianCalendar(getZone().toTimeZone()).setTime(toDate());
return DateTimeZone.UTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.GJChronology,305
org.joda.time.chrono.GJChronology,315
UNKNOWN ASTNode type : catch (IllegalArgumentException ex) {
  zone=DateTimeZone.getDefault();
}

UNKNOWN ASTNode type : catch (IllegalArgumentException ex) {
  zone=DateTimeZone.getDefault();
}

========
if(zone==DateTimeZone.UTC){
zone=DateTimeZone.getDefault();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(newZone==null){
zone=DateTimeZone.getDefault();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone!=null){
zone=DateTimeZone.getDefault();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(temp==null){
zone=DateTimeZone.getDefault();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(UTC==null){
zone=DateTimeZone.getDefault();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
zone=DateTimeUtils.getZone(zone);
if(zone==null){
zone=DateTimeZone.getDefault();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(chronoZone==null){
zone=DateTimeZone.getDefault();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==null){
zone=DateTimeZone.getDefault();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iCutover-=zone.getOffsetFromLocal(iCutover);
if(zone==null){
zone=DateTimeZone.getDefault();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.GJChronology,318
UNKNOWN ASTNode type : catch (IllegalArgumentException ex) {
  zone=DateTimeZone.getDefault();
}

========
if(getZone()==zone){
return this;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(newZone==getZone()){
return this;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone!=getZone()){
return this;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(zone==getZone()){
return this;
}
if(zone==getZone()){
return this;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(dtz==getZone()){
return this;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==getZone()){
return this;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(tz==getZone()){
return this;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(UTC==getZone()){
return this;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.GJChronology,319
org.joda.time.chrono.GJChronology,395
org.joda.time.chrono.GJChronology,404
org.joda.time.chrono.GJChronology,473
org.joda.time.chrono.GJChronology,475
org.joda.time.chrono.GJChronology,476
org.joda.time.chrono.GJChronology,477
========
GregorianChronology gregorian=(GregorianChronology)params[1];
Instant cutoverInstant=(Instant)params[2];
gregorian=gregorian;
iCutoverMillis=cutoverInstant.getMillis();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(getBase()!=null){
return ;
}
GregorianChronology gregorian=(GregorianChronology)params[1];
Instant cutoverInstant=(Instant)params[2];
iCutoverMillis=cutoverInstant.getMillis();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(getBase()!=null){
return ;
}
GregorianChronology gregorian=(GregorianChronology)params[1];
Instant cutoverInstant=(Instant)params[2];
gregorian=gregorian;
iCutoverMillis=cutoverInstant.getMillis();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
setMillis(getMillis());
GregorianChronology gregorian=(GregorianChronology)params[1];
Instant cutoverInstant=(Instant)params[2];
iCutoverMillis=cutoverInstant.getMillis();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
GregorianChronology gregorian=(GregorianChronology)params[1];
Instant cutoverInstant=(Instant)params[2];
if(julian.getMinimumDaysInFirstWeek()!=gregorian.getMinimumDaysInFirstWeek()){
throw new IllegalArgumentException();
}
iCutoverMillis=cutoverInstant.getMillis();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.copyFieldsFrom(gregorian);
GregorianChronology gregorian=(GregorianChronology)params[1];
Instant cutoverInstant=(Instant)params[2];
iCutoverMillis=cutoverInstant.getMillis();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
GregorianChronology gregorian=(GregorianChronology)params[1];
Instant cutoverInstant=(Instant)params[2];
checkYearsAndMonths("Weeks");
iCutoverMillis=cutoverInstant.getMillis();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iCutoverMillis+=((long)getMinutes())*DateTimeConstants.MILLIS_PER_MINUTE;
GregorianChronology gregorian=(GregorianChronology)params[1];
Instant cutoverInstant=(Instant)params[2];
iCutoverMillis=cutoverInstant.getMillis();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
GregorianChronology gregorian=(GregorianChronology)params[1];
Instant cutoverInstant=(Instant)params[2];
checkYearsAndMonths("Days");
iCutoverMillis=cutoverInstant.getMillis();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
GregorianChronology gregorian=(GregorianChronology)params[1];
Instant cutoverInstant=(Instant)params[2];
checkYearsAndMonths("Hours");
iCutoverMillis=cutoverInstant.getMillis();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
GregorianChronology gregorian=(GregorianChronology)params[1];
Instant cutoverInstant=(Instant)params[2];
checkYearsAndMonths("Duration");
iCutoverMillis=cutoverInstant.getMillis();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iCutoverMillis+=(((long)getMinutes())*((long)DateTimeConstants.MILLIS_PER_MINUTE));
GregorianChronology gregorian=(GregorianChronology)params[1];
Instant cutoverInstant=(Instant)params[2];
iCutoverMillis=cutoverInstant.getMillis();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.weekyear=new ImpreciseCutoverField(julian.weekyear(),fields.weekyear,null,iCutoverMillis,true);
GregorianChronology gregorian=(GregorianChronology)params[1];
Instant cutoverInstant=(Instant)params[2];
iCutoverMillis=cutoverInstant.getMillis();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyearOfCentury=new ImpreciseCutoverField(julian.weekyearOfCentury(),fields.weekyearOfCentury,fields.weekyears,iCutoverMillis);
GregorianChronology gregorian=(GregorianChronology)params[1];
Instant cutoverInstant=(Instant)params[2];
iCutoverMillis=cutoverInstant.getMillis();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyears=fields.weekyear.getDurationField();
GregorianChronology gregorian=(GregorianChronology)params[1];
Instant cutoverInstant=(Instant)params[2];
iCutoverMillis=cutoverInstant.getMillis();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyear=new ImpreciseCutoverField(julian.weekyear(),fields.weekyear,null,iCutoverMillis,true);
fields.weekyearOfCentury=new ImpreciseCutoverField(julian.weekyearOfCentury(),fields.weekyearOfCentury,fields.weekyears,iCutoverMillis);
GregorianChronology gregorian=(GregorianChronology)params[1];
Instant cutoverInstant=(Instant)params[2];
iCutoverMillis=cutoverInstant.getMillis();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyear=new ImpreciseCutoverField(julian.weekyear(),fields.weekyear,null,iCutoverMillis,true);
fields.weekyears=fields.weekyear.getDurationField();
GregorianChronology gregorian=(GregorianChronology)params[1];
Instant cutoverInstant=(Instant)params[2];
iCutoverMillis=cutoverInstant.getMillis();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyearOfCentury=new ImpreciseCutoverField(julian.weekyearOfCentury(),fields.weekyearOfCentury,fields.weekyears,iCutoverMillis);
fields.weekyears=fields.weekyear.getDurationField();
GregorianChronology gregorian=(GregorianChronology)params[1];
Instant cutoverInstant=(Instant)params[2];
iCutoverMillis=cutoverInstant.getMillis();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyear=new ImpreciseCutoverField(julian.weekyear(),fields.weekyear,null,iCutoverMillis,true);
fields.weekyearOfCentury=new ImpreciseCutoverField(julian.weekyearOfCentury(),fields.weekyearOfCentury,fields.weekyears,iCutoverMillis);
fields.weekyears=fields.weekyear.getDurationField();
GregorianChronology gregorian=(GregorianChronology)params[1];
Instant cutoverInstant=(Instant)params[2];
iCutoverMillis=cutoverInstant.getMillis();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
org.joda.time.chrono.GJChronology,478
========
iGregorianChronology=gregorian;
Instant cutoverInstant=(Instant)params[2];
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
setMillis(getMillis());
Instant cutoverInstant=(Instant)params[2];
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.weekyear=new ImpreciseCutoverField(julian.weekyear(),fields.weekyear,null,iCutoverMillis,true);
Instant cutoverInstant=(Instant)params[2];
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyearOfCentury=new ImpreciseCutoverField(julian.weekyearOfCentury(),fields.weekyearOfCentury,fields.weekyears,iCutoverMillis);
Instant cutoverInstant=(Instant)params[2];
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyears=fields.weekyear.getDurationField();
Instant cutoverInstant=(Instant)params[2];
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyear=new ImpreciseCutoverField(julian.weekyear(),fields.weekyear,null,iCutoverMillis,true);
fields.weekyearOfCentury=new ImpreciseCutoverField(julian.weekyearOfCentury(),fields.weekyearOfCentury,fields.weekyears,iCutoverMillis);
Instant cutoverInstant=(Instant)params[2];
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyear=new ImpreciseCutoverField(julian.weekyear(),fields.weekyear,null,iCutoverMillis,true);
fields.weekyears=fields.weekyear.getDurationField();
Instant cutoverInstant=(Instant)params[2];
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyearOfCentury=new ImpreciseCutoverField(julian.weekyearOfCentury(),fields.weekyearOfCentury,fields.weekyears,iCutoverMillis);
fields.weekyears=fields.weekyear.getDurationField();
Instant cutoverInstant=(Instant)params[2];
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyear=new ImpreciseCutoverField(julian.weekyear(),fields.weekyear,null,iCutoverMillis,true);
fields.weekyearOfCentury=new ImpreciseCutoverField(julian.weekyearOfCentury(),fields.weekyearOfCentury,fields.weekyears,iCutoverMillis);
fields.weekyears=fields.weekyear.getDurationField();
Instant cutoverInstant=(Instant)params[2];
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Instant cutoverInstant=(Instant)params[2];
if(julian.getMinimumDaysInFirstWeek()!=gregorian.getMinimumDaysInFirstWeek()){
throw new IllegalArgumentException();
}
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.copyFieldsFrom(gregorian);
Instant cutoverInstant=(Instant)params[2];
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.copyFieldsFrom(gregorian);
Instant cutoverInstant=(Instant)params[2];
if(julian.getMinimumDaysInFirstWeek()!=gregorian.getMinimumDaysInFirstWeek()){
throw new IllegalArgumentException();
}
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Instant cutoverInstant=(Instant)params[2];
checkYearsAndMonths("Weeks");
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iCutoverMillis+=((long)getMinutes())*DateTimeConstants.MILLIS_PER_MINUTE;
Instant cutoverInstant=(Instant)params[2];
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Instant cutoverInstant=(Instant)params[2];
checkYearsAndMonths("Days");
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Instant cutoverInstant=(Instant)params[2];
checkYearsAndMonths("Hours");
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Instant cutoverInstant=(Instant)params[2];
checkYearsAndMonths("Duration");
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iCutoverMillis+=(((long)getMinutes())*((long)DateTimeConstants.MILLIS_PER_MINUTE));
Instant cutoverInstant=(Instant)params[2];
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.GJChronology,480
========
iCutoverInstant=cutoverInstant;
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
iGregorianChronology=gregorian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
setMillis(getMillis());
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
iGregorianChronology=gregorian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(julian.getMinimumDaysInFirstWeek()!=gregorian.getMinimumDaysInFirstWeek()){
throw new IllegalArgumentException();
}
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
iGregorianChronology=gregorian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.copyFieldsFrom(gregorian);
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
iGregorianChronology=gregorian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(julian.getMinimumDaysInFirstWeek()!=gregorian.getMinimumDaysInFirstWeek()){
throw new IllegalArgumentException();
}
fields.copyFieldsFrom(gregorian);
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
iGregorianChronology=gregorian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
iGregorianChronology=monthOfYear;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.weekyear=new ImpreciseCutoverField(julian.weekyear(),fields.weekyear,null,iCutoverMillis,true);
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
iGregorianChronology=gregorian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyearOfCentury=new ImpreciseCutoverField(julian.weekyearOfCentury(),fields.weekyearOfCentury,fields.weekyears,iCutoverMillis);
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
iGregorianChronology=gregorian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyears=fields.weekyear.getDurationField();
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
iGregorianChronology=gregorian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyear=new ImpreciseCutoverField(julian.weekyear(),fields.weekyear,null,iCutoverMillis,true);
fields.weekyearOfCentury=new ImpreciseCutoverField(julian.weekyearOfCentury(),fields.weekyearOfCentury,fields.weekyears,iCutoverMillis);
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
iGregorianChronology=gregorian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyear=new ImpreciseCutoverField(julian.weekyear(),fields.weekyear,null,iCutoverMillis,true);
fields.weekyears=fields.weekyear.getDurationField();
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
iGregorianChronology=gregorian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyearOfCentury=new ImpreciseCutoverField(julian.weekyearOfCentury(),fields.weekyearOfCentury,fields.weekyears,iCutoverMillis);
fields.weekyears=fields.weekyear.getDurationField();
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
iGregorianChronology=gregorian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyear=new ImpreciseCutoverField(julian.weekyear(),fields.weekyear,null,iCutoverMillis,true);
fields.weekyearOfCentury=new ImpreciseCutoverField(julian.weekyearOfCentury(),fields.weekyearOfCentury,fields.weekyears,iCutoverMillis);
fields.weekyears=fields.weekyear.getDurationField();
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
iGregorianChronology=gregorian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
iGregorianChronology=centuryOfEra;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
fields.years=fields.year.getDurationField();
iGregorianChronology=gregorian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
fields.yearOfEra=new ImpreciseCutoverField(julian.yearOfEra(),fields.yearOfEra,fields.years,iCutoverMillis);
iGregorianChronology=gregorian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
fields.yearOfCentury=new ImpreciseCutoverField(julian.yearOfCentury(),fields.yearOfCentury,fields.years,iCutoverMillis);
iGregorianChronology=gregorian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
fields.centuryOfEra=new ImpreciseCutoverField(julian.centuryOfEra(),fields.centuryOfEra,iCutoverMillis);
iGregorianChronology=gregorian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
fields.years=fields.year.getDurationField();
fields.yearOfEra=new ImpreciseCutoverField(julian.yearOfEra(),fields.yearOfEra,fields.years,iCutoverMillis);
iGregorianChronology=gregorian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
fields.years=fields.year.getDurationField();
fields.yearOfCentury=new ImpreciseCutoverField(julian.yearOfCentury(),fields.yearOfCentury,fields.years,iCutoverMillis);
iGregorianChronology=gregorian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
fields.years=fields.year.getDurationField();
fields.centuryOfEra=new ImpreciseCutoverField(julian.centuryOfEra(),fields.centuryOfEra,iCutoverMillis);
iGregorianChronology=gregorian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
fields.yearOfEra=new ImpreciseCutoverField(julian.yearOfEra(),fields.yearOfEra,fields.years,iCutoverMillis);
fields.yearOfCentury=new ImpreciseCutoverField(julian.yearOfCentury(),fields.yearOfCentury,fields.years,iCutoverMillis);
iGregorianChronology=gregorian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
fields.yearOfEra=new ImpreciseCutoverField(julian.yearOfEra(),fields.yearOfEra,fields.years,iCutoverMillis);
fields.centuryOfEra=new ImpreciseCutoverField(julian.centuryOfEra(),fields.centuryOfEra,iCutoverMillis);
iGregorianChronology=gregorian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
fields.yearOfCentury=new ImpreciseCutoverField(julian.yearOfCentury(),fields.yearOfCentury,fields.years,iCutoverMillis);
fields.centuryOfEra=new ImpreciseCutoverField(julian.centuryOfEra(),fields.centuryOfEra,iCutoverMillis);
iGregorianChronology=gregorian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
fields.years=fields.year.getDurationField();
fields.yearOfEra=new ImpreciseCutoverField(julian.yearOfEra(),fields.yearOfEra,fields.years,iCutoverMillis);
fields.yearOfCentury=new ImpreciseCutoverField(julian.yearOfCentury(),fields.yearOfCentury,fields.years,iCutoverMillis);
iGregorianChronology=gregorian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
fields.years=fields.year.getDurationField();
fields.yearOfEra=new ImpreciseCutoverField(julian.yearOfEra(),fields.yearOfEra,fields.years,iCutoverMillis);
fields.centuryOfEra=new ImpreciseCutoverField(julian.centuryOfEra(),fields.centuryOfEra,iCutoverMillis);
iGregorianChronology=gregorian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
fields.years=fields.year.getDurationField();
fields.yearOfCentury=new ImpreciseCutoverField(julian.yearOfCentury(),fields.yearOfCentury,fields.years,iCutoverMillis);
fields.centuryOfEra=new ImpreciseCutoverField(julian.centuryOfEra(),fields.centuryOfEra,iCutoverMillis);
iGregorianChronology=gregorian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
fields.yearOfEra=new ImpreciseCutoverField(julian.yearOfEra(),fields.yearOfEra,fields.years,iCutoverMillis);
fields.yearOfCentury=new ImpreciseCutoverField(julian.yearOfCentury(),fields.yearOfCentury,fields.years,iCutoverMillis);
fields.centuryOfEra=new ImpreciseCutoverField(julian.centuryOfEra(),fields.centuryOfEra,iCutoverMillis);
iGregorianChronology=gregorian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
fields.years=fields.year.getDurationField();
fields.yearOfEra=new ImpreciseCutoverField(julian.yearOfEra(),fields.yearOfEra,fields.years,iCutoverMillis);
fields.yearOfCentury=new ImpreciseCutoverField(julian.yearOfCentury(),fields.yearOfCentury,fields.years,iCutoverMillis);
fields.centuryOfEra=new ImpreciseCutoverField(julian.centuryOfEra(),fields.centuryOfEra,iCutoverMillis);
iGregorianChronology=gregorian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
checkYearsAndMonths("Weeks");
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
iGregorianChronology=gregorian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iCutoverMillis+=((long)getMinutes())*DateTimeConstants.MILLIS_PER_MINUTE;
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
iGregorianChronology=gregorian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkYearsAndMonths("Days");
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
iGregorianChronology=gregorian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkYearsAndMonths("Hours");
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
iGregorianChronology=gregorian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkYearsAndMonths("Duration");
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
iGregorianChronology=gregorian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iCutoverMillis+=(((long)getMinutes())*((long)DateTimeConstants.MILLIS_PER_MINUTE));
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
iGregorianChronology=gregorian;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.GJChronology,481
========
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
iGregorianChronology=gregorian;
iCutoverInstant=cutoverInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iJulianChronology=julian;
iGregorianChronology=gregorian;
iCutoverInstant=DEFAULT_CUTOVER;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iJulianChronology=julian;
iGregorianChronology=gregorian;
if(julian.getMinimumDaysInFirstWeek()!=gregorian.getMinimumDaysInFirstWeek()){
throw new IllegalArgumentException();
}
iCutoverInstant=cutoverInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.copyFieldsFrom(gregorian);
iJulianChronology=julian;
iGregorianChronology=gregorian;
iCutoverInstant=cutoverInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.copyFieldsFrom(gregorian);
iJulianChronology=julian;
iGregorianChronology=gregorian;
if(julian.getMinimumDaysInFirstWeek()!=gregorian.getMinimumDaysInFirstWeek()){
throw new IllegalArgumentException();
}
iCutoverInstant=cutoverInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iJulianChronology=julian;
iGregorianChronology=gregorian;
iCutoverInstant=monthOfYear;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.weekyear=new ImpreciseCutoverField(julian.weekyear(),fields.weekyear,null,iCutoverMillis,true);
iJulianChronology=julian;
iGregorianChronology=gregorian;
iCutoverInstant=cutoverInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyearOfCentury=new ImpreciseCutoverField(julian.weekyearOfCentury(),fields.weekyearOfCentury,fields.weekyears,iCutoverMillis);
iJulianChronology=julian;
iGregorianChronology=gregorian;
iCutoverInstant=cutoverInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyears=fields.weekyear.getDurationField();
iJulianChronology=julian;
iGregorianChronology=gregorian;
iCutoverInstant=cutoverInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyear=new ImpreciseCutoverField(julian.weekyear(),fields.weekyear,null,iCutoverMillis,true);
fields.weekyearOfCentury=new ImpreciseCutoverField(julian.weekyearOfCentury(),fields.weekyearOfCentury,fields.weekyears,iCutoverMillis);
iJulianChronology=julian;
iGregorianChronology=gregorian;
iCutoverInstant=cutoverInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyear=new ImpreciseCutoverField(julian.weekyear(),fields.weekyear,null,iCutoverMillis,true);
fields.weekyears=fields.weekyear.getDurationField();
iJulianChronology=julian;
iGregorianChronology=gregorian;
iCutoverInstant=cutoverInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyearOfCentury=new ImpreciseCutoverField(julian.weekyearOfCentury(),fields.weekyearOfCentury,fields.weekyears,iCutoverMillis);
fields.weekyears=fields.weekyear.getDurationField();
iJulianChronology=julian;
iGregorianChronology=gregorian;
iCutoverInstant=cutoverInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyear=new ImpreciseCutoverField(julian.weekyear(),fields.weekyear,null,iCutoverMillis,true);
fields.weekyearOfCentury=new ImpreciseCutoverField(julian.weekyearOfCentury(),fields.weekyearOfCentury,fields.weekyears,iCutoverMillis);
fields.weekyears=fields.weekyear.getDurationField();
iJulianChronology=julian;
iGregorianChronology=gregorian;
iCutoverInstant=cutoverInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iJulianChronology=julian;
iGregorianChronology=gregorian;
iCutoverInstant=centuryOfEra;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iJulianChronology=julian;
iGregorianChronology=gregorian;
fields.years=fields.year.getDurationField();
iCutoverInstant=cutoverInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iJulianChronology=julian;
iGregorianChronology=gregorian;
fields.yearOfEra=new ImpreciseCutoverField(julian.yearOfEra(),fields.yearOfEra,fields.years,iCutoverMillis);
iCutoverInstant=cutoverInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iJulianChronology=julian;
iGregorianChronology=gregorian;
fields.yearOfCentury=new ImpreciseCutoverField(julian.yearOfCentury(),fields.yearOfCentury,fields.years,iCutoverMillis);
iCutoverInstant=cutoverInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iJulianChronology=julian;
iGregorianChronology=gregorian;
fields.centuryOfEra=new ImpreciseCutoverField(julian.centuryOfEra(),fields.centuryOfEra,iCutoverMillis);
iCutoverInstant=cutoverInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iJulianChronology=julian;
iGregorianChronology=gregorian;
fields.years=fields.year.getDurationField();
fields.yearOfEra=new ImpreciseCutoverField(julian.yearOfEra(),fields.yearOfEra,fields.years,iCutoverMillis);
iCutoverInstant=cutoverInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iJulianChronology=julian;
iGregorianChronology=gregorian;
fields.years=fields.year.getDurationField();
fields.yearOfCentury=new ImpreciseCutoverField(julian.yearOfCentury(),fields.yearOfCentury,fields.years,iCutoverMillis);
iCutoverInstant=cutoverInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iJulianChronology=julian;
iGregorianChronology=gregorian;
fields.years=fields.year.getDurationField();
fields.centuryOfEra=new ImpreciseCutoverField(julian.centuryOfEra(),fields.centuryOfEra,iCutoverMillis);
iCutoverInstant=cutoverInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iJulianChronology=julian;
iGregorianChronology=gregorian;
fields.yearOfEra=new ImpreciseCutoverField(julian.yearOfEra(),fields.yearOfEra,fields.years,iCutoverMillis);
fields.yearOfCentury=new ImpreciseCutoverField(julian.yearOfCentury(),fields.yearOfCentury,fields.years,iCutoverMillis);
iCutoverInstant=cutoverInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iJulianChronology=julian;
iGregorianChronology=gregorian;
fields.yearOfEra=new ImpreciseCutoverField(julian.yearOfEra(),fields.yearOfEra,fields.years,iCutoverMillis);
fields.centuryOfEra=new ImpreciseCutoverField(julian.centuryOfEra(),fields.centuryOfEra,iCutoverMillis);
iCutoverInstant=cutoverInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iJulianChronology=julian;
iGregorianChronology=gregorian;
fields.yearOfCentury=new ImpreciseCutoverField(julian.yearOfCentury(),fields.yearOfCentury,fields.years,iCutoverMillis);
fields.centuryOfEra=new ImpreciseCutoverField(julian.centuryOfEra(),fields.centuryOfEra,iCutoverMillis);
iCutoverInstant=cutoverInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iJulianChronology=julian;
iGregorianChronology=gregorian;
fields.years=fields.year.getDurationField();
fields.yearOfEra=new ImpreciseCutoverField(julian.yearOfEra(),fields.yearOfEra,fields.years,iCutoverMillis);
fields.yearOfCentury=new ImpreciseCutoverField(julian.yearOfCentury(),fields.yearOfCentury,fields.years,iCutoverMillis);
iCutoverInstant=cutoverInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iJulianChronology=julian;
iGregorianChronology=gregorian;
fields.years=fields.year.getDurationField();
fields.yearOfEra=new ImpreciseCutoverField(julian.yearOfEra(),fields.yearOfEra,fields.years,iCutoverMillis);
fields.centuryOfEra=new ImpreciseCutoverField(julian.centuryOfEra(),fields.centuryOfEra,iCutoverMillis);
iCutoverInstant=cutoverInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iJulianChronology=julian;
iGregorianChronology=gregorian;
fields.years=fields.year.getDurationField();
fields.yearOfCentury=new ImpreciseCutoverField(julian.yearOfCentury(),fields.yearOfCentury,fields.years,iCutoverMillis);
fields.centuryOfEra=new ImpreciseCutoverField(julian.centuryOfEra(),fields.centuryOfEra,iCutoverMillis);
iCutoverInstant=cutoverInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iJulianChronology=julian;
iGregorianChronology=gregorian;
fields.yearOfEra=new ImpreciseCutoverField(julian.yearOfEra(),fields.yearOfEra,fields.years,iCutoverMillis);
fields.yearOfCentury=new ImpreciseCutoverField(julian.yearOfCentury(),fields.yearOfCentury,fields.years,iCutoverMillis);
fields.centuryOfEra=new ImpreciseCutoverField(julian.centuryOfEra(),fields.centuryOfEra,iCutoverMillis);
iCutoverInstant=cutoverInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iJulianChronology=julian;
iGregorianChronology=gregorian;
fields.years=fields.year.getDurationField();
fields.yearOfEra=new ImpreciseCutoverField(julian.yearOfEra(),fields.yearOfEra,fields.years,iCutoverMillis);
fields.yearOfCentury=new ImpreciseCutoverField(julian.yearOfCentury(),fields.yearOfCentury,fields.years,iCutoverMillis);
fields.centuryOfEra=new ImpreciseCutoverField(julian.centuryOfEra(),fields.centuryOfEra,iCutoverMillis);
iCutoverInstant=cutoverInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
org.joda.time.chrono.GJChronology,482
========
iCutoverMillis=cutoverInstant.getMillis();
iGregorianChronology=gregorian;
iCutoverInstant=cutoverInstant;
if(getBase()!=null){
return ;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iJulianChronology=julian;
iGregorianChronology=gregorian;
iCutoverInstant=cutoverInstant;
if(getBase()!=null){
return ;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(getBase()!=null){
return ;
}
iGregorianChronology=gregorian;
iCutoverInstant=cutoverInstant;
if(getBase()!=null){
return ;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
iGregorianChronology=gregorian;
iCutoverInstant=cutoverInstant;
if(getBase()!=null){
return ;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iCutoverMillis=cutoverInstant.getMillis();
if(getBase()!=null){
return ;
}
iGregorianChronology=gregorian;
iCutoverInstant=cutoverInstant;
if(getBase()!=null){
return ;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iJulianChronology=julian;
if(getBase()!=null){
return ;
}
iGregorianChronology=gregorian;
iCutoverInstant=cutoverInstant;
if(getBase()!=null){
return ;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iCutoverMillis=cutoverInstant.getMillis();
iJulianChronology=julian;
if(getBase()!=null){
return ;
}
iGregorianChronology=gregorian;
iCutoverInstant=cutoverInstant;
if(getBase()!=null){
return ;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iGregorianChronology=gregorian;
iCutoverInstant=DEFAULT_CUTOVER;
if(getBase()!=null){
return ;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iGregorianChronology=centuryOfEra;
iCutoverInstant=cutoverInstant;
if(getBase()!=null){
return ;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.GJChronology,484
org.joda.time.chrono.GJChronology,485
org.joda.time.chrono.GJChronology,488
org.joda.time.chrono.GJChronology,493
========
if(getBase()!=null){
return ;
}
if(julian.getMinimumDaysInFirstWeek()!=gregorian.getMinimumDaysInFirstWeek()){
throw new IllegalArgumentException();
}
iGapDuration=iCutoverMillis-julianToGregorianByYear(iCutoverMillis);
fields.copyFieldsFrom(gregorian);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(julian.getMinimumDaysInFirstWeek()!=gregorian.getMinimumDaysInFirstWeek()){
throw new IllegalArgumentException();
}
iDurationField=(iGregorianField=fields.millis)!=null?f:super.millis();
iGapDuration=iCutoverMillis-julianToGregorianByYear(iCutoverMillis);
fields.copyFieldsFrom(gregorian);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(julian.getMinimumDaysInFirstWeek()!=gregorian.getMinimumDaysInFirstWeek()){
throw new IllegalArgumentException();
}
iDurationField=(iGregorianField=fields.seconds)!=null?f:super.seconds();
iGapDuration=iCutoverMillis-julianToGregorianByYear(iCutoverMillis);
fields.copyFieldsFrom(gregorian);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(julian.getMinimumDaysInFirstWeek()!=gregorian.getMinimumDaysInFirstWeek()){
throw new IllegalArgumentException();
}
iDurationField=(iGregorianField=fields.minutes)!=null?f:super.minutes();
iGapDuration=iCutoverMillis-julianToGregorianByYear(iCutoverMillis);
fields.copyFieldsFrom(gregorian);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(julian.getMinimumDaysInFirstWeek()!=gregorian.getMinimumDaysInFirstWeek()){
throw new IllegalArgumentException();
}
iGregorianField=(iGregorianField=fields.millisOfSecond)!=null?f:super.millisOfSecond();
iGapDuration=iCutoverMillis-julianToGregorianByYear(iCutoverMillis);
fields.copyFieldsFrom(gregorian);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(julian.getMinimumDaysInFirstWeek()!=gregorian.getMinimumDaysInFirstWeek()){
throw new IllegalArgumentException();
}
iGregorianField=(iGregorianField=fields.millisOfDay)!=null?f:super.millisOfDay();
iGapDuration=iCutoverMillis-julianToGregorianByYear(iCutoverMillis);
fields.copyFieldsFrom(gregorian);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iGregorianField=(iGregorianField=fields.secondOfDay)!=null?f:super.secondOfDay();
if(julian.getMinimumDaysInFirstWeek()!=gregorian.getMinimumDaysInFirstWeek()){
throw new IllegalArgumentException();
}
iGapDuration=iCutoverMillis-julianToGregorianByYear(iCutoverMillis);
fields.copyFieldsFrom(gregorian);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(julian.getMinimumDaysInFirstWeek()!=gregorian.getMinimumDaysInFirstWeek()){
throw new IllegalArgumentException();
}
iDurationField=(iGregorianField=fields.halfdays)!=null?f:super.halfdays();
iGapDuration=iCutoverMillis-julianToGregorianByYear(iCutoverMillis);
fields.copyFieldsFrom(gregorian);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(julian.getMinimumDaysInFirstWeek()!=gregorian.getMinimumDaysInFirstWeek()){
throw new IllegalArgumentException();
}
iDurationField=(iGregorianField=fields.days)!=null?f:super.days();
iGapDuration=iCutoverMillis-julianToGregorianByYear(iCutoverMillis);
fields.copyFieldsFrom(gregorian);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(julian.getMinimumDaysInFirstWeek()!=gregorian.getMinimumDaysInFirstWeek()){
throw new IllegalArgumentException();
}
iDurationField=(iGregorianField=fields.weeks)!=null?f:super.weeks();
iGapDuration=iCutoverMillis-julianToGregorianByYear(iCutoverMillis);
fields.copyFieldsFrom(gregorian);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(julian.getMinimumDaysInFirstWeek()!=gregorian.getMinimumDaysInFirstWeek()){
throw new IllegalArgumentException();
}
iDurationField=(iGregorianField=fields.weekyears)!=null?f:super.weekyears();
iGapDuration=iCutoverMillis-julianToGregorianByYear(iCutoverMillis);
fields.copyFieldsFrom(gregorian);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(julian.getMinimumDaysInFirstWeek()!=gregorian.getMinimumDaysInFirstWeek()){
throw new IllegalArgumentException();
}
iGregorianField=(iGregorianField=fields.minuteOfHour)!=null?f:super.minuteOfHour();
iGapDuration=iCutoverMillis-julianToGregorianByYear(iCutoverMillis);
fields.copyFieldsFrom(gregorian);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iGregorianField=(iGregorianField=fields.hourOfDay)!=null?f:super.hourOfDay();
if(julian.getMinimumDaysInFirstWeek()!=gregorian.getMinimumDaysInFirstWeek()){
throw new IllegalArgumentException();
}
iGapDuration=iCutoverMillis-julianToGregorianByYear(iCutoverMillis);
fields.copyFieldsFrom(gregorian);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iGregorianField=(iGregorianField=fields.clockhourOfDay)!=null?f:super.clockhourOfDay();
if(julian.getMinimumDaysInFirstWeek()!=gregorian.getMinimumDaysInFirstWeek()){
throw new IllegalArgumentException();
}
iGapDuration=iCutoverMillis-julianToGregorianByYear(iCutoverMillis);
fields.copyFieldsFrom(gregorian);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iGregorianField=(iGregorianField=fields.hourOfHalfday)!=null?f:super.hourOfHalfday();
if(julian.getMinimumDaysInFirstWeek()!=gregorian.getMinimumDaysInFirstWeek()){
throw new IllegalArgumentException();
}
iGapDuration=iCutoverMillis-julianToGregorianByYear(iCutoverMillis);
fields.copyFieldsFrom(gregorian);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(julian.getMinimumDaysInFirstWeek()!=gregorian.getMinimumDaysInFirstWeek()){
throw new IllegalArgumentException();
}
iGregorianField=(iGregorianField=fields.clockhourOfHalfday)!=null?f:super.clockhourOfHalfday();
iGapDuration=iCutoverMillis-julianToGregorianByYear(iCutoverMillis);
fields.copyFieldsFrom(gregorian);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iGregorianField=(iGregorianField=fields.dayOfWeek)!=null?f:super.dayOfWeek();
if(julian.getMinimumDaysInFirstWeek()!=gregorian.getMinimumDaysInFirstWeek()){
throw new IllegalArgumentException();
}
iGapDuration=iCutoverMillis-julianToGregorianByYear(iCutoverMillis);
fields.copyFieldsFrom(gregorian);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iGregorianField=(iGregorianField=fields.dayOfMonth)!=null?f:super.dayOfMonth();
if(julian.getMinimumDaysInFirstWeek()!=gregorian.getMinimumDaysInFirstWeek()){
throw new IllegalArgumentException();
}
iGapDuration=iCutoverMillis-julianToGregorianByYear(iCutoverMillis);
fields.copyFieldsFrom(gregorian);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iGregorianField=(iGregorianField=fields.dayOfYear)!=null?f:super.dayOfYear();
if(julian.getMinimumDaysInFirstWeek()!=gregorian.getMinimumDaysInFirstWeek()){
throw new IllegalArgumentException();
}
iGapDuration=iCutoverMillis-julianToGregorianByYear(iCutoverMillis);
fields.copyFieldsFrom(gregorian);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(julian.getMinimumDaysInFirstWeek()!=gregorian.getMinimumDaysInFirstWeek()){
throw new IllegalArgumentException();
}
iGregorianField=(iGregorianField=fields.weekOfWeekyear)!=null?f:super.weekOfWeekyear();
iGapDuration=iCutoverMillis-julianToGregorianByYear(iCutoverMillis);
fields.copyFieldsFrom(gregorian);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iGregorianField=(iGregorianField=fields.weekyearOfCentury)!=null?f:super.weekyearOfCentury();
if(julian.getMinimumDaysInFirstWeek()!=gregorian.getMinimumDaysInFirstWeek()){
throw new IllegalArgumentException();
}
iGapDuration=iCutoverMillis-julianToGregorianByYear(iCutoverMillis);
fields.copyFieldsFrom(gregorian);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iGregorianField=(iGregorianField=fields.monthOfYear)!=null?f:super.monthOfYear();
if(julian.getMinimumDaysInFirstWeek()!=gregorian.getMinimumDaysInFirstWeek()){
throw new IllegalArgumentException();
}
iGapDuration=iCutoverMillis-julianToGregorianByYear(iCutoverMillis);
fields.copyFieldsFrom(gregorian);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iGregorianField=(iGregorianField=fields.year)!=null?f:super.year();
if(julian.getMinimumDaysInFirstWeek()!=gregorian.getMinimumDaysInFirstWeek()){
throw new IllegalArgumentException();
}
iGapDuration=iCutoverMillis-julianToGregorianByYear(iCutoverMillis);
fields.copyFieldsFrom(gregorian);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.GJChronology,499
org.joda.time.chrono.GJChronology,505
========
if(remainder(iCutoverMillis)<remainder(iCutover)){
hourOfDay-get(iCutover)--;
}
if(gregorian.millisOfDay().get(iCutoverMillis)==0){
fields.millisOfSecond=new CutoverField(julian.millisOfSecond(),fields.millisOfSecond,iCutoverMillis);
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);
fields.clockhourOfDay=new CutoverField(julian.clockhourOfDay(),fields.clockhourOfDay,iCutoverMillis);
fields.clockhourOfHalfday=new CutoverField(julian.clockhourOfHalfday(),fields.clockhourOfHalfday,iCutoverMillis);
fields.halfdayOfDay=new CutoverField(julian.halfdayOfDay(),fields.halfdayOfDay,iCutoverMillis);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iCutoverMillis=ISOChronology.getInstanceUTC().millisOfDay().set(next,0);
if(gregorian.millisOfDay().get(iCutoverMillis)==0){
fields.millisOfSecond=new CutoverField(julian.millisOfSecond(),fields.millisOfSecond,iCutoverMillis);
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);
fields.clockhourOfDay=new CutoverField(julian.clockhourOfDay(),fields.clockhourOfDay,iCutoverMillis);
fields.clockhourOfHalfday=new CutoverField(julian.clockhourOfHalfday(),fields.clockhourOfHalfday,iCutoverMillis);
fields.halfdayOfDay=new CutoverField(julian.halfdayOfDay(),fields.halfdayOfDay,iCutoverMillis);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iCutoverMillis=ISOChronology.getInstanceUTC().millisOfDay().add(next,hourOfDay);
if(gregorian.millisOfDay().get(iCutoverMillis)==0){
fields.millisOfSecond=new CutoverField(julian.millisOfSecond(),fields.millisOfSecond,iCutoverMillis);
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);
fields.clockhourOfDay=new CutoverField(julian.clockhourOfDay(),fields.clockhourOfDay,iCutoverMillis);
fields.clockhourOfHalfday=new CutoverField(julian.clockhourOfHalfday(),fields.clockhourOfHalfday,iCutoverMillis);
fields.halfdayOfDay=new CutoverField(julian.halfdayOfDay(),fields.halfdayOfDay,iCutoverMillis);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iCutoverMillis=setDayOfMonthNext(ISOChronology.getInstanceUTC(),next);
if(gregorian.millisOfDay().get(iCutoverMillis)==0){
fields.millisOfSecond=new CutoverField(julian.millisOfSecond(),fields.millisOfSecond,iCutoverMillis);
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);
fields.clockhourOfDay=new CutoverField(julian.clockhourOfDay(),fields.clockhourOfDay,iCutoverMillis);
fields.clockhourOfHalfday=new CutoverField(julian.clockhourOfHalfday(),fields.clockhourOfHalfday,iCutoverMillis);
fields.halfdayOfDay=new CutoverField(julian.halfdayOfDay(),fields.halfdayOfDay,iCutoverMillis);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iCutoverMillis=ISOChronology.getInstanceUTC().millisOfDay().set(prev,0);
if(gregorian.millisOfDay().get(iCutoverMillis)==0){
fields.millisOfSecond=new CutoverField(julian.millisOfSecond(),fields.millisOfSecond,iCutoverMillis);
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);
fields.clockhourOfDay=new CutoverField(julian.clockhourOfDay(),fields.clockhourOfDay,iCutoverMillis);
fields.clockhourOfHalfday=new CutoverField(julian.clockhourOfHalfday(),fields.clockhourOfHalfday,iCutoverMillis);
fields.halfdayOfDay=new CutoverField(julian.halfdayOfDay(),fields.halfdayOfDay,iCutoverMillis);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iCutoverMillis=ISOChronology.getInstanceUTC().millisOfDay().add(prev,hourOfDay);
if(gregorian.millisOfDay().get(iCutoverMillis)==0){
fields.millisOfSecond=new CutoverField(julian.millisOfSecond(),fields.millisOfSecond,iCutoverMillis);
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);
fields.clockhourOfDay=new CutoverField(julian.clockhourOfDay(),fields.clockhourOfDay,iCutoverMillis);
fields.clockhourOfHalfday=new CutoverField(julian.clockhourOfHalfday(),fields.clockhourOfHalfday,iCutoverMillis);
fields.halfdayOfDay=new CutoverField(julian.halfdayOfDay(),fields.halfdayOfDay,iCutoverMillis);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iCutoverMillis=setDayOfMonthPrevious(ISOChronology.getInstanceUTC(),prev);
if(gregorian.millisOfDay().get(iCutoverMillis)==0){
fields.millisOfSecond=new CutoverField(julian.millisOfSecond(),fields.millisOfSecond,iCutoverMillis);
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);
fields.clockhourOfDay=new CutoverField(julian.clockhourOfDay(),fields.clockhourOfDay,iCutoverMillis);
fields.clockhourOfHalfday=new CutoverField(julian.clockhourOfHalfday(),fields.clockhourOfHalfday,iCutoverMillis);
fields.halfdayOfDay=new CutoverField(julian.halfdayOfDay(),fields.halfdayOfDay,iCutoverMillis);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(gregorian.millisOfDay().get(iCutoverMillis)!=0){
fields.millisOfSecond=new CutoverField(julian.millisOfSecond(),fields.millisOfSecond,iCutoverMillis);
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);
fields.clockhourOfDay=new CutoverField(julian.clockhourOfDay(),fields.clockhourOfDay,iCutoverMillis);
fields.clockhourOfHalfday=new CutoverField(julian.clockhourOfHalfday(),fields.clockhourOfHalfday,iCutoverMillis);
fields.halfdayOfDay=new CutoverField(julian.halfdayOfDay(),fields.halfdayOfDay,iCutoverMillis);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(get(iCutoverMillis)==0){
fields.millisOfSecond=new CutoverField(julian.millisOfSecond(),fields.millisOfSecond,iCutoverMillis);
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);
fields.clockhourOfDay=new CutoverField(julian.clockhourOfDay(),fields.clockhourOfDay,iCutoverMillis);
fields.clockhourOfHalfday=new CutoverField(julian.clockhourOfHalfday(),fields.clockhourOfHalfday,iCutoverMillis);
fields.halfdayOfDay=new CutoverField(julian.halfdayOfDay(),fields.halfdayOfDay,iCutoverMillis);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(iCutoverMillis)!=0){
fields.millisOfSecond=new CutoverField(julian.millisOfSecond(),fields.millisOfSecond,iCutoverMillis);
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);
fields.clockhourOfDay=new CutoverField(julian.clockhourOfDay(),fields.clockhourOfDay,iCutoverMillis);
fields.clockhourOfHalfday=new CutoverField(julian.clockhourOfHalfday(),fields.clockhourOfHalfday,iCutoverMillis);
fields.halfdayOfDay=new CutoverField(julian.halfdayOfDay(),fields.halfdayOfDay,iCutoverMillis);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(gregorian.millisOfDay().get(iCutoverMillis)==YEAR_LIMIT){
fields.millisOfSecond=new CutoverField(julian.millisOfSecond(),fields.millisOfSecond,iCutoverMillis);
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);
fields.clockhourOfDay=new CutoverField(julian.clockhourOfDay(),fields.clockhourOfDay,iCutoverMillis);
fields.clockhourOfHalfday=new CutoverField(julian.clockhourOfHalfday(),fields.clockhourOfHalfday,iCutoverMillis);
fields.halfdayOfDay=new CutoverField(julian.halfdayOfDay(),fields.halfdayOfDay,iCutoverMillis);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.GJChronology,509
========
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.millisOfSecond=new CutoverField(julian.millisOfSecond(),fields.millisOfSecond,iCutoverMillis);
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.millisOfSecond=new CutoverField(julian.millisOfSecond(),fields.millisOfSecond,iCutoverMillis);
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);
fields.millisOfSecond=new CutoverField(julian.millisOfSecond(),fields.millisOfSecond,iCutoverMillis);
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);
fields.millisOfSecond=new CutoverField(julian.millisOfSecond(),fields.millisOfSecond,iCutoverMillis);
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyear=convertField(fields.weekyear);
fields.millisOfSecond=new CutoverField(julian.millisOfSecond(),fields.millisOfSecond,iCutoverMillis);
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.weekyearOfCentury=convertField(fields.weekyearOfCentury);
fields.millisOfSecond=new CutoverField(julian.millisOfSecond(),fields.millisOfSecond,iCutoverMillis);
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.days=iDurationField;
fields.millisOfSecond=new CutoverField(julian.millisOfSecond(),fields.millisOfSecond,iCutoverMillis);
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.weeks=iDurationField;
fields.millisOfSecond=new CutoverField(julian.millisOfSecond(),fields.millisOfSecond,iCutoverMillis);
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.months=fields.monthOfYear.getDurationField();
fields.millisOfSecond=new CutoverField(julian.millisOfSecond(),fields.millisOfSecond,iCutoverMillis);
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyears=fields.weekyear.getDurationField();
fields.millisOfSecond=new CutoverField(julian.millisOfSecond(),fields.millisOfSecond,iCutoverMillis);
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.months=fields.monthOfYear.getDurationField();
fields.weekyears=fields.weekyear.getDurationField();
fields.millisOfSecond=new CutoverField(julian.millisOfSecond(),fields.millisOfSecond,iCutoverMillis);
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.millisOfSecond=new CutoverField(julian.millisOfSecond(),fields.millisOfSecond,iCutoverMillis);
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.year=new ImpreciseCutoverField(julian.year(),fields.year,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.millisOfSecond=new CutoverField(julian.millisOfSecond(),fields.millisOfSecond,iCutoverMillis);
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.years=fields.year.getDurationField();
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.millisOfSecond=new CutoverField(julian.millisOfSecond(),fields.millisOfSecond,iCutoverMillis);
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.year=new ImpreciseCutoverField(julian.year(),fields.year,iCutoverMillis);
fields.years=fields.year.getDurationField();
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyear=convertField(fields.weekyear);
fields.weekyearOfCentury=convertField(fields.weekyearOfCentury);
fields.millisOfSecond=new CutoverField(julian.millisOfSecond(),fields.millisOfSecond,iCutoverMillis);
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.GJChronology,510
org.joda.time.chrono.GJChronology,511
========
fields.millisOfSecond=new CutoverField(julian.millisOfSecond(),fields.millisOfSecond,iCutoverMillis);
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyearOfCentury=convertField(fields.weekyearOfCentury);
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.millisOfSecond=convertField(fields.millisOfSecond);
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.weeks=iDurationField;
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.millisOfSecond=iGregorianField;
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.months=fields.monthOfYear.getDurationField();
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyears=fields.weekyear.getDurationField();
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.months=fields.monthOfYear.getDurationField();
fields.weekyears=fields.weekyear.getDurationField();
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.year=new ImpreciseCutoverField(julian.year(),fields.year,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.years=fields.year.getDurationField();
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.year=new ImpreciseCutoverField(julian.year(),fields.year,iCutoverMillis);
fields.years=fields.year.getDurationField();
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
iGregorianField=(iGregorianField=fields.millisOfSecond)!=null?f:super.millisOfSecond();
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.weekyearOfCentury=convertField(fields.weekyearOfCentury);
fields.millisOfSecond=convertField(fields.millisOfSecond);
fields.millisOfDay=new CutoverField(julian.millisOfDay(),fields.millisOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.GJChronology,512
========
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.millisOfSecond=new CutoverField(julian.millisOfSecond(),fields.millisOfSecond,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.millisOfSecond=convertField(fields.millisOfSecond);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.millisOfDay=convertField(fields.millisOfDay);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.millisOfSecond=iGregorianField;
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.millisOfDay=iGregorianField;
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.months=fields.monthOfYear.getDurationField();
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyears=fields.weekyear.getDurationField();
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.months=fields.monthOfYear.getDurationField();
fields.weekyears=fields.weekyear.getDurationField();
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.year=new ImpreciseCutoverField(julian.year(),fields.year,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.years=fields.year.getDurationField();
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.year=new ImpreciseCutoverField(julian.year(),fields.year,iCutoverMillis);
fields.years=fields.year.getDurationField();
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
iGregorianField=(iGregorianField=fields.millisOfSecond)!=null?f:super.millisOfSecond();
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
iGregorianField=(iGregorianField=fields.secondOfDay)!=null?f:super.secondOfDay();
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.millisOfSecond=convertField(fields.millisOfSecond);
fields.millisOfDay=convertField(fields.millisOfDay);
fields.secondOfMinute=new CutoverField(julian.secondOfMinute(),fields.secondOfMinute,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.GJChronology,513
========
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.millisOfSecond=new CutoverField(julian.millisOfSecond(),fields.millisOfSecond,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.millisOfDay=convertField(fields.millisOfDay);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.secondOfMinute=convertField(fields.secondOfMinute);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.millisOfDay=iGregorianField;
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.secondOfMinute=iGregorianField;
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.months=fields.monthOfYear.getDurationField();
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyears=fields.weekyear.getDurationField();
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyears=fields.weekyear.getDurationField();
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.months=fields.monthOfYear.getDurationField();
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.year=new ImpreciseCutoverField(julian.year(),fields.year,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.years=fields.year.getDurationField();
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.year=new ImpreciseCutoverField(julian.year(),fields.year,iCutoverMillis);
fields.years=fields.year.getDurationField();
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
iGregorianField=(iGregorianField=fields.secondOfMinute)!=null?f:super.secondOfMinute();
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
iGregorianField=(iGregorianField=fields.secondOfDay)!=null?f:super.secondOfDay();
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.millisOfDay=convertField(fields.millisOfDay);
fields.secondOfMinute=convertField(fields.secondOfMinute);
fields.secondOfDay=new CutoverField(julian.secondOfDay(),fields.secondOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.GJChronology,514
========
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.clockhourOfDay=new CutoverField(julian.clockhourOfDay(),fields.clockhourOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);
fields.clockhourOfDay=new CutoverField(julian.clockhourOfDay(),fields.clockhourOfDay,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.millisOfSecond=new CutoverField(julian.millisOfSecond(),fields.millisOfSecond,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.secondOfMinute=convertField(fields.secondOfMinute);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.secondOfDay=convertField(fields.secondOfDay);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.secondOfMinute=iGregorianField;
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.secondOfDay=iGregorianField;
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.months=fields.monthOfYear.getDurationField();
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyears=fields.weekyear.getDurationField();
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyears=fields.weekyear.getDurationField();
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.months=fields.monthOfYear.getDurationField();
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.year=new ImpreciseCutoverField(julian.year(),fields.year,iCutoverMillis);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.years=fields.year.getDurationField();
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.year=new ImpreciseCutoverField(julian.year(),fields.year,iCutoverMillis);
fields.years=fields.year.getDurationField();
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iGregorianField=(iGregorianField=fields.secondOfMinute)!=null?f:super.secondOfMinute();
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iGregorianField=(iGregorianField=fields.secondOfDay)!=null?f:super.secondOfDay();
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.secondOfMinute=convertField(fields.secondOfMinute);
fields.secondOfDay=convertField(fields.secondOfDay);
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.GJChronology,515
========
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.clockhourOfDay=new CutoverField(julian.clockhourOfDay(),fields.clockhourOfDay,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.clockhourOfDay=new CutoverField(julian.clockhourOfDay(),fields.clockhourOfDay,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.millisOfSecond=new CutoverField(julian.millisOfSecond(),fields.millisOfSecond,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.secondOfDay=convertField(fields.secondOfDay);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.minuteOfHour=convertField(fields.minuteOfHour);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.secondOfDay=iGregorianField;
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.minuteOfHour=iGregorianField;
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.months=fields.monthOfYear.getDurationField();
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyears=fields.weekyear.getDurationField();
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.weekyears=fields.weekyear.getDurationField();
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.months=fields.monthOfYear.getDurationField();
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.year=new ImpreciseCutoverField(julian.year(),fields.year,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.years=fields.year.getDurationField();
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.year=new ImpreciseCutoverField(julian.year(),fields.year,iCutoverMillis);
fields.years=fields.year.getDurationField();
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iGregorianField=(iGregorianField=fields.secondOfDay)!=null?f:super.secondOfDay();
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iGregorianField=(iGregorianField=fields.minuteOfHour)!=null?f:super.minuteOfHour();
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
iGregorianField=(iGregorianField=fields.hourOfDay)!=null?f:super.hourOfDay();
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.secondOfDay=convertField(fields.secondOfDay);
fields.minuteOfHour=convertField(fields.minuteOfHour);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.GJChronology,516
========
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);
fields.clockhourOfDay=new CutoverField(julian.clockhourOfDay(),fields.clockhourOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);
fields.clockhourOfDay=new CutoverField(julian.clockhourOfDay(),fields.clockhourOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.minuteOfHour=new CutoverField(julian.minuteOfHour(),fields.minuteOfHour,iCutoverMillis);
fields.minuteOfDay=new CutoverField(julian.minuteOfDay(),fields.minuteOfDay,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);
fields.clockhourOfDay=new CutoverField(julian.clockhourOfDay(),fields.clockhourOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.millisOfSecond=new CutoverField(julian.millisOfSecond(),fields.millisOfSecond,iCutoverMillis);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);
fields.clockhourOfDay=new CutoverField(julian.clockhourOfDay(),fields.clockhourOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fields.minuteOfHour=convertField(fields.minuteOfHour);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);
fields.clockhourOfDay=new CutoverField(julian.clockhourOfDay(),fields.clockhourOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.minuteOfDay=convertField(fields.minuteOfDay);
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);
fields.clockhourOfDay=new CutoverField(julian.clockhourOfDay(),fields.clockhourOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.minuteOfHour=iGregorianField;
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);
fields.clockhourOfDay=new CutoverField(julian.clockhourOfDay(),fields.clockhourOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.minuteOfDay=iGregorianField;
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);
fields.clockhourOfDay=new CutoverField(julian.clockhourOfDay(),fields.clockhourOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.months=fields.monthOfYear.getDurationField();
fields.hourOfDay=new CutoverField(julian.hourOfDay(),fields.hourOfDay,iCutoverMillis);
fields.hourOfHalfday=new CutoverField(julian.hourOfHalfday(),fields.hourOfHalfday,iCutoverMillis);
fields.clockhourOfDay=new CutoverField(julian.clockhourOfDay(),fields.clockhourOfDay,iCutoverMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_2/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
Timeout!
