java version "1.7.0_231"
OpenJDK Runtime Environment (rhel-2.6.19.1.el7_6-x86_64 u231-b01)
OpenJDK 64-Bit Server VM (build 24.231-b01, mixed mode)
Check out 2227 to /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j/SIMF OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 2227:2225............................................................. OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Chart-3b........................................ OK
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 1
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
/home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1
PURIFY IS FALSE
=================================================
Project : chart_3	start : 19/10/19 20:46

readFailedTest: path is /mnt/nfs/work1/brun/mmotwani/SimFix/d4j-info/failed_tests/chart/3.txt#ATTEMPTS: 1

# FAILING TESTS: 1
TIMEOUT : 18000000
===========
locations= [<org.jfree.data.time.TimeSeries,564>, <org.jfree.data.time.TimeSeries,565>, <org.jfree.data.time.TimeSeries,1050>, <org.jfree.data.time.TimeSeries,1053>, <org.jfree.data.time.TimeSeries,1056>, <org.jfree.data.time.TimeSeries,1057>, <org.jfree.data.time.TimeSeries,1058>, <org.jfree.data.time.TimeSeries,1059>, <org.jfree.data.time.TimeSeries,1060>, <org.jfree.data.time.TimeSeries,1062>, <org.jfree.data.time.TimeSeries,1064>, <org.jfree.data.time.TimeSeries,1068>, <org.jfree.data.time.TimeSeries,1071>, <org.jfree.data.general.Series,243>, <org.jfree.data.general.Series,244>, <org.jfree.data.general.Series,245>, <org.jfree.data.general.Series,246>, <org.jfree.data.time.TimeSeries,345>, <org.jfree.data.time.TimeSeries,360>, <org.jfree.data.time.TimeSeries,653>, <org.jfree.data.time.TimeSeries,654>, <org.jfree.data.time.TimeSeries,666>, <org.jfree.data.time.TimeSeries,667>, <org.jfree.data.time.TimeSeries,668>, <org.jfree.data.time.TimeSeries,680>, <org.jfree.data.time.TimeSeries,681>, <org.jfree.data.time.TimeSeries,693>, <org.jfree.data.time.TimeSeries,694>, <org.jfree.data.time.TimeSeries,695>, <org.jfree.data.time.Year,114>, <org.jfree.data.time.Year,115>, <org.jfree.data.time.Year,119>, <org.jfree.data.time.Year,120>, <org.jfree.data.time.Year,121>, <org.jfree.data.time.Year,171>, <org.jfree.data.time.Year,211>, <org.jfree.data.time.Year,212>, <org.jfree.data.time.Year,213>, <org.jfree.data.time.Year,253>, <org.jfree.data.time.Year,268>, <org.jfree.data.time.Year,269>, <org.jfree.data.time.Year,272>, <org.jfree.data.time.Year,287>, <org.jfree.data.time.Year,288>, <org.jfree.data.time.Year,291>, <org.jfree.data.time.Year,348>, <org.jfree.data.time.Year,349>, <org.jfree.data.time.Year,350>, <org.jfree.data.time.Year,351>, <org.jfree.data.time.Year,367>, <org.jfree.data.general.Series,315>, <org.jfree.data.general.Series,316>, <org.jfree.data.general.Series,318>, <org.jfree.data.general.Series,328>, <org.jfree.data.general.Series,329>, <org.jfree.data.general.Series,336>, <org.jfree.data.time.TimeSeries,429>, <org.jfree.data.time.TimeSeries,463>, <org.jfree.data.time.TimeSeries,576>, <org.jfree.data.time.TimeSeries,579>, <org.jfree.data.time.TimeSeries,580>, <org.jfree.data.time.TimeSeries,581>, <org.jfree.data.time.TimeSeries,582>, <org.jfree.data.time.TimeSeries,584>, <org.jfree.data.time.TimeSeries,596>, <org.jfree.data.time.TimeSeries,597>, <org.jfree.data.time.TimeSeries,598>, <org.jfree.data.time.TimeSeries,599>, <org.jfree.data.time.TimeSeries,600>, <org.jfree.data.time.TimeSeries,603>, <org.jfree.data.time.TimeSeries,604>, <org.jfree.data.time.TimeSeries,605>, <org.jfree.data.time.TimeSeries,606>, <org.jfree.data.time.TimeSeries,626>, <org.jfree.data.time.TimeSeries,627>, <org.jfree.data.time.TimeSeries,629>, <org.jfree.data.time.TimeSeries,634>, <org.jfree.data.time.TimeSeries,637>, <org.jfree.data.time.TimeSeries,638>, <org.jfree.data.time.TimeSeries,642>, <org.jfree.data.time.TimeSeries,877>, <org.jfree.data.time.TimeSeries,878>, <org.jfree.data.time.TimeSeries,879>, <org.jfree.data.time.TimeSeries,881>, <org.jfree.data.time.TimeSeries,885>, <org.jfree.data.time.TimeSeries,892>, <org.jfree.data.time.TimeSeries,1211>, <org.jfree.data.time.TimeSeries,1212>, <org.jfree.data.time.TimeSeries,1213>, <org.jfree.data.time.TimeSeries,1214>, <org.jfree.data.time.TimeSeries,1215>, <org.jfree.data.time.TimeSeries,1217>, <org.jfree.data.time.TimeSeries,1265>, <org.jfree.data.time.TimeSeries,1266>, <org.jfree.data.time.TimeSeries,1269>, <org.jfree.data.time.TimeSeries,1273>, <org.jfree.data.time.TimeSeries,1288>, <org.jfree.data.time.TimeSeries,1289>, <org.jfree.data.time.TimeSeries,1292>, <org.jfree.data.time.TimeSeries,1296>, <org.jfree.data.time.RegularTimePeriod,71>, <org.jfree.data.time.TimeSeriesDataItem,105>, <org.jfree.data.time.TimeSeriesDataItem,106>, <org.jfree.data.time.TimeSeriesDataItem,109>, <org.jfree.data.time.TimeSeriesDataItem,110>, <org.jfree.data.time.TimeSeriesDataItem,111>, <org.jfree.data.time.TimeSeriesDataItem,112>, <org.jfree.data.time.TimeSeriesDataItem,121>, <org.jfree.data.time.TimeSeriesDataItem,122>, <org.jfree.data.time.TimeSeriesDataItem,130>, <org.jfree.data.time.TimeSeriesDataItem,141>, <org.jfree.data.time.TimeSeriesDataItem,266>, <org.jfree.data.time.TimeSeriesDataItem,268>, <org.jfree.data.time.TimeSeriesDataItem,272>, <org.jfree.data.time.TimeSeriesDataItem,273>, <org.jfree.data.event.SeriesChangeEvent,70>, <org.jfree.data.event.SeriesChangeEvent,71>, <org.jfree.data.event.SeriesChangeEvent,82>, <org.jfree.data.event.SeriesChangeEvent,83>, <org.jfree.data.event.SeriesChangeEvent,84>, <org.jfree.data.time.TimeSeries,254>, <org.jfree.data.general.Series,104>, <org.jfree.data.general.Series,105>, <org.jfree.data.general.Series,113>, <org.jfree.data.general.Series,114>, <org.jfree.data.general.Series,117>, <org.jfree.data.general.Series,118>, <org.jfree.data.general.Series,119>, <org.jfree.data.general.Series,120>, <org.jfree.data.general.Series,121>, <org.jfree.data.general.Series,122>, <org.jfree.data.time.TimeSeries,169>, <org.jfree.data.time.TimeSeries,170>, <org.jfree.data.time.TimeSeries,186>, <org.jfree.data.time.TimeSeries,187>, <org.jfree.data.time.TimeSeries,188>, <org.jfree.data.time.TimeSeries,189>, <org.jfree.data.time.TimeSeries,190>, <org.jfree.data.time.TimeSeries,191>, <org.jfree.data.time.TimeSeries,192>, <org.jfree.data.time.TimeSeries,193>, <org.jfree.data.time.TimeSeries,194>, <org.jfree.data.time.TimeSeries,195>, <org.jfree.data.general.Series,115>, <org.jfree.data.general.Series,132>, <org.jfree.data.general.Series,144>, <org.jfree.data.general.Series,145>, <org.jfree.data.general.Series,147>, <org.jfree.data.general.Series,148>, <org.jfree.data.general.Series,149>, <org.jfree.data.general.Series,150>, <org.jfree.data.general.Series,160>, <org.jfree.data.general.Series,172>, <org.jfree.data.general.Series,173>, <org.jfree.data.general.Series,174>, <org.jfree.data.general.Series,176>, <org.jfree.data.general.Series,187>, <org.jfree.data.general.Series,199>, <org.jfree.data.general.Series,200>, <org.jfree.data.general.Series,201>, <org.jfree.data.general.Series,203>, <org.jfree.data.general.Series,214>, <org.jfree.data.general.Series,258>, <org.jfree.data.general.Series,259>, <org.jfree.data.general.Series,261>, <org.jfree.data.general.Series,262>, <org.jfree.data.general.Series,264>, <org.jfree.data.general.Series,265>, <org.jfree.data.general.Series,266>, <org.jfree.data.general.Series,268>, <org.jfree.data.general.Series,269>, <org.jfree.data.general.Series,271>, <org.jfree.data.general.Series,281>, <org.jfree.data.general.Series,282>, <org.jfree.data.general.Series,284>, <org.jfree.data.general.Series,297>, <org.jfree.data.general.Series,298>, <org.jfree.data.general.Series,307>, <org.jfree.data.general.Series,308>, <org.jfree.data.general.Series,330>, <org.jfree.data.general.Series,331>, <org.jfree.data.general.Series,344>, <org.jfree.data.general.Series,345>, <org.jfree.data.general.Series,353>, <org.jfree.data.general.Series,354>, <org.jfree.data.general.Series,365>, <org.jfree.data.general.Series,367>, <org.jfree.data.time.TimeSeries,205>, <org.jfree.data.time.TimeSeries,218>, <org.jfree.data.time.TimeSeries,219>, <org.jfree.data.time.TimeSeries,220>, <org.jfree.data.time.TimeSeries,221>, <org.jfree.data.time.TimeSeries,231>, <org.jfree.data.time.TimeSeries,243>, <org.jfree.data.time.TimeSeries,244>, <org.jfree.data.time.TimeSeries,245>, <org.jfree.data.time.TimeSeries,246>, <org.jfree.data.time.TimeSeries,265>, <org.jfree.data.time.TimeSeries,277>, <org.jfree.data.time.TimeSeries,292>]
======================org.jfree.data.time.TimeSeries,564
========
add(maxY,true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
add(item);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(DEFAULT_DOMAIN_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'text\' argument.");
}
add(item,true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.data.add(DEFAULT_DOMAIN_DESCRIPTION);
add(item,true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(DEFAULT_DOMAIN_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'text\' argument.");
}
this.data.add(DEFAULT_DOMAIN_DESCRIPTION);
add(item,true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
add(maxY+(maxY*maximumItemCount),true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireChartChanged();
add(item,true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireChangeEvent();
add(item,true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireOverlayChanged();
add(item,true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new java.util.ArrayList(1).add(new Integer(maximumItemCount));
add(item,true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fireDatasetChanged(new DatasetChangeInfo());
add(item,true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
add(item,true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.data.add(item);
add(item,true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fireSeriesChanged();
add(item,true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
add(item,true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
fireSeriesChanged();
add(item,true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.data.add(item);
fireSeriesChanged();
add(item,true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
fireSeriesChanged();
add(item,true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
org.jfree.data.time.TimeSeries,565
Find no block!
org.jfree.data.time.TimeSeries,1050
========
if(end<0){
throw new IllegalArgumentException("Requires start >= 0.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
throw new IllegalArgumentException("Requires start >= 0.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(start<0){
throw new IllegalArgumentException("Requires start <= end.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<0){
throw new IllegalArgumentException("Requires start <= end.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(newline<0){
throw new IllegalArgumentException("Requires start >= 0.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0){
throw new IllegalArgumentException("Requires start >= 0.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.jfree.data.time.TimeSeries,1053
========
if(end<start){
throw new IllegalArgumentException("Requires start >= 0.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<=start){
throw new IllegalArgumentException("Requires start <= end.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
if(end<=start){
return end;
}
throw new IllegalArgumentException("Requires start <= end.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<newline){
throw new IllegalArgumentException("Requires start <= end.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
if(end>start){
return newline;
}
throw new IllegalArgumentException("Requires start <= end.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(include<start){
throw new IllegalArgumentException("Requires start <= end.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<INCLUDE_FIRST){
throw new IllegalArgumentException("Requires start <= end.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
if(start==SerialDate.INCLUDE_FIRST){
return (maximumItemCount>=start&&s<end);
}else if(include==SerialDate.INCLUDE_SECOND){
return (s>start&&s<=end);
}else {
return (s>start&&s<end);
}
throw new IllegalArgumentException("Requires start <= end.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(newline<start){
throw new IllegalArgumentException("Requires start <= end.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldIndex<start){
throw new IllegalArgumentException("Requires start <= end.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
throw new IllegalArgumentException("Requires start <= end.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count<start){
throw new IllegalArgumentException("Requires start <= end.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.jfree.data.time.TimeSeries,1056
========
if(end<start){
throw new IllegalArgumentException("Requires start >= 0.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
throw new IllegalArgumentException("Requires start >= 0.");
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.categoryKeys=(Comparable[])this.categoryKeys.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesKeys=(Comparable[])this.seriesKeys.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.startData=clone(this.startData);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.endData=clone(this.endData);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.legendItemShape=ShapeUtilities.clone(this.legendItemShape);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesPaintList=(PaintList)this.seriesPaintList.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesOutlinePaintList=(PaintList)this.seriesOutlinePaintList.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesOutlineStrokeList=(StrokeList)this.seriesOutlineStrokeList.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.keys=(ArrayList)this.keys.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.values=(ArrayList)this.values.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.indexMap=(HashMap)this.indexMap.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
result.defaultGroup=(Comparable)KeyToGroupMap.clone(this.defaultGroup);
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
result.keyToGroupMap=(Map)KeyToGroupMap.clone(this.keyToGroupMap);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
result.legendBar=ShapeUtilities.clone(this.legendBar);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("Null \'itemParameterName\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(DEFAULT_DOMAIN_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'seriesParameterName\' argument.");
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.DEFAULT_DOMAIN_DESCRIPTION=prefix;
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.DEFAULT_DOMAIN_DESCRIPTION=seriesParameterName;
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(DEFAULT_DOMAIN_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'seriesParameterName\' argument.");
}
if(end<start){
throw new IllegalArgumentException("Null \'itemParameterName\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
clone.itemLabelGeneratorList=(ObjectList)this.itemLabelGeneratorList.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.values=(DefaultKeyedValues2D)this.values.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.workingCalendar=(Calendar)this.workingCalendar.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.dates=new java.util.ArrayList(this.dates);
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.dayFormatter=(NumberFormat)this.dayFormatter.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.secondFormatter=(NumberFormat)this.secondFormatter.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.bounds=(Rectangle2D)ShapeUtilities.clone(this.bounds);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.legendLine=ShapeUtilities.clone(this.legendLine);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.shape=ShapeUtilities.clone(this.shape);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.line=ShapeUtilities.clone(this.line);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(length<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("The \'polygon\' array must "+"contain an even number of items.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
chart.renderingHints=(RenderingHints)this.renderingHints.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.tickLabelFormat=(NumberFormat)this.tickLabelFormat.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(clone.dataset!=null){
clone.dataset.addChangeListener((MeterPlot)super.clone());
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.drawingSupplier=(DrawingSupplier)ObjectUtilities.clone(this.drawingSupplier);
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.intervalDelegate=(IntervalXYDelegate)this.intervalDelegate.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.keys=new java.util.ArrayList(this.keys);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.rowKeys=new java.util.ArrayList(this.rowKeys);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.rows=(List)ObjectUtilities.deepClone(this.rows);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.pieChart=(JFreeChart)this.pieChart.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.sectionPaints=new HashMap(this.sectionPaints);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.underlying=(TaskSeriesCollection)this.underlying.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.urlSeries=new java.util.ArrayList(this.urlSeries);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.formatter=(NumberFormat)this.formatter.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesFilled=(BooleanList)this.seriesFilled.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.zValues=DataUtilities.clone(this.zValues);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.legendArea=ShapeUtilities.clone(this.legendArea);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data!=null){
clone.data=ArrayUtilities.clone(this.data);
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.timeZone=(TimeZone)this.timeZone.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
if(clone.legendItemToolTipGenerator instanceof PublicCloneable){
clone.legendItemToolTipGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemToolTipGenerator);
}
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
if(clone.legendItemURLGenerator instanceof PublicCloneable){
clone.legendItemURLGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemURLGenerator);
}
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.backgroundAnnotations=(List)ObjectUtilities.deepClone(this.backgroundAnnotations);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(clone.legendItemToolTipGenerator instanceof PublicCloneable){
clone.legendItemToolTipGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemToolTipGenerator);
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.backgroundAnnotations=(List)ObjectUtilities.deepClone(this.backgroundAnnotations);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
if(clone.legendItemURLGenerator instanceof PublicCloneable){
clone.legendItemURLGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemURLGenerator);
}
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
if(clone.legendItemURLGenerator instanceof PublicCloneable){
clone.legendItemURLGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemURLGenerator);
}
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.backgroundAnnotations=(List)ObjectUtilities.deepClone(this.backgroundAnnotations);
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.backgroundAnnotations=(List)ObjectUtilities.deepClone(this.backgroundAnnotations);
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
if(clone.legendItemURLGenerator instanceof PublicCloneable){
clone.legendItemURLGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemURLGenerator);
}
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.entities=new java.util.ArrayList(this.entities.size());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(clone.dataset!=null){
clone.dataset.addChangeListener((PiePlot)super.clone());
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(position<position){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(position<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<position){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("\'position\' out of bounds.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("Index outside valid range.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(series<start){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("Index \'series\' out of range.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(series<start){
throw new IllegalArgumentException("Index \'series\' out of range.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<series){
throw new IllegalArgumentException("Index \'series\' out of range.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(series<series){
throw new IllegalArgumentException("Index \'series\' out of range.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<maximum){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
if(maximumItemCount<0){
throw new IllegalArgumentException("Negative \'maximum\' argument.");
}
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
clone.domainAxes=new ObjectList();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if((start<0)||(series>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
(XYSeries)this.data.get(start).removeChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.remove(start);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
setSelectionState(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.sublabels=new HashMap(this.sublabels);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.plot=null;
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if((start<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
(YIntervalSeries)this.data.get(start).removeChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
(XIntervalSeries)this.data.get(start).removeChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.remove(start);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if((start<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if((start<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.remove(start);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.remove(start);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if((start<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
(XYSeries)this.data.get(start).removeChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if((start<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
(XYSeries)this.data.get(start).removeChangeListener(this);
this.data.remove(start);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
(XYSeries)this.data.get(start).removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
(XYSeries)this.data.get(start).removeChangeListener(this);
this.data.remove(start);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if((start<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
(XYSeries)this.data.get(start).removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if((start<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
(XYSeries)this.data.get(start).removeChangeListener(this);
this.data.remove(start);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
(XYSeries)this.data.get(start).removeChangeListener(this);
this.data.remove(start);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if((start<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
(XYIntervalSeries)this.data.get(start).removeChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if((start<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("TaskSeriesCollection.remove(): index outside valid range.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
(TaskSeries)this.data.get(start).removeChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.foregroundDomainMarkers=(Map)ObjectUtilities.clone(this.foregroundDomainMarkers);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.intervalDelegate=new IntervalXYDelegate((CategoryTableXYDataset)super.clone());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.intervalDelegate.setFixedIntervalWidth(getIntervalWidth());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.intervalDelegate.setAutoWidth(isAutoWidth());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.intervalDelegate.setIntervalPositionFactor(getIntervalPositionFactor());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.listeners=new EventListenerList();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.xCrosshairs=(List)ObjectUtilities.deepClone(this.xCrosshairs);
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(startIndex<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.tickLabelFontMap=new HashMap(this.tickLabelFontMap);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.tickLabelPaintMap=new HashMap(this.tickLabelPaintMap);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.categoryLabelToolTips=new HashMap(this.categoryLabelToolTips);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(pos<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireSeriesChanged();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
updateBoundsForRemovedItem((XYDataItem)this.data.remove(start));
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new SeriesException("X-value already exists.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index<start){
throw new SeriesException("X-value already exists.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldIndex<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
if(start>=0){
return (TimeSeriesDataItem)this.data.get(index);
}else {
return null;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(remove<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<VERTICAL){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<=start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(position<=start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
if(end<=start){
return end;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<newline){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
if(end>start){
return newline;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if(this.data.size()==0){
return ;
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.clear();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.data.clear();
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new SeriesException("There is no existing value for the "+"specified \'period\'.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index<start){
throw new SeriesException("There is no existing value for the "+"specified \'period\'.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(keyIndex<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index<start){
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("the time period ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" but the series already contains an observation");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("the time period ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" but the series already contains an observation");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(newline<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.jfree.data.time.TimeSeries,1057
========
clone.shape=ShapeUtilities.clone(this.shape);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.line=ShapeUtilities.clone(this.line);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.itemLabelGeneratorList=(ObjectList)this.itemLabelGeneratorList.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.toolTipGeneratorList=(ObjectList)this.toolTipGeneratorList.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.item!=null){
clone.xDateFormat=(DateFormat)this.xDateFormat.clone();
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.foregroundDomainMarkers=(Map)ObjectUtilities.clone(this.foregroundDomainMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.backgroundDomainMarkers=(Map)ObjectUtilities.clone(this.backgroundDomainMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.foregroundRangeMarkers=(Map)ObjectUtilities.clone(this.foregroundRangeMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.backgroundRangeMarkers=(Map)ObjectUtilities.clone(this.backgroundRangeMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int index=start;index<=seriesCount;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.data.add(item.clone());
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
updateBoundsForRemovedItem(clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.frame=(BlockFrame)item.clone();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.bounds=(Rectangle2D)ShapeUtilities.clone(this.bounds);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
result.legendBar=ShapeUtilities.clone(this.legendBar);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.legendItemShape=ShapeUtilities.clone(this.legendItemShape);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getItemCount()>this.end){
XYDataItem clone=(XYDataItem)this.data.remove(0);
updateBoundsForRemovedItem(removed);
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.item!=null){
clone.percentFormat=(NumberFormat)this.percentFormat.clone();
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.entities.add(item.clone());
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.subplotInfo.add(item.clone());
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone=(TimeSeriesDataItem)(TimeSeriesDataItem)this.data.get(index).clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
(TimeSeriesDataItem)this.data.get(index).setValue(item.getValue());
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.datasets=(ValueDataset[])this.datasets.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesNeedle=(MeterNeedle[])this.seriesNeedle.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.drawingSupplier=(DrawingSupplier)ObjectUtilities.clone(this.drawingSupplier);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.listenerList=new EventListenerList();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(null!=null){
result=Collections.unmodifiableCollection(result);
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=itemCount;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.item!=null){
clone.legendTextPaint=(PaintList)this.legendTextPaint.clone();
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.rangeAxis=(ValueAxis)ObjectUtilities.clone(this.rangeAxis);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(clone.rangeAxis!=null){
clone.rangeAxis.setPlot((ThermometerPlot)super.clone());
clone.rangeAxis.addChangeListener(clone);
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.valueFormat=(NumberFormat)this.valueFormat.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.subrangePaint=(Paint[])this.subrangePaint.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.timeZone=(TimeZone)this.timeZone.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.underlying=(XYDataset)item.clone();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.underlying=(GanttCategoryDataset)item.clone();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.underlying=(CategoryDataset)item.clone();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.object=item.clone();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.paintScale=(PaintScale)item.clone();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.domainAxisLocations=(ObjectList)this.domainAxisLocations.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.rangeAxes=new ObjectList();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chart.renderingHints=(RenderingHints)this.renderingHints.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chart.subtitles=new ArrayList();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(clone.legendItemURLGenerator instanceof PublicCloneable){
clone.legendItemURLGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemURLGenerator);
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.foregroundAnnotations=(List)ObjectUtilities.deepClone(this.foregroundAnnotations);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.backgroundAnnotations=(List)ObjectUtilities.deepClone(this.backgroundAnnotations);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(clone.legendItemToolTipGenerator instanceof PublicCloneable){
clone.legendItemToolTipGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemToolTipGenerator);
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.foregroundAnnotations=(List)ObjectUtilities.deepClone(this.foregroundAnnotations);
clone.backgroundAnnotations=(List)ObjectUtilities.deepClone(this.backgroundAnnotations);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.foregroundAnnotations=(List)ObjectUtilities.deepClone(this.foregroundAnnotations);
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.backgroundAnnotations=(List)ObjectUtilities.deepClone(this.backgroundAnnotations);
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.foregroundAnnotations=(List)ObjectUtilities.deepClone(this.foregroundAnnotations);
clone.backgroundAnnotations=(List)ObjectUtilities.deepClone(this.backgroundAnnotations);
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.rangeAxisLocations=(ObjectList)ObjectUtilities.clone(this.rangeAxisLocations);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.datasets=(ObjectList)ObjectUtilities.clone(this.datasets);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.rangeAxes=(ObjectList)ObjectUtilities.clone(this.rangeAxes);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.domainAxisLocations=(ObjectList)this.domainAxisLocations.clone();
for(int index=start;index<end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(clone!=null){
removeLayer(existing);
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireChangeEvent();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.remove(index);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.remove(index);
fireChangeEvent();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.data=new java.util.ArrayList();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=count;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
result=(Number)data.get(index).doubleValue();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.tickLabelFormat=(NumberFormat)this.tickLabelFormat.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.intervals=new java.util.ArrayList(this.intervals);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
System.arraycopy(data[0],0,new double[x.length],0,x.length);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
System.arraycopy(data[1],0,new double[y.length],0,y.length);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.seriesList.add(index,new double[][]{new double[x.length],new double[y.length]});
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
System.arraycopy(data[0],0,new double[x.length],0,x.length);
System.arraycopy(data[1],0,new double[y.length],0,y.length);
clone.seriesList.add(index,new double[][]{new double[x.length],new double[y.length]});

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if(index>=data.size()){
break;
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int index=start;index<=end;index++){
if(item!=null){
item.setBounds(new Rectangle2D.Double(start*maxY,start*maxY,width,height));
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if(index>=data.size()){
break;
}
if(item!=null){
item.setBounds(new Rectangle2D.Double(start*maxY,start*maxY,width,height));
}

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
toAdd=item.clone();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
datasetChanged(clone);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
copy.data=new java.util.ArrayList();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index>=0){
return item.getObject(index);
}else {
return null;
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.index=DefaultAxisEditor.getInstance(clone);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
System.arraycopy(clone,0,new double[z.length],0,z.length);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.seriesList.add(index,new double[][]{new double[x.length],new double[y.length],new double[z.length]});
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
System.arraycopy(data[0],0,new double[x.length],0,x.length);
System.arraycopy(data[1],0,new double[y.length],0,y.length);
System.arraycopy(clone,0,new double[z.length],0,z.length);
clone.seriesList.add(index,new double[][]{new double[x.length],new double[y.length],new double[z.length]});

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
System.arraycopy(data[0],0,new double[x.length],0,x.length);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
System.arraycopy(data[1],0,new double[y.length],0,y.length);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
System.arraycopy(data[0],0,new double[x.length],0,x.length);
System.arraycopy(data[1],0,new double[y.length],0,y.length);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
System.arraycopy(data[0],0,new double[x.length],0,x.length);
System.arraycopy(data[1],0,new double[y.length],0,y.length);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if((Block)data.get(index)!=null){
maxH=Math.max(clone,item.getHeight());
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if(index>=data.size()){
break;
}
if((Block)data.get(index)!=null){
maxH=Math.max(clone,item.getHeight());
}

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if((Block)data.get(index)!=null){
maxW=Math.max(clone,item.getWidth());
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if(index>=data.size()){
break;
}
if((Block)data.get(index)!=null){
maxW=Math.max(clone,item.getWidth());
}

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
data.add(DEFAULT_DOMAIN_DESCRIPTION);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int index=start;index<=np;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
x[i]=cpi.x;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
d[i]=cpi.y;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
x[i]=cpi.x;
d[i]=cpi.y;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
result=(Number)data.get(0).doubleValue();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.entities=(EntityCollection)item.clone();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
item.removeChangeListener(this);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<seriesCount;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.data=new java.util.ArrayList(clone);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.rows.add(item.clone());
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.columnKeys=new java.util.ArrayList(this.columnKeys);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.rowKeys=new java.util.ArrayList(this.rowKeys);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.rows=new java.util.ArrayList(this.rows.size());
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if(!Arrays.equals((double[][])this.data.get(index)[0],(double[][])that.seriesList.get(index)[0])){
return false;
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if(!Arrays.equals((double[][])this.data.get(index)[1],clone)){
return false;
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if(!Arrays.equals((double[][])this.data.get(index)[0],(double[][])that.seriesList.get(index)[0])){
return false;
}
if(!Arrays.equals((double[][])this.data.get(index)[1],clone)){
return false;
}

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.maximumItemCount=start;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(isTickMarksVisible()){
maxY=getTickMarkOutsideLength();
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
configureDomainAxes();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
configureRangeAxes();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
item.removeChangeListener(this);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireChartChanged();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=numberOfColumns;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
result=item.getDomainAxis(index);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
result=item.getRangeAxis(index);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<count;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.foregroundDomainMarkers=cloneMarkerMap(this.foregroundDomainMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=last;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=n;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
totalWeight+=item.getWeight();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<n;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
totalWeight+=item.getWeight();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=n;index++){
totalWeight+=item.getWeight();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<n;index++){
totalWeight+=item.getWeight();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=samples;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.maximumItemCount=width;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.maximumItemCount=height;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.maximumItemCount=maximumItemCount;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.maximumItemCount=maximumItemCount;
this.maximumItemCount=start;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
data.add(removeStringDelimiters(DEFAULT_DOMAIN_DESCRIPTION.substring(clone,line.length())));
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=datasetCount;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if(item!=null){
item.addChangeListener(this);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=rendererCount;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
if(item!=null){
item.addChangeListener(this);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<rendererCount;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=rendererCount;index++){
if(item!=null){
item.addChangeListener(this);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<rendererCount;index++){
if(item!=null){
item.addChangeListener(this);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
updateBounds(item.getPeriod(),index);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.backgroundRangeMarkers=cloneMarkerMap(this.backgroundRangeMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);
clone.foregroundDomainMarkers=cloneMarkerMap(this.foregroundDomainMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);
clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);
clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.foregroundDomainMarkers=cloneMarkerMap(this.foregroundDomainMarkers);
clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.foregroundDomainMarkers=cloneMarkerMap(this.foregroundDomainMarkers);
clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);
clone.foregroundDomainMarkers=cloneMarkerMap(this.foregroundDomainMarkers);
clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);
clone.foregroundDomainMarkers=cloneMarkerMap(this.foregroundDomainMarkers);
clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);
clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.foregroundDomainMarkers=cloneMarkerMap(this.foregroundDomainMarkers);
clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);
clone.foregroundDomainMarkers=cloneMarkerMap(this.foregroundDomainMarkers);
clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;start<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int index=start;start<end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int index=start;start<=count;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;start<count;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.baseItemLabelGenerator=(CategoryItemLabelGenerator)item.clone();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.baseToolTipGenerator=(CategoryToolTipGenerator)item.clone();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.baseURLGenerator=(CategoryURLGenerator)item.clone();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=values.length;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=length;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if(values[i]<maxY){
if(maxY<0.0){
fraction=0.0;
}
binIndex=(int)(maxY*start);
if(index>=start){
binIndex=start-1;
}
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
item.incrementCount();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if(values[i]<maxY){
if(maxY<0.0){
fraction=0.0;
}
binIndex=(int)(maxY*start);
if(index>=start){
binIndex=start-1;
}
}
item.incrementCount();

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
removeRow(index);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
removeValue(index);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<this.end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=this.end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=cols;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=rows;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=series;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=count;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
item.clear();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if(item.getDescription().equals(DEFAULT_DOMAIN_DESCRIPTION)){
result=item;
break;
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if(item!=null){
item.zoomRange(maxY,maxY);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
if(item!=null){
item.zoomRange(maxY,maxY);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=entityCount;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if(item.getArea().contains(maxY,maxY)){
return item;
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=domainAxisCount;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=rangeAxisCount;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
average+=item.doubleValue();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if(item!=null){
item.removeChangeListener(this);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if(item!=null){
item.configure();
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
if(item!=null){
item.removeChangeListener(this);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
if(item!=null){
item.configure();
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=lowerCoordinates;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=(end-start);index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int index=start;index<=start;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int index=start;index<=bins;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<start;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int index=start;index<=end;index++){
item.handleClick(start,start,clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
item.handleClick(start,start,clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=minorTickSpaces;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if(item!=null){
RectangleEdge clone=getDomainAxisEdge(index);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if(item!=null){
RectangleEdge clone=getRangeAxisEdge(index);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
if(item!=null){
RectangleEdge clone=getDomainAxisEdge(index);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
if(item!=null){
RectangleEdge clone=getRangeAxisEdge(index);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
start++;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fireDatasetChanged(clone);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
this.data.remove(clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.removePropertyChangeListener(this);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
this.data.remove(clone);
clone.removePropertyChangeListener(this);

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
this.data.remove(clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
clone.removePropertyChangeListener(this);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
this.data.remove(clone);
clone.removePropertyChangeListener(this);

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
this.data.remove(clone);
clone.removePropertyChangeListener(this);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
this.data.remove(clone);
this.data.remove(clone);
clone.removePropertyChangeListener(this);

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.removePropertyChangeListener(this);
this.data.remove(clone);
clone.removePropertyChangeListener(this);

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
this.data.remove(clone);
clone.removePropertyChangeListener(this);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
this.data.remove(clone);
this.data.remove(clone);
clone.removePropertyChangeListener(this);

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
clone.removePropertyChangeListener(this);
this.data.remove(clone);
clone.removePropertyChangeListener(this);

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
this.data.remove(clone);
clone.removePropertyChangeListener(this);
this.data.remove(clone);
clone.removePropertyChangeListener(this);

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
this.data.remove(clone);
clone.removePropertyChangeListener(this);
this.data.remove(clone);
clone.removePropertyChangeListener(this);

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
updateBoundsForAddedItem(clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.minY=Double.NaN;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.maxY=Double.NaN;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.minY=Double.NaN;
this.maxY=Double.NaN;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int index=start;index<itemCount;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
maxY+=maxY;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int index=start;index<=i;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<datasetCount;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.start=index;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
invalidateRangeInfo();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireSeriesChanged();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int index=start;index<=end;index++){
new java.util.ArrayList().add(item.getKey());
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
minval=Math.min(clone,item.doubleValue());
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
maxval=Math.max(maxY,item.doubleValue());
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
minval=Math.min(clone,item.doubleValue());
maxval=Math.max(maxY,item.doubleValue());

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
configureDomainAxes();
configureRangeAxes();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<series;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item==null){
return ;
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
item.add(clone);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
xNumber=new Long(item.getTime());
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Collections.sort(this.data);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.data.clear();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fireDatasetChanged(new DatasetChangeInfo());
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
datasetChanged(new DatasetChangeEvent(this,getDataset(index),new DatasetChangeInfo()));
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.clone=Math.max(this.size,maximumItemCount+1);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
item.setParent(clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
result.subplots=(List)ObjectUtilities.deepClone(this.subplots);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=subCategoryCount;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
maxY=direction%360;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
data.add(new NumberTick(new Double(serialVersionUID),"",TextAnchor.CENTER,TextAnchor.CENTER,0.0));
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
item.setParent((CombinedRangeCategoryPlot)super.clone());
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((CombinedRangeCategoryPlot)super.clone().getRangeAxis()!=null){
rangeAxis.configure();
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
item.setParent((CombinedDomainXYPlot)super.clone());
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((CombinedDomainXYPlot)super.clone().getDomainAxis()!=null){
domainAxis.configure();
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
item.setParent((CombinedRangeXYPlot)super.clone());
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((CombinedRangeXYPlot)super.clone().getRangeAxis()!=null){
rangeAxis.configure();
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
item.removeChangeListener(this);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.remove(index);
fireDatasetChanged(new DatasetChangeInfo());
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
item.removeChangeListener(this);
this.data.remove(index);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
item.removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
item.removeChangeListener(this);
this.data.remove(index);
fireDatasetChanged(new DatasetChangeInfo());
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.item=(double[])coefficients.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index==-1){
return DEFAULT_DOMAIN_DESCRIPTION;
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone=lookupSectionPaint(getSectionKey(index),false);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new JPanel(new BorderLayout()).setBorder(BorderFactory.createEmptyBorder(2,2,2,2));
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
item.setBorder(BorderFactory.createEmptyBorder(0,5,0,5));
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
data.add(clone);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(polygon.length%2!=0){
throw new IllegalArgumentException("The \'polygon\' array must "+"contain an even number of items.");
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.item=(double[])polygon.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(DEFAULT_DOMAIN_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'seriesParameterName\' argument.");
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(DEFAULT_DOMAIN_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'itemParameterName\' argument.");
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.item=(DateFormat)dateFormat.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.DEFAULT_DOMAIN_DESCRIPTION=prefix;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.DEFAULT_DOMAIN_DESCRIPTION=seriesParameterName;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.DEFAULT_DOMAIN_DESCRIPTION=itemParameterName;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(DEFAULT_DOMAIN_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'seriesParameterName\' argument.");
}
if(DEFAULT_DOMAIN_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'itemParameterName\' argument.");
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
clone.setModifier(index);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.add(clone);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item==null){
return -1;
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new JPanel(new BorderLayout()).add(new JScrollPane(clone));
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index=4*lenX;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
repaint();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireOverlayChanged();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.minY=Double.NaN;
for(int index=start;index<=end;index++){
updateBoundsForAddedItem(clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.maxY=Double.NaN;
for(int index=start;index<=end;index++){
updateBoundsForAddedItem(clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.minY=Double.NaN;
this.maxY=Double.NaN;
for(int index=start;index<=end;index++){
updateBoundsForAddedItem(clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=limit1;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
item.addAttributes(clone,start,index);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
start=index;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int index=start;index<=end;index++){
item.addAttributes(clone,start,index);
start=index;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.item=new java.util.ArrayList();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.item.add(clone);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index>maximumItemCount){
delete(0,count-maximum);
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=size;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<size;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.datasets=(ValueDataset[])this.datasets.clone();
clone.seriesNeedle=(MeterNeedle[])this.seriesNeedle.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<minorTickSpaces;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
average+=item.doubleValue();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
average+=item.doubleValue();
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
average+=item.doubleValue();
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
average+=item.doubleValue();
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
average+=item.doubleValue();
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=datasetCount;index++){
if(item!=null){
item.addChangeListener(this);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<datasetCount;index++){
if(item!=null){
item.addChangeListener(this);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.clear();
for(int index=start;index<=end;index++){
item.removeChangeListener(this);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireDatasetChanged(new DatasetChangeInfo());
for(int index=start;index<=end;index++){
item.removeChangeListener(this);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.clear();
fireDatasetChanged(new DatasetChangeInfo());
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.clear();
fireDatasetChanged(new DatasetChangeInfo());
for(int index=start;index<=end;index++){
item.removeChangeListener(this);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
configureRangeAxes();
fireChangeEvent();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
try{
return Color.decode(DEFAULT_DOMAIN_DESCRIPTION);
}catch (NumberFormatException nfe) {
  try {
    final Field f=Color.class.getField(value);
    return (Color)f.get(null);
  }
 catch (  Exception ce) {
    return Color.black;
  }
}

for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>index){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
break;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
average+=item.doubleValue();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.clear();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fireDatasetChanged(new DatasetChangeInfo());
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=numberOfColumns;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>end){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case 1 :

if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((index<0)||(series>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
item.removeChangeListener(this);
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.remove(index);
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
minval=Math.min(Double.POSITIVE_INFINITY,clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
maxval=Math.max(Double.NEGATIVE_INFINITY,clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
minval=Math.min(Double.POSITIVE_INFINITY,clone);
maxval=Math.max(Double.NEGATIVE_INFINITY,clone);

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index=4*lenX;
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
average+=item.doubleValue();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
average+=item.doubleValue();
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<=end;index++){
average+=item.doubleValue();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<=end;index++){
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
average+=item.doubleValue();
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
average+=item.doubleValue();
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<end;index++){
average+=item.doubleValue();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<end;index++){
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<end;index++){
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<=end;index++){
average+=item.doubleValue();
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<=end;index++){
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
average+=item.doubleValue();
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<end;index++){
average+=item.doubleValue();
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<end;index++){
average+=item.doubleValue();
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<end;index++){
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.itemLabelGeneratorList=(ObjectList)this.itemLabelGeneratorList.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.toolTipGeneratorList=(ObjectList)this.toolTipGeneratorList.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.item!=null){
clone.seriesVisibleList=(BooleanList)this.seriesVisibleList.clone();
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(clone.dataset!=null){
clone.dataset.addChangeListener((PiePlot)super.clone());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.legendItemShape=ShapeUtilities.clone(this.legendItemShape);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.shape=ShapeUtilities.clone(this.shape);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.line=ShapeUtilities.clone(this.line);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.clone!=null){
clone.legendLine=ShapeUtilities.clone(this.legendLine);
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
clone.legendItemShape=ShapeUtilities.clone(this.legendItemShape);
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
clone.seriesPaintList=(PaintList)this.seriesPaintList.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
clone.seriesOutlinePaintList=(PaintList)this.seriesOutlinePaintList.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.categoryKeys=(Comparable[])this.categoryKeys.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesKeys=(Comparable[])this.seriesKeys.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.startData=clone(this.startData);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.endData=clone(this.endData);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.item!=null){
clone.xDateFormat=(DateFormat)this.xDateFormat.clone();
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
result.defaultGroup=(Comparable)KeyToGroupMap.clone(this.defaultGroup);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
result.groups=(List)KeyToGroupMap.clone(this.groups);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
result.keyToGroupMap=(Map)KeyToGroupMap.clone(this.keyToGroupMap);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
clone.keys=(ArrayList)this.keys.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
clone.values=(ArrayList)this.values.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
clone.domainAxes=new ObjectList();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
clone.domainAxisLocations=(ObjectList)this.domainAxisLocations.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
result.legendBar=ShapeUtilities.clone(this.legendBar);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.bounds=(Rectangle2D)ShapeUtilities.clone(this.bounds);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.shape=ShapeUtilities.clone(this.shape);
clone.line=ShapeUtilities.clone(this.line);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.legendLine=ShapeUtilities.clone(this.legendLine);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.values=(DefaultKeyedValues2D)this.values.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.workingCalendar=(Calendar)this.workingCalendar.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.dayFormatter=(NumberFormat)this.dayFormatter.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.secondFormatter=(NumberFormat)this.secondFormatter.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.item!=null){
clone.percentFormat=(NumberFormat)this.percentFormat.clone();
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.item!=null){
clone.numberFormat=(NumberFormat)this.numberFormat.clone();
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.item!=null){
clone.dateFormatter=(DateFormat)this.dateFormatter.clone();
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
if(clone.dataset!=null){
clone.dataset.addChangeListener((ThermometerPlot)super.clone());
}
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.valueFormat=(NumberFormat)this.valueFormat.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.subrangePaint=(Paint[])this.subrangePaint.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
chart.renderingHints=(RenderingHints)this.renderingHints.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.drawingSupplier=(DrawingSupplier)ObjectUtilities.clone(this.drawingSupplier);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.listenerList=new EventListenerList();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.pieChart=(JFreeChart)this.pieChart.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.sectionPaints=new HashMap(this.sectionPaints);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.intervalDelegate=(IntervalXYDelegate)this.intervalDelegate.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
clone.columnKeys=new java.util.ArrayList(this.columnKeys);
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
clone.rowKeys=new java.util.ArrayList(this.rowKeys);
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.rangeAxisLocations=(ObjectList)ObjectUtilities.clone(this.rangeAxisLocations);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.datasets=(ObjectList)ObjectUtilities.clone(this.datasets);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.datasetToDomainAxesMap=new TreeMap();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.datasetToRangeAxesMap=new TreeMap();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.datasetToRangeAxesMap.putAll(this.datasetToRangeAxesMap);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.renderers=(ObjectList)this.renderers.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.tickLabelFormat=(NumberFormat)this.tickLabelFormat.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.intervals=new java.util.ArrayList(this.intervals);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(clone.dataset!=null){
clone.dataset.addChangeListener((MeterPlot)super.clone());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.item!=null){
clone.dateFormatOverride=(DateFormat)this.dateFormatOverride.clone();
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.item!=null){
clone.numberFormatOverride=(NumberFormat)this.numberFormatOverride.clone();
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.zValues=DataUtilities.clone(this.zValues);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.legendArea=ShapeUtilities.clone(this.legendArea);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.timeZone=(TimeZone)this.timeZone.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.underlying=(TaskSeriesCollection)this.underlying.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.data=(KeyedObjects2D)this.data.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.data=(KeyedObjects)this.data.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.formatter=(NumberFormat)this.formatter.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesFilled=(BooleanList)this.seriesFilled.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.intervalDelegate=new IntervalXYDelegate(clone);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.intervalDelegate.setFixedIntervalWidth(getIntervalWidth());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.intervalDelegate.setAutoWidth(isAutoWidth());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.intervalDelegate.setIntervalPositionFactor(getIntervalPositionFactor());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.updateXPoints();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.keys=new java.util.ArrayList(this.keys);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>index){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.dates=new java.util.ArrayList(this.dates);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.items=new java.util.ArrayList(this.items);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
clone.seriesKeys=new java.util.ArrayList(this.seriesKeys);
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.columnKeys=new java.util.ArrayList(this.columnKeys);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.rowKeys=new java.util.ArrayList(this.rowKeys);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.rows=(List)ObjectUtilities.deepClone(this.rows);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.clone!=null){
clone.toolTipSeries=new java.util.ArrayList(this.toolTipSeries);
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone=(TimeSeriesDataItem)item.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.urlSeries=new java.util.ArrayList(this.urlSeries);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.lookupTable=new java.util.ArrayList(this.lookupTable);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.tickUnits=new java.util.ArrayList(this.tickUnits);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireSeriesChanged();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.data.clear();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fireDatasetChanged(new DatasetChangeInfo());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesLabelLists=new HashMap();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
updateBoundsForRemovedItem(clone);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
break;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(clone!=null){
removeLayer(existing);
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireChangeEvent();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item!=null){
layer.removeChangeListener(this);
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.remove(index);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item!=null){
pointer.removeChangeListener(this);
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.remove(index);
fireChangeEvent();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0){
throw new IllegalArgumentException("Negative \'index\'.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=numberOfColumns;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
clone.values=(DefaultKeyedValues2D)this.values.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.intervalDelegate.setFixedIntervalWidth(getIntervalWidth());
clone.intervalDelegate.setAutoWidth(isAutoWidth());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.intervalDelegate.setFixedIntervalWidth(getIntervalWidth());
clone.intervalDelegate.setIntervalPositionFactor(getIntervalPositionFactor());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.intervalDelegate.setAutoWidth(isAutoWidth());
clone.intervalDelegate.setIntervalPositionFactor(getIntervalPositionFactor());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.intervalDelegate.setFixedIntervalWidth(getIntervalWidth());
clone.intervalDelegate.setAutoWidth(isAutoWidth());
clone.intervalDelegate.setIntervalPositionFactor(getIntervalPositionFactor());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesList=(List)ObjectUtilities.deepClone(this.seriesList);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.tasks=(List)ObjectUtilities.deepClone(this.tasks);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.bins=(List)ObjectUtilities.deepClone(this.bins);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.items=(List)ObjectUtilities.deepClone(this.items);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item!=null){
start=urlMap.size();
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.sublabels=new HashMap(this.sublabels);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(start<0||index>=index){
throw new IllegalArgumentException("Index "+index);
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
duplicate.listenerList=new EventListenerList();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.plot=null;
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.clone=new ZoomHandler();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.add(clone);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item.startsWith("mac os x")){
index=InputEvent.ALT_MASK;
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new PanHandler().setModifier(index);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.add(new PanHandler());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item!=null){
existing.removeChangeListener(this);
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
datasetChanged(clone);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item!=null){
existing.removeChangeListener(this);
}
datasetChanged(clone);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((Object[])data.get(index+1)[0]==null){
start=-((Integer)(Object[])data.get(index)[0]).intValue()-1;
}else {
series=((Integer)curr[0]).intValue();
if(series<0){
series=-((Integer)prev[0]).intValue()-1;
}
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.xCrosshairs=(List)ObjectUtilities.deepClone(this.xCrosshairs);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.yCrosshairs=(List)ObjectUtilities.deepClone(this.yCrosshairs);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.listeners=new EventListenerList();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
configureDomainAxes();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
configureRangeAxes();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(maximumItemCount>1){
maxY=height+this.maxY*(blockCount-1);
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(maximumItemCount>1){
maxY=width+this.maxY*(blockCount-1);
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((index<0)||(series>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
item.removeChangeListener(this);
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
this.data.remove(index);
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>end){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
clone.tickLabelFontMap=new HashMap(this.tickLabelFontMap);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.tickLabelPaintMap=new HashMap(this.tickLabelPaintMap);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.categoryLabelToolTips=new HashMap(this.categoryLabelToolTips);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(data.isEmpty()){
return null;
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
item.removeChangeListener(this);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.remove(index);
fireDatasetChanged(new DatasetChangeInfo());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
item.removeChangeListener(this);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
this.data.remove(index);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
fireDatasetChanged(new DatasetChangeInfo());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
item.removeChangeListener(this);
this.data.remove(index);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
item.removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
item.removeChangeListener(this);
this.data.remove(index);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
item.removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
this.data.remove(index);
fireDatasetChanged(new DatasetChangeInfo());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
item.removeChangeListener(this);
this.data.remove(index);
fireDatasetChanged(new DatasetChangeInfo());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
item.removeChangeListener(this);
this.data.remove(index);
fireDatasetChanged(new DatasetChangeInfo());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("TaskSeriesCollection.remove(): index outside valid range.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!Arrays.equals((double[][])this.data.get(index)[0],(double[][])that.seriesList.get(index)[0])){
return false;
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!Arrays.equals((double[][])this.data.get(index)[1],clone)){
return false;
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0||series>=getSeriesCount()){
throw new IllegalArgumentException("Invalid series index: "+series);
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
result.subplots=(List)ObjectUtilities.deepClone(this.subplots);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case 1 :

TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((CombinedRangeCategoryPlot)super.clone().getRangeAxis()!=null){
rangeAxis.configure();
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((CombinedDomainXYPlot)super.clone().getDomainAxis()!=null){
domainAxis.configure();
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((CombinedRangeXYPlot)super.clone().getRangeAxis()!=null){
rangeAxis.configure();
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item!=null){
maxY=n.doubleValue();
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new HashMap().put("values.length",new Integer(values.length));
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new HashMap().put("bin width",new Double(maxY));
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.add(new HashMap());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
item=(TimeSeriesDataItem)item.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item==null){
return ;
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index>=getDatasetCount()){
return ;
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item==null){
return ;
}
if(index>=getDatasetCount()){
return ;
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
if(DEFAULT_DOMAIN_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'text\' argument.");
}
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.data.add(clone);
TimeSeries copy=(TimeSeries)super.clone();
if(DEFAULT_DOMAIN_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'text\' argument.");
}
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index==null){
throw new IllegalArgumentException("Unsupported image format - "+DEFAULT_DOMAIN_DESCRIPTION);
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!getItemVisible(maximumItemCount,maximumItemCount)){
return ;
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0){
return ;
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
item.setBounds(new Rectangle2D.Double(0.0,0.0,s.width,s.height));
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
maxY=direction%360;
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(maxY<0.0){
direction=direction+360.0;
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((index<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
item.setBounds(clone);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
start=4*lenX;
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((index<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
item.removeChangeListener(this);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((index<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
this.data.remove(index);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((index<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
fireDatasetChanged(new DatasetChangeInfo());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((index<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
item.removeChangeListener(this);
this.data.remove(index);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((index<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
item.removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((index<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
this.data.remove(index);
fireDatasetChanged(new DatasetChangeInfo());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((index<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
item.removeChangeListener(this);
this.data.remove(index);
fireDatasetChanged(new DatasetChangeInfo());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item==null){
return -1;
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.maxY=1.0;
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
org.jfree.data.time.TimeSeries,1058
org.jfree.data.time.TimeSeries,1059
org.jfree.data.time.TimeSeries,1060
org.jfree.data.time.TimeSeries,1062
org.jfree.data.time.TimeSeries,1064
org.jfree.data.time.TimeSeries,1068
Find no block!
org.jfree.data.time.TimeSeries,1071
========
if(this.data.size()>index){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
break;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
average+=item.doubleValue();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.clear();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fireDatasetChanged(new DatasetChangeInfo());
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=numberOfColumns;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
clone.data=(List)ObjectUtilities.deepClone(this.data);
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return ts;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>end){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
minval=Math.min(Double.POSITIVE_INFINITY,clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
maxval=Math.max(Double.NEGATIVE_INFINITY,clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
minval=Math.min(Double.POSITIVE_INFINITY,clone);
maxval=Math.max(Double.NEGATIVE_INFINITY,clone);

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((index<0)||(series>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
item.removeChangeListener(this);
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.remove(index);
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case 1 :

if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return VALUE_ANTIALIAS_ON;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index=4*lenX;
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
average+=item.doubleValue();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
average+=item.doubleValue();
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<=end;index++){
average+=item.doubleValue();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<=end;index++){
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
average+=item.doubleValue();
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
average+=item.doubleValue();
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<end;index++){
average+=item.doubleValue();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<end;index++){
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<end;index++){
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<=end;index++){
average+=item.doubleValue();
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<=end;index++){
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
average+=item.doubleValue();
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<end;index++){
average+=item.doubleValue();
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<end;index++){
average+=item.doubleValue();
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<end;index++){
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return black;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
try{
return Color.decode(DEFAULT_DOMAIN_DESCRIPTION);
}catch (NumberFormatException nfe) {
  try {
    final Field f=Color.class.getField(value);
    return (Color)f.get(null);
  }
 catch (  Exception ce) {
    return Color.black;
  }
}

if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
return copy;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.jfree.data.general.Series,243
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.categoryKeys=(Comparable[])this.categoryKeys.clone();
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.seriesKeys=(Comparable[])this.seriesKeys.clone();
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.startData=clone(this.startData);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.endData=clone(this.endData);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.legendItemShape=ShapeUtilities.clone(this.legendItemShape);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.seriesPaintList=(PaintList)this.seriesPaintList.clone();
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.seriesOutlinePaintList=(PaintList)this.seriesOutlinePaintList.clone();
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.seriesOutlineStrokeList=(StrokeList)this.seriesOutlineStrokeList.clone();
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.keys=(ArrayList)this.keys.clone();
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.values=(ArrayList)this.values.clone();
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.indexMap=(HashMap)this.indexMap.clone();
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
result.defaultGroup=(Comparable)KeyToGroupMap.clone(this.defaultGroup);
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
result.groups=(List)KeyToGroupMap.clone(this.groups);
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
result.keyToGroupMap=(Map)KeyToGroupMap.clone(this.keyToGroupMap);
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.drawingSupplier=(DrawingSupplier)ObjectUtilities.clone(this.drawingSupplier);
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.values=(DefaultKeyedValues2D)this.values.clone();
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.workingCalendar=(Calendar)this.workingCalendar.clone();
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.dayFormatter=(NumberFormat)this.dayFormatter.clone();
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.secondFormatter=(NumberFormat)this.secondFormatter.clone();
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.legendLine=ShapeUtilities.clone(this.legendLine);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.shape=ShapeUtilities.clone(this.shape);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.line=ShapeUtilities.clone(this.line);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.quadrantOrigin=(Point2D)ObjectUtilities.clone(this.quadrantOrigin);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.quadrantPaint=(Paint[])this.quadrantPaint.clone();
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.bounds=(Rectangle2D)ShapeUtilities.clone(this.bounds);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
result.legendBar=ShapeUtilities.clone(this.legendBar);
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.key instanceof PublicCloneable){
PublicCloneable (PublicCloneable)this.key=(PublicCloneable)this.seriesKey;
clone.seriesKey=(Comparable)pc.clone();
}
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.shape=ShapeUtilities.clone(this.shape);
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.itemLabelGeneratorList=(ObjectList)this.itemLabelGeneratorList.clone();
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Series clone=(Series)super.clone();
this.key=key;
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Series clone=(Series)super.clone();
this.description=description;
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.notify=true;
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Series clone=(Series)super.clone();
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.key=key;
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Series clone=(Series)super.clone();
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.description=description;
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.notify=true;
Series clone=(Series)super.clone();
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Series clone=(Series)super.clone();
this.key=key;
this.description=description;
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.notify=true;
Series clone=(Series)super.clone();
this.key=key;
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.notify=true;
Series clone=(Series)super.clone();
this.description=description;
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Series clone=(Series)super.clone();
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.key=key;
this.description=description;
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.notify=true;
Series clone=(Series)super.clone();
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.key=key;
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.notify=true;
Series clone=(Series)super.clone();
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.description=description;
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.notify=true;
Series clone=(Series)super.clone();
this.key=key;
this.description=description;
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.notify=true;
Series clone=(Series)super.clone();
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.key=key;
this.description=description;
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.pieChart=(JFreeChart)this.pieChart.clone();
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.sectionPaints=new HashMap(this.sectionPaints);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chart.renderingHints=(RenderingHints)this.renderingHints.clone();
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.underlying=(TaskSeriesCollection)this.underlying.clone();
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.data=(KeyedObjects2D)this.data.clone();
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.data=(KeyedObjects)this.data.clone();
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.formatter=(NumberFormat)this.formatter.clone();
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.seriesFilled=(BooleanList)this.seriesFilled.clone();
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.zValues=DataUtilities.clone(this.zValues);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.legendArea=ShapeUtilities.clone(this.legendArea);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.timeZone=(TimeZone)this.timeZone.clone();
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.data=(List)ObjectUtilities.deepClone(this.data);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.intervalDelegate=(IntervalXYDelegate)this.intervalDelegate.clone();
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.data=(List)ObjectUtilities.deepClone(this.data);
clone.workingCalendar=(Calendar)this.workingCalendar.clone();
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.rangeAxisLocations=(ObjectList)this.rangeAxisLocations.clone();
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.datasets=(ObjectList)this.datasets.clone();
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.tickLabelFormat=(NumberFormat)this.tickLabelFormat.clone();
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.intervals=new java.util.ArrayList(this.intervals);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
if(clone.dataset!=null){
clone.dataset.addChangeListener(clone);
}
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
if(clone.rangeAxis!=null){
clone.rangeAxis.setPlot(clone);
clone.rangeAxis.addChangeListener(clone);
}
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.valueFormat=(NumberFormat)this.valueFormat.clone();
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.subrangePaint=(Paint[])this.subrangePaint.clone();
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.domainAxisLocations=(ObjectList)this.domainAxisLocations.clone();
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.rangeAxes=(ObjectList)ObjectUtilities.clone(this.rangeAxes);
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.rangeAxisLocations=(ObjectList)ObjectUtilities.clone(this.rangeAxisLocations);
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.datasets=(ObjectList)ObjectUtilities.clone(this.datasets);
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.entities=new java.util.ArrayList(this.entities.size());
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.domainAxisLocations=(ObjectList)this.domainAxisLocations.clone();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.urlSeries=new java.util.ArrayList(this.urlSeries);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.lookupTable=new java.util.ArrayList(this.lookupTable);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.tickUnits=new java.util.ArrayList(this.tickUnits);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.sublabels=new HashMap(this.sublabels);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.seriesList=(List)ObjectUtilities.deepClone(this.seriesList);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.tasks=(List)ObjectUtilities.deepClone(this.tasks);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.bins=(List)ObjectUtilities.deepClone(this.bins);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.items=(List)ObjectUtilities.deepClone(this.items);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.data=new java.util.ArrayList();
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.data=new java.util.ArrayList(getSeriesCount());
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.foregroundDomainMarkers=(Map)ObjectUtilities.clone(this.foregroundDomainMarkers);
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.dates=new java.util.ArrayList(this.dates);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.items=new java.util.ArrayList(this.items);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.keys=new java.util.ArrayList(this.keys);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.xCrosshairs=(List)ObjectUtilities.deepClone(this.xCrosshairs);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.yCrosshairs=(List)ObjectUtilities.deepClone(this.yCrosshairs);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.intervalDelegate=new IntervalXYDelegate(clone);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.intervalDelegate.setFixedIntervalWidth(getIntervalWidth());
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.intervalDelegate.setAutoWidth(isAutoWidth());
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.intervalDelegate.setIntervalPositionFactor(getIntervalPositionFactor());
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.tickLabelFontMap=new HashMap(this.tickLabelFontMap);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.tickLabelPaintMap=new HashMap(this.tickLabelPaintMap);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.categoryLabelToolTips=new HashMap(this.categoryLabelToolTips);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.columnKeys=new java.util.ArrayList(this.columnKeys);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.rowKeys=new java.util.ArrayList(this.rowKeys);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.rows=(List)ObjectUtilities.deepClone(this.rows);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.cornerTextItems=new ArrayList(this.cornerTextItems);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.backgroundRangeMarkers=cloneMarkerMap(this.backgroundRangeMarkers);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.list=new java.util.ArrayList(getSeriesCount());
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
result.subplots=(List)ObjectUtilities.deepClone(this.subplots);
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
clone.quadrantOrigin=(Point2D)ObjectUtilities.clone(this.quadrantOrigin);
clone.quadrantPaint=(Paint[])this.quadrantPaint.clone();
return clone;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.jfree.data.general.Series,244
org.jfree.data.general.Series,245
org.jfree.data.general.Series,246
org.jfree.data.time.TimeSeries,345
org.jfree.data.time.TimeSeries,360
org.jfree.data.time.TimeSeries,653
========
add(BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics(data),value,true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(DEFAULT_DOMAIN_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'text\' argument.");
}
add(period,value,true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.data.add(DEFAULT_DOMAIN_DESCRIPTION);
add(period,value,true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(DEFAULT_DOMAIN_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'text\' argument.");
}
this.data.add(DEFAULT_DOMAIN_DESCRIPTION);
add(period,value,true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
new java.util.ArrayList(1).add(new Integer(maximumItemCount));
add(period,value,true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.value=value;
add(period,value,true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.maxY=value;
add(period,value,true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fireChartChanged();
add(period,value,true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireChangeEvent();
add(period,value,true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireOverlayChanged();
add(period,value,true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(value<=0.0){
throw new IllegalArgumentException("Requires \'value\' > 0.0.");
}
add(period,value,true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(value<=0.0){
throw new IllegalArgumentException("Requires \'value\' > 0.0.");
}
this.value=value;
add(period,value,true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireDatasetChanged(new DatasetChangeInfo());
add(period,value,true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireSeriesChanged();
add(period,value,true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(Collections.binarySearch(this.data,new TimeSeriesDataItem(period,value))<0){
throw new SeriesException("There is no existing value for the "+"specified \'period\'.");
}
add(period,value,true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
org.jfree.data.time.TimeSeries,654
Find no block!
org.jfree.data.time.TimeSeries,666
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(period,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(value,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
item=(TimeSeriesDataItem)item.clone();
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
this.data.add(-maximumItemCount-1,item);
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
item=(TimeSeriesDataItem)item.clone();
this.data.add(-maximumItemCount-1,item);
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
maximumItemCount++;
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(value+(value*maximumItemCount),notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(maxY,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
if(Collections.binarySearch(this.data,item)<0){
throw new SeriesException("There is no existing value for the "+"specified \'period\'.");
}
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
this.value=value;
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data=new java.util.ArrayList();
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
configureRangeAxes();
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,RectangleEdge.RIGHT);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,RectangleEdge.TOP);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
new java.util.ArrayList(1).add(new Integer(maximumItemCount));
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
if(!Double.isNaN(value)){
notify=oldY<=this.minY||oldY>=this.maxY;
}
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
this.maxY=value;
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(notify){
fireChangeEvent();
}
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
if(DEFAULT_DOMAIN_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'text\' argument.");
}
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
this.data.add(DEFAULT_DOMAIN_DESCRIPTION);
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
if(DEFAULT_DOMAIN_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'text\' argument.");
}
this.data.add(DEFAULT_DOMAIN_DESCRIPTION);
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(notify){
fireDatasetChanged(new DatasetChangeInfo());
}
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
setValue(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(notify){
notifyListeners(new RendererChangeEvent(this));
}
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(notify){
fireSelectionEvent();
}
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireChartChanged();
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireChangeEvent();
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireOverlayChanged();
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
this.notify=notify;
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
this.maximumItemCount=maximumItemCount;
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
this.notify=circular;
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(notify){
RendererChangeEvent new RendererChangeEvent(this,true)=new RendererChangeEvent(this,true);
notifyListeners(e);
}
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireDatasetChanged(new DatasetChangeInfo());
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
if(range==null){
throw new IllegalArgumentException("Null \'range\' argument.");
}
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.notify=true;
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(notify){
notifyListeners(new AxisChangeEvent(this));
}
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
if(maximumItemCount!=0){
throw new IllegalArgumentException("Invalid series: "+series);
}
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
this.notify[item]=selected;
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
this.data.add(item);
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fireSeriesChanged();
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fireSeriesChanged();
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fireSeriesChanged();
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
this.data.add(item);
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fireSeriesChanged();
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
if(value<=0.0){
throw new IllegalArgumentException("Requires \'value\' > 0.0.");
}
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
TimeSeriesDataItem item=new TimeSeriesDataItem(period,value);
if(value<=0.0){
throw new IllegalArgumentException("Requires \'value\' > 0.0.");
}
this.value=value;
add(item,notify);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.jfree.data.time.TimeSeries,667
org.jfree.data.time.TimeSeries,668
Find no block!
org.jfree.data.time.TimeSeries,680
org.jfree.data.time.TimeSeries,681
Find no block!
org.jfree.data.time.TimeSeries,693
org.jfree.data.time.TimeSeries,694
org.jfree.data.time.TimeSeries,695
Find no block!
org.jfree.data.time.Year,114
Find no block!
org.jfree.data.time.Year,115
========
if((year<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year>=1900)&&(year<=9999)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year>=1900)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<Year.MINIMUM_YEAR)||(year<=9999)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year>=1900)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<Year.MINIMUM_YEAR)&&(year<=9999)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year>=1900)&&(year<=9999)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year>=1900)||(year<=9999)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year>=1900)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<Year.MINIMUM_YEAR)||(year<=9999)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year>=1900)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<Year.MINIMUM_YEAR)&&(year<=9999)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year>=1900)||(year<=9999)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((day<Year.MINIMUM_YEAR)||(day>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year>=1)&&(year<=SerialDate.lastDayOfMonth(MINIMUM_YEAR,year))){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year>=1)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<Year.MINIMUM_YEAR)||(year<=SerialDate.lastDayOfMonth(MINIMUM_YEAR,year))){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((day<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(day>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year>=1)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<Year.MINIMUM_YEAR)&&(year<=SerialDate.lastDayOfMonth(MINIMUM_YEAR,year))){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year>=1)&&(year<=SerialDate.lastDayOfMonth(MINIMUM_YEAR,year))){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year>=1)||(year<=SerialDate.lastDayOfMonth(MINIMUM_YEAR,year))){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year>=1)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<Year.MINIMUM_YEAR)||(year<=SerialDate.lastDayOfMonth(MINIMUM_YEAR,year))){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year>=1)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<Year.MINIMUM_YEAR)&&(year<=SerialDate.lastDayOfMonth(MINIMUM_YEAR,year))){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year>=1)||(year<=SerialDate.lastDayOfMonth(MINIMUM_YEAR,year))){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
if(this.year!=that.year){
return false;
}
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((month<Year.MINIMUM_YEAR)||(month>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<1)||(year>12)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<1)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<Year.MINIMUM_YEAR)||(year>12)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((month<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(month>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Month outside valid range.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.year=month;
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.year=year;
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<1)||(year>12)){
throw new IllegalArgumentException("Month outside valid range.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
peg(Calendar.getInstance());
if((year<1)||(year>12)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<1)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Month outside valid range.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
peg(Calendar.getInstance());
if((year<1)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<Year.MINIMUM_YEAR)||(year>12)){
throw new IllegalArgumentException("Month outside valid range.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)||(year>12)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Month outside valid range.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
peg(Calendar.getInstance());
if((year<1)||(year>12)){
throw new IllegalArgumentException("Month outside valid range.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
peg(Calendar.getInstance());
if((year<1)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Month outside valid range.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)||(year>12)){
throw new IllegalArgumentException("Month outside valid range.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((quarter<Year.MINIMUM_YEAR)||(quarter>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<FIRST_QUARTER)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<FIRST_QUARTER)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((quarter<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(quarter>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.year=(short)year;
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.year=(byte)quarter;
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<FIRST_QUARTER)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.year=(short)year;
if((year<FIRST_QUARTER)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
peg(Calendar.getInstance());
if((year<FIRST_QUARTER)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.year=(short)year;
if((year<Year.MINIMUM_YEAR)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.year=(short)year;
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<FIRST_QUARTER)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.year=(short)year;
if((year<FIRST_QUARTER)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
peg(Calendar.getInstance());
if((year<FIRST_QUARTER)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.year=(short)year;
if((year<FIRST_QUARTER)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
peg(Calendar.getInstance());
if((year<FIRST_QUARTER)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<FIRST_QUARTER)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.year=(short)year;
if((year<Year.MINIMUM_YEAR)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.year=(short)year;
if((year<FIRST_QUARTER)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
peg(Calendar.getInstance());
if((year<FIRST_QUARTER)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<FIRST_QUARTER)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<FIRST_QUARTER)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((week<Year.MINIMUM_YEAR)||(week>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<FIRST_WEEK_IN_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<FIRST_WEEK_IN_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((week<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(week>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.year=(byte)week;
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<FIRST_WEEK_IN_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.year=(short)year;
if((year<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<FIRST_WEEK_IN_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.year=(short)year;
if((year<FIRST_WEEK_IN_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
peg(Calendar.getInstance());
if((year<FIRST_WEEK_IN_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.year=(short)year;
if((year<Year.MINIMUM_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.year=(short)year;
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<FIRST_WEEK_IN_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.year=(short)year;
if((year<FIRST_WEEK_IN_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
peg(Calendar.getInstance());
if((year<FIRST_WEEK_IN_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.year=(short)year;
if((year<Year.MINIMUM_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.year=(short)year;
if((year<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.year=(short)year;
if((year<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
peg(Calendar.getInstance());
if((year<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.year=(short)year;
if((year<FIRST_WEEK_IN_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
peg(Calendar.getInstance());
if((year<FIRST_WEEK_IN_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<FIRST_WEEK_IN_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.year=(short)year;
if((year<Year.MINIMUM_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<FIRST_WEEK_IN_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.year=(short)year;
if((year<FIRST_WEEK_IN_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
peg(Calendar.getInstance());
if((year<FIRST_WEEK_IN_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.year=(short)year;
if((year<FIRST_WEEK_IN_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
peg(Calendar.getInstance());
if((year<FIRST_WEEK_IN_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<FIRST_WEEK_IN_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.year=(short)year;
if((year<Year.MINIMUM_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.year=(short)year;
if((year<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
peg(Calendar.getInstance());
if((year<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<FIRST_WEEK_IN_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<Year.MINIMUM_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.jfree.data.time.Year,119
========
if((month<Year.MINIMUM_YEAR)||(month>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<1)||(year>12)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<1)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<Year.MINIMUM_YEAR)||(year>12)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((month<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(month>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Month outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<1)||(year>12)){
throw new IllegalArgumentException("Month outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<1)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Month outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<Year.MINIMUM_YEAR)||(year>12)){
throw new IllegalArgumentException("Month outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((quarter<Year.MINIMUM_YEAR)||(quarter>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<FIRST_QUARTER)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<FIRST_QUARTER)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((quarter<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(quarter>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=(byte)quarter;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<FIRST_QUARTER)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<FIRST_QUARTER)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((week<Year.MINIMUM_YEAR)||(week>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<FIRST_WEEK_IN_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<FIRST_WEEK_IN_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((week<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(week>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<FIRST_WEEK_IN_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<FIRST_WEEK_IN_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<FIRST_WEEK_IN_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<FIRST_WEEK_IN_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<FIRST_WEEK_IN_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<FIRST_WEEK_IN_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<FIRST_WEEK_IN_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<FIRST_WEEK_IN_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<FIRST_WEEK_IN_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year>=1900)&&(year<=9999)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year>=1900)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<Year.MINIMUM_YEAR)||(year<=9999)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year>=1900)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<Year.MINIMUM_YEAR)&&(year<=9999)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year>=1900)&&(year<=9999)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year>=1900)||(year<=9999)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year>=1900)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<Year.MINIMUM_YEAR)||(year<=9999)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year>=1900)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<Year.MINIMUM_YEAR)&&(year<=9999)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year>=1900)||(year<=9999)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
if(this.year!=that.year){
return false;
}
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((day<Year.MINIMUM_YEAR)||(day>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year>=1)&&(year<=SerialDate.lastDayOfMonth(MINIMUM_YEAR,year))){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year>=1)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<Year.MINIMUM_YEAR)||(year<=SerialDate.lastDayOfMonth(MINIMUM_YEAR,year))){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((day<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(day>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year>=1)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<Year.MINIMUM_YEAR)&&(year<=SerialDate.lastDayOfMonth(MINIMUM_YEAR,year))){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year>=1)&&(year<=SerialDate.lastDayOfMonth(MINIMUM_YEAR,year))){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year>=1)||(year<=SerialDate.lastDayOfMonth(MINIMUM_YEAR,year))){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year>=1)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<Year.MINIMUM_YEAR)||(year<=SerialDate.lastDayOfMonth(MINIMUM_YEAR,year))){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year>=1)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<Year.MINIMUM_YEAR)&&(year<=SerialDate.lastDayOfMonth(MINIMUM_YEAR,year))){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year>=1)||(year<=SerialDate.lastDayOfMonth(MINIMUM_YEAR,year))){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Null \'serialDate\' argument.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=year.getYear();
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((month<Year.MINIMUM_YEAR)||(year>12)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((month<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Month outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<1)||(month>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(month>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Month outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((month<Year.MINIMUM_YEAR)||(month>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Month outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((month<Year.MINIMUM_YEAR)||(year>12)){
throw new IllegalArgumentException("Month outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<1)||(month>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Month outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year.getYear();
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((quarter<Year.MINIMUM_YEAR)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((quarter<FIRST_QUARTER)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((quarter<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<FIRST_QUARTER)||(quarter>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(quarter>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(quarter>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((quarter<FIRST_QUARTER)||(quarter>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((quarter<Year.MINIMUM_YEAR)||(quarter>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((quarter<Year.MINIMUM_YEAR)||(quarter>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((quarter<FIRST_QUARTER)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((quarter<Year.MINIMUM_YEAR)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((quarter<FIRST_QUARTER)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<FIRST_QUARTER)||(quarter>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<FIRST_QUARTER)||(quarter>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(quarter>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((quarter<FIRST_QUARTER)||(quarter>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((quarter<FIRST_QUARTER)||(quarter>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((quarter<Year.MINIMUM_YEAR)||(quarter>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((quarter<FIRST_QUARTER)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<FIRST_QUARTER)||(quarter>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=(short)year.getYear();
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((week<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((week<Year.MINIMUM_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((week<FIRST_WEEK_IN_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((week<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)&&(week>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<FIRST_WEEK_IN_YEAR)||(week>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(week>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((week<Year.MINIMUM_YEAR)&&(week>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((week<FIRST_WEEK_IN_YEAR)||(week>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((week<Year.MINIMUM_YEAR)||(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((week<Year.MINIMUM_YEAR)||(week>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((week<Year.MINIMUM_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((week<FIRST_WEEK_IN_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((week<Year.MINIMUM_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((week<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((week<Year.MINIMUM_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((week<FIRST_WEEK_IN_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<FIRST_WEEK_IN_YEAR)&&(week>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)&&(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)&&(week>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<FIRST_WEEK_IN_YEAR)||(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<FIRST_WEEK_IN_YEAR)||(week>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((week<FIRST_WEEK_IN_YEAR)&&(week>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((week<Year.MINIMUM_YEAR)&&(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((week<Year.MINIMUM_YEAR)&&(week>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((week<FIRST_WEEK_IN_YEAR)||(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((week<FIRST_WEEK_IN_YEAR)||(week>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((week<Year.MINIMUM_YEAR)||(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((week<FIRST_WEEK_IN_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((week<Year.MINIMUM_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((week<FIRST_WEEK_IN_YEAR)&&(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((week<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<FIRST_WEEK_IN_YEAR)&&(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<FIRST_WEEK_IN_YEAR)&&(week>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)&&(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<FIRST_WEEK_IN_YEAR)||(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.MINIMUM_YEAR=START;
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((year<Year.MINIMUM_YEAR)||(year>Year.MAXIMUM_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
super();
peg(Calendar.getInstance());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.jfree.data.time.Year,120
org.jfree.data.time.Year,121
Find no block!
org.jfree.data.time.Year,171
org.jfree.data.time.Year,211
========
peg(calendar);
this.firstMillisecond=getFirstMillisecond(calendar);
this.lastMillisecond=getLastMillisecond(calendar);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
MINIMUM_YEAR=calendar.get(Calendar.YEAR);
this.firstMillisecond=getFirstMillisecond(calendar);
this.lastMillisecond=getLastMillisecond(calendar);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(MINIMUM_YEAR,MINIMUM_YEAR,MINIMUM_YEAR,MINIMUM_YEAR,MINIMUM_YEAR,MINIMUM_YEAR);
this.firstMillisecond=getFirstMillisecond(calendar);
this.lastMillisecond=getLastMillisecond(calendar);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
org.jfree.data.time.Year,212
org.jfree.data.time.Year,213
Find no block!
org.jfree.data.time.Year,253
org.jfree.data.time.Year,268
========
calendar.set(this.year,Calendar.DECEMBER,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MINUTE,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MINUTE,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MINUTE,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MINUTE,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MINUTE,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MINUTE,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MINUTE,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
calendar.set(this.year,MINIMUM_YEAR,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
calendar.set(year,MINIMUM_YEAR,dom,this.hour,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(year,MINIMUM_YEAR,dom,this.hour,59,59);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
cal.set(this.year,Calendar.JANUARY,1,0,0,0);
cal.set(Calendar.MILLISECOND,0);
return cal.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
cal.set(Calendar.MILLISECOND,0);
return cal.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
cal.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
cal.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.add(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return cal.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.MILLISECOND,this.MINIMUM_YEAR);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
prevYearCalendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
notifyListeners(new AxisChangeEvent(this));
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.mapDatasetToDomainAxis(0,0);
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
peg(calendar);
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return (this.calendar.getTime());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireChangeEvent();
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Types.TIME :

calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Types.NULL :

calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.jfree.data.time.Year,269
org.jfree.data.time.Year,272
org.jfree.data.time.Year,287
========
calendar.set(this.year,Calendar.JANUARY,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MINUTE,999);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MINUTE,999);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MINUTE,999);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MINUTE,999);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MINUTE,999);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MINUTE,999);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MINUTE,999);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MINUTE,999);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MINUTE,999);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MINUTE,999);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MINUTE,999);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
calendar.set(this.year,MINIMUM_YEAR,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
calendar.set(year,MINIMUM_YEAR,dom,this.hour,0,0);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(year,MINIMUM_YEAR,dom,this.hour,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
cal.set(this.year,Calendar.DECEMBER,31,23,59,59);
cal.set(Calendar.MILLISECOND,999);
return cal.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
cal.set(Calendar.MILLISECOND,999);
return cal.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
cal.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
cal.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.add(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return cal.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.MILLISECOND,this.MINIMUM_YEAR);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
prevYearCalendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
notifyListeners(new AxisChangeEvent(this));
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.mapDatasetToDomainAxis(0,0);
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
peg(calendar);
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return (this.calendar.getTime());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireChangeEvent();
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Types.TIME :

calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Types.NULL :

calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.jfree.data.time.Year,288
org.jfree.data.time.Year,291
org.jfree.data.time.Year,348
========
if(o1 instanceof RegularTimePeriod){
result=this.getFirstMillisecond()<(RegularTimePeriod)o1.getFirstMillisecond()?0:(this.getFirstMillisecond()==(RegularTimePeriod)o1.getFirstMillisecond()?0:1);
}else {
result=1;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear().getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(o1 instanceof Year){
if(this.firstMillisecond<s.firstMillisecond){
return -1;
}else if(this.firstMillisecond>s.firstMillisecond){
return 1;
}else {
return 0;
}
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(o1 instanceof Year){
if(result==0){
result=this.MINIMUM_YEAR-y.getMonth();
}
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(o1 instanceof Year){
Year y=(Year)o1;
difference=this.firstMillisecond-t1.time;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(o1==this){
return true;
}
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.jfree.data.time.Year,349
org.jfree.data.time.Year,350
org.jfree.data.time.Year,351
Find no block!
org.jfree.data.time.Year,367
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear().getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
if(this.firstMillisecond<s.firstMillisecond){
return -1;
}else if(this.firstMillisecond>s.firstMillisecond){
return 1;
}else {
return 0;
}
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
if(result==0){
result=this.MINIMUM_YEAR-y.getMonth();
}
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=37*result+this.year;
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(o1!=null){
result=object.hashCode();
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
difference=this.firstMillisecond-t1.time;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(y!=null){
result=dataset.getSeriesCount();
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(this.equals(SeriesChangeType.ADD)){
result=SeriesChangeType.ADD;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(this.equals(PieDatasetChangeType.ADD)){
result=PieDatasetChangeType.ADD;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(y!=null){
result=kobj.getObject();
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(y!=null){
result=urls.size();
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(y!=null){
result=urlMap.size();
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(y!=null){
result=tooltips.size();
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=HashUtilities.hashCode(result,getToolTipText());
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=HashUtilities.hashCode(result,getURLText());
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=HashUtilities.hashCode(result,getToolTipText());
result=HashUtilities.hashCode(result,getURLText());
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=29*result+(this.o1!=null?this.obj.hashCode():0);
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
return result+1;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=HashUtilities.hashCode(result,this.MINIMUM_YEAR);
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=37*result+this.MINIMUM_YEAR;
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=37*result+getSecond().hashCode();
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=37*result+(int)this.firstMillisecond;
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=37*result+this.MINIMUM_YEAR;
result=37*result+this.year;
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(this.equals(TickType.MAJOR)){
result=TickType.MAJOR;
}else if(this.equals(TickType.MINOR)){
result=TickType.MINOR;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(this.equals(PlotOrientation.HORIZONTAL)){
result=PlotOrientation.HORIZONTAL;
}else if(this.equals(PlotOrientation.VERTICAL)){
result=PlotOrientation.VERTICAL;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(this.equals(AreaRendererEndType.LEVEL)){
result=AreaRendererEndType.LEVEL;
}else if(this.equals(AreaRendererEndType.TAPER)){
result=AreaRendererEndType.TAPER;
}else if(this.equals(AreaRendererEndType.TRUNCATE)){
result=AreaRendererEndType.TRUNCATE;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(this.equals(PieLabelLinkStyle.STANDARD)){
result=PieLabelLinkStyle.STANDARD;
}else if(this.equals(PieLabelLinkStyle.QUAD_CURVE)){
result=PieLabelLinkStyle.QUAD_CURVE;
}else if(this.equals(PieLabelLinkStyle.CUBIC_CURVE)){
result=PieLabelLinkStyle.CUBIC_CURVE;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=(int)(firstMillisecond^(temp>>>32));
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=29*result+(int)(firstMillisecond^(temp>>>32));
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=37*result+(int)(this.firstMillisecond^(this.segmentSize>>>32));
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=37*result+(int)(this.firstMillisecond^(this.startTime>>>32));
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=37*result+(int)(firstMillisecond^(temp>>>32));
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=HashUtilities.hashCode(result,size());
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=(int)(firstMillisecond^(temp>>>32));
result=29*result+(int)(firstMillisecond^(temp>>>32));
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=37*result+(int)(firstMillisecond^(l>>>32));
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>0){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(0);
result=29*result+item.hashCode();
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>1){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count-1);
result=29*result+item.hashCode();
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>2){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count/2);
result=29*result+item.hashCode();
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=29*result+this.MINIMUM_YEAR;
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=29*result+(int)this.firstMillisecond;
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=29*result+this.MINIMUM_YEAR;
result=29*result+(int)this.firstMillisecond;
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
result=37*result+(int)(this.firstMillisecond^(this.baseMillis>>>32));
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
return retval;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1==this){
return true;
}
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>0){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(0);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>1){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count-1);
result=29*result+item.hashCode();
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>0){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(0);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>2){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count/2);
result=29*result+item.hashCode();
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>0){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(0);
result=29*result+item.hashCode();
}
result=29*result+this.MINIMUM_YEAR;
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>0){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(0);
result=29*result+item.hashCode();
}
result=29*result+(int)this.firstMillisecond;
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>1){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count-1);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>2){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count/2);
result=29*result+item.hashCode();
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>1){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count-1);
result=29*result+item.hashCode();
}
result=29*result+this.MINIMUM_YEAR;
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>1){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count-1);
result=29*result+item.hashCode();
}
result=29*result+(int)this.firstMillisecond;
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>2){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count/2);
result=29*result+item.hashCode();
}
result=29*result+this.MINIMUM_YEAR;
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>2){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count/2);
result=29*result+item.hashCode();
}
result=29*result+(int)this.firstMillisecond;
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>0){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(0);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>1){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count-1);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>2){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count/2);
result=29*result+item.hashCode();
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>0){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(0);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>1){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count-1);
result=29*result+item.hashCode();
}
result=29*result+this.MINIMUM_YEAR;
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>0){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(0);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>1){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count-1);
result=29*result+item.hashCode();
}
result=29*result+(int)this.firstMillisecond;
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>0){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(0);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>2){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count/2);
result=29*result+item.hashCode();
}
result=29*result+this.MINIMUM_YEAR;
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>0){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(0);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>2){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count/2);
result=29*result+item.hashCode();
}
result=29*result+(int)this.firstMillisecond;
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>0){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(0);
result=29*result+item.hashCode();
}
result=29*result+this.MINIMUM_YEAR;
result=29*result+(int)this.firstMillisecond;
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>1){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count-1);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>2){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count/2);
result=29*result+item.hashCode();
}
result=29*result+this.MINIMUM_YEAR;
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>1){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count-1);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>2){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count/2);
result=29*result+item.hashCode();
}
result=29*result+(int)this.firstMillisecond;
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>1){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count-1);
result=29*result+item.hashCode();
}
result=29*result+this.MINIMUM_YEAR;
result=29*result+(int)this.firstMillisecond;
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>2){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count/2);
result=29*result+item.hashCode();
}
result=29*result+this.MINIMUM_YEAR;
result=29*result+(int)this.firstMillisecond;
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>0){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(0);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>1){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count-1);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>2){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count/2);
result=29*result+item.hashCode();
}
result=29*result+this.MINIMUM_YEAR;
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>0){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(0);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>1){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count-1);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>2){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count/2);
result=29*result+item.hashCode();
}
result=29*result+(int)this.firstMillisecond;
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>0){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(0);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>1){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count-1);
result=29*result+item.hashCode();
}
result=29*result+this.MINIMUM_YEAR;
result=29*result+(int)this.firstMillisecond;
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>0){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(0);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>2){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count/2);
result=29*result+item.hashCode();
}
result=29*result+this.MINIMUM_YEAR;
result=29*result+(int)this.firstMillisecond;
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int result;
if(o1 instanceof Year){
Year y=(Year)o1;
result=this.year-y.getYear();
}else if(o1 instanceof RegularTimePeriod){
result=0;
}else {
result=1;
}
if(MINIMUM_YEAR>1){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count-1);
result=29*result+item.hashCode();
}
if(MINIMUM_YEAR>2){
TimeSeriesDataItem getRawDataItem(MINIMUM_YEAR/2)=getRawDataItem(count/2);
result=29*result+item.hashCode();
}
result=29*result+this.MINIMUM_YEAR;
result=29*result+(int)this.firstMillisecond;
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.jfree.data.general.Series,315
========
if(this.notify){
this.gridBandsVisible=notify;
notifyListeners(new SeriesChangeEvent(this));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.notify){
this.verticalTickLabels=notify;
notifyListeners(new SeriesChangeEvent(this));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.notify){
this.inverted=notify;
notifyListeners(new SeriesChangeEvent(this));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.notify){
this.autoRangeIncludesZero=notify;
notifyListeners(new SeriesChangeEvent(this));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.notify){
notifyListeners(new AxisChangeEvent(this));
notifyListeners(new SeriesChangeEvent(this));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.notify){
this.autoRangeIncludesZero=notify;
notifyListeners(new AxisChangeEvent(this));

notifyListeners(new SeriesChangeEvent(this));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.notify){
this.autoRangeStickyZero=notify;
notifyListeners(new SeriesChangeEvent(this));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.notify){
this.autoRangeStickyZero=notify;
notifyListeners(new AxisChangeEvent(this));

notifyListeners(new SeriesChangeEvent(this));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.notify){
this.text=description;
notifyListeners(new SeriesChangeEvent(this));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
notifyListeners(new DialLayerChangeEvent(this));
if(this.notify){
notifyListeners(new SeriesChangeEvent(this));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
notifyListeners(new AxisChangeEvent(this));
if(this.notify){
notifyListeners(new SeriesChangeEvent(this));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.notify){
this.notify=notify;
notifyListeners(new SeriesChangeEvent(this));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
org.jfree.data.general.Series,316
org.jfree.data.general.Series,318
Find no block!
org.jfree.data.general.Series,328
========
if(listenerList[i]!=SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(clone.datasets[i]!=null){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(clone.datasets[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(listenerList[i]==null){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(listenerList[i]!=null){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).setPaint(event);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
description+=description.substring(0,i)+description;
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==null){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=listeners.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=ls.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
invalidateRangeInfo();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]!=SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=listenerList.length-2;i>=0;i-=2){
if(clone.datasets[i]!=null){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=listenerList.length-2;i>=0;i-=2){
if(clone.datasets[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]!=null){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=listenerList.length-2;i>=data.length;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=listenerList.length-2;i>=length;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
description=s.trim();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=listenerList.length-1;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).setPaint(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=listenerList.length-2;i>=0;i-=2){
if(array1[i]==null){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=listenerList.length-2;i>=0;i-=2){
if(array2[i]==null){
if(array1[i]!=null){
return false;
}
}
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=listenerList.length-2;i>=0;i-=2){
if(array1[i]!=array2[i]){
return false;
}
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=listenerList.length-2;i>=0;i-=2){
if(array2[i]==null){
if(array1[i]!=null){
return false;
}
}
if(array1[i]!=array2[i]){
return false;
}

if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.timeZone=(TimeZone)this.timeZone.clone();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.labelInfo=new PeriodAxisLabelInfo[this.labelInfo.length];
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=listenerList.length-2;i>0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
start=i+1;
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=listenerList.length-2;i>=0;i-=2){
if(getRenderer(i)!=null){
ValueAxis getDomainAxisForDataset(i)=getDomainAxisForDataset(i);
ValueAxis getRangeAxisForDataset(i)=getRangeAxisForDataset(i);
}
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=listenerList.length-1;i>=0;i-=2){
if(getRenderer(i)!=null){
ValueAxis getDomainAxisForDataset(i)=getDomainAxisForDataset(i);
ValueAxis getRangeAxisForDataset(i)=getRangeAxisForDataset(i);
}
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=listenerList.length-2;i>=length;i-=2){
if(listenerList[i]!=SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=listenerList.length-2;i>=length;i-=2){
if(listenerList[i]==null){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=listenerList.length-2;i>=length;i-=2){
if(listenerList[i]!=null){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>xData.length){
throw new IllegalArgumentException("Period can\'t be longer than dataset.");
}
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listeners.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=ls.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==null){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]!=SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(clone.datasets[i]!=null){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(clone.datasets[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]!=null){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=data.length;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=length;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
description=s.trim();
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).setPaint(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Object[] listenerList=this.listeners.getListenerList();
clone.timeZone=(TimeZone)this.timeZone.clone();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Object[] listenerList=this.listeners.getListenerList();
clone.labelInfo=new PeriodAxisLabelInfo[this.labelInfo.length];
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(array1[i]==null){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(array2[i]==null){
if(array1[i]!=null){
return false;
}
}
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(array1[i]!=array2[i]){
return false;
}
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(array2[i]==null){
if(array1[i]!=null){
return false;
}
}
if(array1[i]!=array2[i]){
return false;
}

if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-1;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=this.length-Long.toHexString(serialVersionUID).toUpperCase().length();i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new StringBuffer("0x").append(Long.toHexString(serialVersionUID).toUpperCase());
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(i==description.length()-1){
throw new TimePeriodFormatException("Q found at end of string.");
}
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(getRenderer(i)!=null){
ValueAxis getDomainAxisForDataset(i)=getDomainAxisForDataset(i);
ValueAxis getRangeAxisForDataset(i)=getRangeAxisForDataset(i);
}
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-1;i>=0;i-=2){
if(getRenderer(i)!=null){
ValueAxis getDomainAxisForDataset(i)=getDomainAxisForDataset(i);
ValueAxis getRangeAxisForDataset(i)=getRangeAxisForDataset(i);
}
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
description+=description.substring(0,i)+description;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i+description.length()<description.length()){
description+=searchReplace(inputString.substring(i+searchString.length()),searchString,description);
}
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=length;i-=2){
if(listenerList[i]!=SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=length;i-=2){
if(listenerList[i]==null){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=length;i-=2){
if(listenerList[i]!=null){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>xData.length){
throw new IllegalArgumentException("Period can\'t be longer than dataset.");
}
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(data1.length!=data2.length){
throw new IllegalArgumentException("\'data1\' and \'data2\' arrays must have same length.");
}
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.key=key;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.description=description;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.listeners=new EventListenerList();
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.propertyChangeSupport=new PropertyChangeSupport(this);
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.notify=true;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.key=key;
this.description=description;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.key=key;
this.listeners=new EventListenerList();
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.key=key;
this.propertyChangeSupport=new PropertyChangeSupport(this);
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.key=key;
this.notify=true;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.description=description;
this.listeners=new EventListenerList();
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.description=description;
this.propertyChangeSupport=new PropertyChangeSupport(this);
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.description=description;
this.notify=true;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.listeners=new EventListenerList();
this.notify=true;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.key=key;
this.description=description;
this.propertyChangeSupport=new PropertyChangeSupport(this);
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.key=key;
this.description=description;
this.notify=true;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.key=key;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.key=key;
this.listeners=new EventListenerList();
this.notify=true;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.key=key;
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.description=description;
this.listeners=new EventListenerList();
this.notify=true;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.description=description;
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.key=key;
this.description=description;
this.listeners=new EventListenerList();
this.notify=true;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.key=key;
this.description=description;
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.key=key;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.description=description;
this.listeners=new EventListenerList();
this.propertyChangeSupport=new PropertyChangeSupport(this);
this.notify=true;
Object[] listenerList=this.listeners.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
org.jfree.data.general.Series,329
org.jfree.data.general.Series,336
Find no block!
org.jfree.data.time.TimeSeries,429
========
return (TimeSeriesDataItem)(TimeSeriesDataItem)this.data.get(index).clone();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
return (TimeSeriesDataItem)this.data.get(index);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds");
}
return (TimeSeriesDataItem)this.data.get(index);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Index \'series\' out of range.");
}
return (TimeSeriesDataItem)this.data.get(index);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((index<0)||(index>=getSubtitleCount())){
throw new IllegalArgumentException("Index out of range.");
}
return (TimeSeriesDataItem)this.data.get(index);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("The \'series\' argument is out of bounds ("+series);
}
return (TimeSeriesDataItem)this.data.get(index);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0||series>=getSeriesCount()){
throw new IllegalArgumentException("Invalid series index: "+series);
}
return (TimeSeriesDataItem)this.data.get(index);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.jfree.data.time.TimeSeries,463
========
return (OHLCItem)getDataItem(index).getPeriod();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.jfree.data.time.TimeSeries,576
========
if(item==null){
throw new IllegalArgumentException("Null \'period\' argument.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(item!=null){
throw new IllegalArgumentException("Null \'item\' argument.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
updateBoundsForAddedItem(item);
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.data.add(-maximumItemCount-1,item);
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.data.add(-maximumItemCount-1,item);
updateBoundsForAddedItem(item);
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
org.jfree.data.time.TimeSeries,579
========
if(item!=null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(item==null){
throw new IllegalArgumentException("Null \'period\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(this.c==null){
this.timePeriodClass=item.getPeriod().getClass();
}else if(!this.timePeriodClass.equals(periodClass)){
String "You are trying to add data where the time "+"period class is "+item.getPeriod().getClass().getName()="You are trying to add data where the time "+"period class is "+periodClass.getName();
throw new SeriesException(msg);
}
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.quadrantOrigin=(Point2D)ObjectUtilities.clone(this.quadrantOrigin);
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.quadrantPaint=(Paint[])this.quadrantPaint.clone();
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item==null){
throw new IllegalArgumentException("Null \'polygon\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
if(polygon.length%2!=0){
throw new IllegalArgumentException("The \'polygon\' array must "+"contain an even number of items.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
this.data.add(-maximumItemCount-1,item);
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
updateBoundsForAddedItem(item);
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
this.data.add(-maximumItemCount-1,item);
updateBoundsForAddedItem(item);
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
chart.renderingHints=(RenderingHints)this.renderingHints.clone();
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item==null){
throw new IllegalArgumentException("Null \'coefficients\' argument");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(this.data!=null){
clone.data=ArrayUtilities.clone(this.data);
}
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.listenerList=new EventListenerList();
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
try{
Method c.getMethod("getInstance",(Class[])null)=c.getMethod("getInstance",(Class[])null);
return (Library)m.invoke(null,(Object[])null);
}catch (Exception e) {
}

if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.data.add(item);
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
updateBounds(item.getPeriod(),this.data.size()-1);
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireSeriesChanged();
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.data.add(item);
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fireSeriesChanged();
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.data.add(item);
fireSeriesChanged();
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.data.add(item);
fireSeriesChanged();
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
clone.entities=new java.util.ArrayList(this.entities.size());
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
clone.data=new java.util.ArrayList();
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item==null){
throw new NullPointerException("Library must not be null.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(item.getValue()!=null){
double item.getValue().doubleValue()=oldYN.doubleValue();
if(!Double.isNaN(oldY)){
notify=oldY<=this.minY||oldY>=this.maxY;
}
}
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.foregroundDomainMarkers=(Map)ObjectUtilities.clone(this.foregroundDomainMarkers);
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
clone.values=(DefaultKeyedValues2D)this.values.clone();
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.intervalDelegate.setFixedIntervalWidth(getIntervalWidth());
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.intervalDelegate.setAutoWidth(isAutoWidth());
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.intervalDelegate.setIntervalPositionFactor(getIntervalPositionFactor());
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(timePeriodClass.getClassLoader()==null){
return ClassLoader.getSystemClassLoader();
}else {
return applicationCL;
}
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
c=(XYDataItem)(XYDataItem)this.data.get(maximumItemCount).clone();
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!Double.isNaN((XYDataItem)this.data.get(maximumItemCount).getYValue())){
notify=oldY<=this.minY||oldY>=this.maxY;
}
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
if(DEFAULT_DOMAIN_DESCRIPTION.startsWith("/")){
return name.substring(1);
}
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(c.getName().lastIndexOf('.')==-1){
return DEFAULT_DOMAIN_DESCRIPTION;
}
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item==null){
throw new IllegalArgumentException("Null \'item\' argument.");
}
item=(TimeSeriesDataItem)item.clone();
result.subplots=(List)ObjectUtilities.deepClone(this.subplots);
Class c=item.getPeriod().getClass();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.jfree.data.time.TimeSeries,580
org.jfree.data.time.TimeSeries,581
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException("You are trying to add data where the time "+"period class is "+c.getName());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!this.timePeriodClass.equals(that.majorTickTimePeriodClass)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.timePeriodClass.equals(that.majorTickTimePeriodClass)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new IllegalArgumentException("Can\'t mix RegularTimePeriod class types.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!this.timePeriodClass.equals(that.outlineStroke)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(axis.subCategories)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(axis.subLabelFont)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(axis.subLabelPaint)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(axis.subCategories)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!ObjectUtilities.equal(this.DEFAULT_DOMAIN_DESCRIPTION,that.toolTipText)){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!ObjectUtilities.equal(this.DEFAULT_DOMAIN_DESCRIPTION,that.urlText)){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.foregroundAnnotations)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.foregroundAnnotations)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.data.equals(that.backgroundAnnotations)){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!ObjectUtilities.equal(this.c,that.timePeriodClass)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(DEFAULT_DOMAIN_DESCRIPTION)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!ObjectUtilities.equal(this.data,that.data)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.seriesKeys)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.seriesKeys)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.key)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.x)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.seriesKey)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.underlying)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.allSeriesData)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.allSeriesData)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.windDir)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.windForce)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.date)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.high)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.low)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.open)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.close)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.id)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(that.id)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.keyToGroupMap)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.period)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(position.name)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(position.name)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.tasks)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.tasks)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.bins)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.bins)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(t.name)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(t.name)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.dates)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.dates)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.items)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.items)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(type.name)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(type.name)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.frame)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.bounds)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.arrangement)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.blocks)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.blocks)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.text)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(that.text)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.font)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.shape)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.arrowPaint)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.itemFont)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.itemPaint)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.hLayout)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.vLayout)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.scale)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.stripOutlineStroke)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.renderingHints)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.area)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.rowKey)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.columnKey)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.dateFormat)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.itemParameterName)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(that.itemParameterName)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.prefix)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(that.prefix)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.seriesParameterName)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(that.seriesParameterName)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.categoryParameterName)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(that.categoryParameterName)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.name)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(that.name)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.extraLargeFont)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.largeFont)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.regularFont)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.smallFont)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.drawingSupplier)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.barPainter)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.xyBarPainter)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(order.name)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(order.name)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.shadowColor)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(alignment.name)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(alignment.name)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.positivePrefix)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(that.positivePrefix)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.daySuffix)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(that.daySuffix)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.hourSuffix)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(that.hourSuffix)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.minuteSuffix)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(that.minuteSuffix)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.secondSuffix)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(that.secondSuffix)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.dayFormatter)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.hourFormatter)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.minuteFormatter)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.secondFormatter)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(layer.name)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(layer.name)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.baseLabel)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(that.baseLabel)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.formatter)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(tf.text)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(tf.text)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(tf.font)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(tf.paint)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(other.name)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(other.name)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.groupStroke)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.point)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.lookupTable)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.lookupTable)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.gradientTransformer)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.backgroundAnnotations)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.backgroundAnnotations)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.paintScale)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.guideLinePaint)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.guideLineStroke)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.label)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(that.label)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.lineStroke)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.symbols)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.symbols)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.yearFormatter)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(this.c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!info.periodClass.equals(this.periodClass)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!info.dateFormat.equals(this.dateFormat)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!info.labelFont.equals(this.labelFont)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!info.labelPaint.equals(this.labelPaint)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!info.dividerStroke.equals(this.dividerStroke)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!info.dividerPaint.equals(this.dividerPaint)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.sublabelFont)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.sublabels)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.first)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.last)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.timeZone)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.locale)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.autoRangeTimePeriodClass)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.c.equals(that.autoRangeTimePeriodClass)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.minorTickTimePeriodClass)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.c.equals(that.minorTickTimePeriodClass)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.minorTickMarkPaint)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.minorTickMarkStroke)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.labelTemplate)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(that.labelTemplate)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.numberFormat)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.formatPattern)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(that.formatPattern)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.formatString)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(that.formatString)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.nullYString)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(that.nullYString)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.labelFormat)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(that.labelFormat)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.percentFormat)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.additionalFormatPattern)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(that.additionalFormatPattern)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.seriesLabelLists)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(generator.dateFormatter)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(generator.numberFormatter)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.quadrantOrigin)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.stroke)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.gradientPaintTransformer)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.majorTickStroke)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.minorTickStroke)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.tickLabelFont)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.dialFrame)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.layers)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.layers)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.pointers)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.pointers)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.templateValue)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.aggregatedItemsKey)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.labelGenerator)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.labelFont)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.labelOutlineStroke)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.axisLineStroke)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.baseSeriesOutlineStroke)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.angleLabelFont)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.cornerTextItems)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.cornerTextItems)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.xCrosshairs)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.xCrosshairs)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.yCrosshairs)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.yCrosshairs)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!Arrays.equals(this.data,that.data)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!DEFAULT_DOMAIN_DESCRIPTION.equals(DEFAULT_DOMAIN_DESCRIPTION)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!Arrays.equals(p1.xpoints,p2.xpoints)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!Arrays.equals(p1.ypoints,p2.ypoints)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!ObjectUtilities.equal(this.data,that.backgroundAnnotations)){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!ObjectUtilities.equal(this.data,that.foregroundAnnotations)){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.notify!=that.rangeZeroBaselineVisible){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.maximumItemCount!=that.maximumLinesToDisplay){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.notify!=that.expandToFitSpace){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!ObjectUtilities.equal(this.DEFAULT_DOMAIN_DESCRIPTION,that.toolTipText)){
return false;
}
if(!ObjectUtilities.equal(this.DEFAULT_DOMAIN_DESCRIPTION,that.urlText)){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.notify!=that.lineVisible){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.maximumItemCount!=that.pieIndex){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.maximumItemCount!=that.sectionIndex){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.maxY!=that.startPercent){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.maxY!=that.endPercent){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.notify!=that.drawXError){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.notify!=that.drawYError){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.maxY!=that.capLength){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.maxY!=that.innerSeparatorExtension){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.maxY!=that.outerSeparatorExtension){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.maxY!=that.sectionDepth){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(timePeriodValue.period)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(timePeriodValue.value)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.value)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(library.name)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(this.DEFAULT_DOMAIN_DESCRIPTION!=null?!this.name.equals(library.name):library.name!=null){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.maxY!=that.widthRadius){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.notify!=that.showOutline){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!ObjectUtilities.equal(this.data,that.subplots)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.maxY!=that.gap){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.maxY!=that.gap){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!ObjectUtilities.equal(this.data,that.subplots)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.maxY!=that.itemMargin){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.maxY!=that.maximumBarWidth){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.notify!=that.meanVisible){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.notify!=that.medianVisible){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.notify!=that.baseShapesFilled){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.notify!=that.useOutlinePaint){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.notify!=that.useSeriesOffset){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.maximumItemCount!=that.autoWidthMethod){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.maxY!=that.autoWidthFactor){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.maxY!=that.autoWidthGap){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.maxY!=that.fixedAutoRange){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.notify!=that.autoTickUnitSelection){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.notify!=that.verticalTickLabels){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.maximumItemCount!=that.minorTickCount){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.maxY!=that.lowerBound){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.maxY!=that.upperBound){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.maxY!=that.innerRadius){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.maxY!=that.outerRadius){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.maxY!=that.xOffset){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.maxY!=that.yOffset){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.maxY!=that.xOffset){
return false;
}
if(this.maxY!=that.yOffset){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.maximumItemCount!=that.dotWidth){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.maximumItemCount!=that.dotHeight){
return false;
}
if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.seriesKeys)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.seriesKeys)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(type.name)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(type.name)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.text)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(that.text)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.prefix)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(that.prefix)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.items)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.data.equals(that.items)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(order.name)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(order.name)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.name)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(that.name)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(t.name)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(t.name)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.formatPattern)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(that.formatPattern)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.labelFormat)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(that.labelFormat)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(that.label)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!this.DEFAULT_DOMAIN_DESCRIPTION.equals(that.label)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!this.timePeriodClass.equals(DEFAULT_DOMAIN_DESCRIPTION)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
if(!DEFAULT_DOMAIN_DESCRIPTION.equals(DEFAULT_DOMAIN_DESCRIPTION)){
return false;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.timePeriodClass!=null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
b.append(new Arc2D.Double(-9.0,-7.0,10,14,0.0,25.5,Arc2D.OPEN),true);
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.append(new Arc2D.Double(0.0,-7.0,10,14,154.5,25.5,Arc2D.OPEN),true);
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.closePath();
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.transform(getTransform());
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.timePeriodClass==Second.class){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.maximumItemCount=maximumItemCount-1;
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.maximumItemCount=START;
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.maximumItemCount=maximumItemCount-1;
if(this.timePeriodClass==Second.class){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
org.jfree.data.time.TimeSeries,582
org.jfree.data.time.TimeSeries,584
org.jfree.data.time.TimeSeries,596
========
if(this.timePeriodClass!=null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
b.append(new Arc2D.Double(-9.0,-7.0,10,14,0.0,25.5,Arc2D.OPEN),true);
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.append(new Arc2D.Double(0.0,-7.0,10,14,154.5,25.5,Arc2D.OPEN),true);
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.closePath();
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.transform(getTransform());
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
if(!ObjectUtilities.equal(this.c,that.timePeriodClass)){
return false;
}
int count=getItemCount();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!ObjectUtilities.equal(this.data,that.data)){
return false;
}
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.timePeriodClass==Second.class){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.maximumItemCount=maximumItemCount;
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.maximumItemCount=maximumItemCount-1;
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.count=START;
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.added=true;
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.maximumItemCount=maximumItemCount;
if(this.timePeriodClass==Second.class){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.maximumItemCount=maximumItemCount-1;
if(this.timePeriodClass==Second.class){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.maximumItemCount=maximumItemCount;
this.maximumItemCount=maximumItemCount-1;
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.maximumItemCount=maximumItemCount;
this.maximumItemCount=maximumItemCount-1;
if(this.timePeriodClass==Second.class){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
b.defaultWriteObject();
int count=getItemCount();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.writeInt(count);
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
boolean count=getItemCount();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(maximumItemCount<maximumItemCount+1){
throw new IllegalArgumentException("Not enough data.");
}
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(Double.isNaN(maxY)){
y1=0.0;
notify=true;
}
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item.getValue()!=null){
double item.getValue().doubleValue()=oldYN.doubleValue();
if(!Double.isNaN(oldY)){
count=oldY<=this.minY||oldY>=this.maxY;
}
}
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireSeriesChanged();
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(count==0){
return true;
}
if(this.timePeriodClass==null){
this.timePeriodClass=c;
}else if(!this.timePeriodClass.equals(c)){
StringBuffer b=new StringBuffer();
b.append("You are trying to add data where the time period class ");
b.append("is ");
b.append(item.getPeriod().getClass().getName());
b.append(", but the TimeSeries is expecting an instance of ");
b.append(this.timePeriodClass.getName());
b.append(".");
throw new SeriesException(b.toString());
}
boolean added=false;
int count=getItemCount();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.jfree.data.time.TimeSeries,597
org.jfree.data.time.TimeSeries,598
========
if(index<0){
if(!index){
b.append(" alt=\"\"");
}
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0){
b.append("/>");
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0){
if(!index){
b.append(" alt=\"\"");
}
b.append("/>");

this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException("X-value already exists.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index<0){
updateBoundsForRemovedItem(item);
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index<0){
fireSeriesChanged();
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index<0){
updateBoundsForRemovedItem(item);
fireSeriesChanged();

this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index<0){
updateBoundsForRemovedItem(item);
fireSeriesChanged();
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index<0){
updateBoundsForRemovedItem(item);
updateBoundsForRemovedItem(item);
fireSeriesChanged();

this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index<0){
fireSeriesChanged();
updateBoundsForRemovedItem(item);
fireSeriesChanged();

this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index<0){
updateBoundsForRemovedItem(item);
fireSeriesChanged();
updateBoundsForRemovedItem(item);
fireSeriesChanged();

this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException("There is no existing value for the "+"specified \'period\'.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fireDatasetChanged(new DatasetChangeInfo());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<count){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(count<0){
throw new IllegalArgumentException("Requires start >= 0.");
}
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
copy.data=new java.util.ArrayList();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int count=count;index<=index;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem item=(TimeSeriesDataItem)item.clone();
try{
(TimeSeries)super.clone().add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<count){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(count<0){
throw new IllegalArgumentException("Requires start >= 0.");
}
if(index<count){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(count<0){
throw new IllegalArgumentException("Requires start >= 0.");
}
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(count<0){
throw new IllegalArgumentException("Requires start >= 0.");
}
if(index<count){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index<0||index>getSubtitleCount()){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("The \'index\' argument is out of range.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fireChartChanged();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
if(index>=0){
return (TimeSeriesDataItem)this.data.get(index);
}else {
return null;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
removeValue(index);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
removeRow(index);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
row=new KeyedObjects();
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0){
setSeriesNeedle(count,new ArrowNeedle(true));
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0){
setSeriesPaint(count,Color.red);
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0){
setSeriesNeedle(count,new ArrowNeedle(true));
setSeriesPaint(count,Color.red);

this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case 1 :

if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires \'index\' >= 0.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
datasetChanged(new DatasetChangeEvent(this,getDataset(index),new DatasetChangeInfo()));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
datasetChanged(new DatasetChangeEvent(this,getDataset(index),new DatasetChangeInfo()));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires \'index\' >= 0.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Negative \'index\'.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
if(index>=0){
return getDataItem(index);
}else {
return null;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
if(index>=0){
return getValue(index);
}else {
return null;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Null \'location\' for index 0 not permitted.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(notify){
fireChangeEvent();
}
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(notify){
fireChangeEvent();
}
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Null \'location\' for index 0 not permitted.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((index<0)||(index>=getSubtitleCount())){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Index out of range.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
if(index==-1){
return DEFAULT_DOMAIN_DESCRIPTION;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(DEFAULT_DOMAIN_DESCRIPTION.startsWith("/")){
return name.substring(1);
}
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0||index>=getItemCount()){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IndexOutOfBoundsException("Invalid \'index\': "+index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index<0||index>=getItemCount()){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IndexOutOfBoundsException("Invalid \'index\': "+index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index<0){
start=count+1;
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0){
count++;
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index<0){
start=count+1;
count++;

this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
start=count+1;
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
count++;
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
start=count+1;
count++;

StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new java.util.ArrayList().add(removeStringDelimiters(b.substring(count,line.length())));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0){
count++;
this.data.add(-index-1,item);
added=true;
}else {
count++;
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Index "+count);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index<count){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Index "+count);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index<0||index>3){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("The index value ("+index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0||index>3){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("The index value ("+index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("The \'weight\' must be positive.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
configureRangeAxes();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("The \'weight\' must be positive.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("The \'weight\' must be positive.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("The \'weight\' must be positive.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
if(count>=0){
return (TickUnit)this.data.get(index);
}else {
index=-(index+1);
return (TickUnit)this.tickUnits.get(Math.min(index,this.tickUnits.size()-1));
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
index=-(count+1);
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.valueOf("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setDomainAxis(null);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getDomainAxis()!=null){
axis.configure();
}
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setRangeAxis(null);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getRangeAxis()!=null){
axis.configure();
}
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(index);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(index);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setOrientation(getOrientation());
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setOrientation(getOrientation());
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.addChangeListener(this);
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.addChangeListener(this);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.add(b);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(index);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setWeight(index);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(index);
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(index);
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(index);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(index);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setOrientation(getOrientation());
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setOrientation(getOrientation());
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.addChangeListener(this);
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(index);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setOrientation(getOrientation());
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setOrientation(getOrientation());
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.addChangeListener(this);
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.addChangeListener(this);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.add(b);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setWeight(index);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setOrientation(getOrientation());
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.setOrientation(getOrientation());
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
this.data.add(b);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(index);
b.setOrientation(getOrientation());
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(index);
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(index);
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(index);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setOrientation(getOrientation());
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.addChangeListener(this);
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.addChangeListener(this);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
this.data.add(b);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setOrientation(getOrientation());
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.addChangeListener(this);
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.addChangeListener(this);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
this.data.add(b);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
this.data.add(b);
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
this.data.add(b);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.addChangeListener(this);
this.data.add(b);
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setWeight(index);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(index);
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(index);
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(index);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(index);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setOrientation(getOrientation());
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setOrientation(getOrientation());
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.addChangeListener(this);
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setWeight(index);
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setWeight(index);
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setWeight(index);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setWeight(index);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setOrientation(getOrientation());
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.setOrientation(getOrientation());
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(index);
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(index);
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(index);
b.setOrientation(getOrientation());
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(index);
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(index);
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(index);
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(index);
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setOrientation(getOrientation());
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setOrientation(getOrientation());
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setOrientation(getOrientation());
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.addChangeListener(this);
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setOrientation(getOrientation());
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setOrientation(getOrientation());
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.setOrientation(getOrientation());
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(index);
b.addChangeListener(this);
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
b.addChangeListener(this);
this.data.add(b);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
b.addChangeListener(this);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
this.data.add(b);
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getDomainAxis()!=null){
axis.configure();
}
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getDomainAxis()!=null){
axis.configure();
}
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getDomainAxis()!=null){
axis.configure();
}
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getDomainAxis()!=null){
axis.configure();
}
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getDomainAxis()!=null){
axis.configure();
}
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getDomainAxis()!=null){
axis.configure();
}
fireChangeEvent();
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getDomainAxis()!=null){
axis.configure();
}
fireChangeEvent();
if(index<=0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Require weight >= 1.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireDatasetChanged(new PieDatasetChangeInfo(PieDatasetChangeType.ADD,index,index));
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<ORIENTATION_VERTICAL){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
if(count>=this.index&&index<=lastCategoryIndex()){
return index-this.firstCategoryIndex;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
if(index>=getDatasetCount()){
return ;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getRenderer(index)==null){
return ;
}
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getRenderer(index)==null){
return ;
}
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
if(index>=getDatasetCount()){
return ;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0||index>this.data.size()){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("\'position\' out of bounds.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index<0||index>this.data.size()){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("\'position\' out of bounds.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires index >= 0.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.count=Math.max(this.size,count+1);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<maximumItemCount){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.count=Math.max(this.size,count+1);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires index >= 0.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<count){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
if(count>=this.index&&index<=lastCategoryIndex()){
return index-this.firstCategoryIndex;
}
throw new SeriesException(b.toString());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.add(item);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
updateBounds(item.getPeriod(),this.data.size()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireSeriesChanged();
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.data.add(item);
fireSeriesChanged();
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fireDatasetChanged(new DatasetChangeInfo());
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
double index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.maxY=minIgnoreNaN(this.maxY,item.getValue().doubleValue());
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=minIgnoreNaN(this.maxY,item.getValue().doubleValue());

int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=minIgnoreNaN(this.maxY,item.getValue().doubleValue());
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=minIgnoreNaN(this.maxY,item.getValue().doubleValue());

int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.maxY=minIgnoreNaN(this.maxY,item.getValue().doubleValue());
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=minIgnoreNaN(this.maxY,item.getValue().doubleValue());

int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=minIgnoreNaN(this.maxY,item.getValue().doubleValue());
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=minIgnoreNaN(this.maxY,item.getValue().doubleValue());

int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.maxY=maxIgnoreNaN(this.maxY,item.getValue().doubleValue());
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=maxIgnoreNaN(this.maxY,item.getValue().doubleValue());

int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
double index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.maxY=maxIgnoreNaN(this.maxY,item.getValue().doubleValue());
double index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=maxIgnoreNaN(this.maxY,item.getValue().doubleValue());

double index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=maxIgnoreNaN(this.maxY,item.getValue().doubleValue());
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=maxIgnoreNaN(this.maxY,item.getValue().doubleValue());

int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.maxY=maxIgnoreNaN(this.maxY,item.getValue().doubleValue());
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=maxIgnoreNaN(this.maxY,item.getValue().doubleValue());

int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=maxIgnoreNaN(this.maxY,item.getValue().doubleValue());
double index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=maxIgnoreNaN(this.maxY,item.getValue().doubleValue());

double index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.maxY=maxIgnoreNaN(this.maxY,item.getValue().doubleValue());
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=maxIgnoreNaN(this.maxY,item.getValue().doubleValue());

double index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=maxIgnoreNaN(this.maxY,item.getValue().doubleValue());
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=maxIgnoreNaN(this.maxY,item.getValue().doubleValue());

int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=maxIgnoreNaN(this.maxY,item.getValue().doubleValue());
this.minY=minIgnoreNaN(this.minY,item.getValue().doubleValue());
this.maxY=maxIgnoreNaN(this.maxY,item.getValue().doubleValue());

double index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item.getPeriod().compareTo(last)>0){
data.add(new Outlier(maxY,maxY,maxY));
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item.getPeriod().compareTo(last)>0){
this.data.setHighlightPaint(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item.getPeriod().compareTo(last)>0){
setSeriesNeedle(count,new ArrowNeedle(true));
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item.getPeriod().compareTo(last)>0){
setSeriesPaint(count,Color.red);
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item.getPeriod().compareTo(last)>0){
setSeriesNeedle(count,new ArrowNeedle(true));
setSeriesPaint(count,Color.red);

this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case 1 :

if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
notifyListeners(new AxisChangeEvent(this));
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
if(!index){
b.append(" alt=\"\"");
}
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
b.append("/>");
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
if(!index){
b.append(" alt=\"\"");
}
b.append("/>");

this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(seriesIndex==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
this.data.add(data);
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==maximumItemCount){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(maximumItemCount<0){
throw new IllegalArgumentException("Requires start >= 0.");
}
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
copy.data=new java.util.ArrayList();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=maximumItemCount;index<=count;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem last=(TimeSeriesDataItem)item.clone();
try{
(TimeSeries)super.clone().add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(maximumItemCount<0){
throw new IllegalArgumentException("Requires start >= 0.");
}
if(count==maximumItemCount){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(position==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(days==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(hours==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
added=(maxY<=maxY)&&(maxY<=maxY);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(rowIndex==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(keyIndex==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(middle==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(maximumItemCount==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(pos==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
start=maximumItemCount+1;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
index++;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
start=maximumItemCount+1;
index++;

this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
data.add(removeStringDelimiters(b.substring(maximumItemCount,line.length())));
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireChartChanged();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(value==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(maxOutlier==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(start==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count!=0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!ObjectUtilities.equal(getDomainDescription(),b.getDomainDescription())){
return false;
}
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!ObjectUtilities.equal(getRangeDescription(),b.getRangeDescription())){
return false;
}
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!ObjectUtilities.equal(this.timePeriodClass,that.timePeriodClass)){
return false;
}
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getMaximumItemAge()!=b.getMaximumItemAge()){
return false;
}
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getMaximumItemCount()!=b.getMaximumItemCount()){
return false;
}
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!ObjectUtilities.equal(this.data,that.data)){
return false;
}
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
anchor=isInverted()?TextAnchor.TOP_RIGHT:TextAnchor.BOTTOM_RIGHT;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
this.internalMarkerWhenTicksOverlap=true;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.TOP_RIGHT;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
anchor=isInverted()?TextAnchor.TOP_RIGHT:TextAnchor.BOTTOM_RIGHT;
this.internalMarkerWhenTicksOverlap=true;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.TOP_RIGHT;

this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
this.internalMarkerWhenTicksOverlap=true;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;

this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
anchor=isInverted()?TextAnchor.TOP_LEFT:TextAnchor.TOP_RIGHT;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
anchor=isInverted()?TextAnchor.TOP_RIGHT:TextAnchor.TOP_LEFT;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
anchor=isInverted()?TextAnchor.TOP_LEFT:TextAnchor.TOP_RIGHT;
this.internalMarkerWhenTicksOverlap=true;
anchor=isInverted()?TextAnchor.TOP_RIGHT:TextAnchor.TOP_LEFT;

this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
this.internalMarkerWhenTicksOverlap=true;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
this.internalMarkerWhenTicksOverlap=true;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;

this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
this.internalMarkerWhenTicksOverlap=true;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
this.internalMarkerWhenTicksOverlap=true;
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
this.internalMarkerWhenTicksOverlap=true;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;

this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
this.internalMarkerWhenTicksOverlap=true;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;

this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
this.internalMarkerWhenTicksOverlap=true;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
this.internalMarkerWhenTicksOverlap=true;
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
this.internalMarkerWhenTicksOverlap=true;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;

this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
this.internalMarkerWhenTicksOverlap=true;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;

this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
this.internalMarkerWhenTicksOverlap=true;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
this.internalMarkerWhenTicksOverlap=true;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;

this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
this.internalMarkerWhenTicksOverlap=true;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
this.internalMarkerWhenTicksOverlap=true;
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;

this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;
this.internalMarkerWhenTicksOverlap=true;
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;

this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;
this.internalMarkerWhenTicksOverlap=true;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
this.internalMarkerWhenTicksOverlap=true;
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.BOTTOM_LEFT;
this.internalMarkerWhenTicksOverlap=true;
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.BOTTOM_RIGHT;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.TOP_RIGHT;
this.internalMarkerWhenTicksOverlap=true;
anchor=isInverted()?TextAnchor.TOP_RIGHT:TextAnchor.BOTTOM_RIGHT;

this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.TOP_RIGHT;
this.internalMarkerWhenTicksOverlap=true;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.TOP_RIGHT;
anchor=isInverted()?TextAnchor.TOP_RIGHT:TextAnchor.BOTTOM_RIGHT;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
this.internalMarkerWhenTicksOverlap=true;
anchor=isInverted()?TextAnchor.TOP_RIGHT:TextAnchor.BOTTOM_RIGHT;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_RIGHT:TextAnchor.TOP_RIGHT;
this.internalMarkerWhenTicksOverlap=true;
anchor=isInverted()?TextAnchor.TOP_RIGHT:TextAnchor.BOTTOM_RIGHT;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.TOP_LEFT;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
anchor=isInverted()?TextAnchor.TOP_LEFT:TextAnchor.BOTTOM_LEFT;
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
anchor=isInverted()?TextAnchor.BOTTOM_LEFT:TextAnchor.TOP_LEFT;
this.internalMarkerWhenTicksOverlap=true;
anchor=isInverted()?TextAnchor.TOP_LEFT:TextAnchor.BOTTOM_LEFT;

this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(columnIndex==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(y==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
configureRangeAxes();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(currentTickValue==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
this.data.add(last);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(startIndex==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(total==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(tickVal==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getDomainAxis()!=null){
axis.configure();
}
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setDomainAxis(null);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getDomainAxis()!=null){
axis.configure();
}
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getDomainAxis()!=null){
axis.configure();
}
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getDomainAxis()!=null){
axis.configure();
}
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setRangeAxis(null);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getRangeAxis()!=null){
axis.configure();
}
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.addChangeListener(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(count);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setOrientation(getOrientation());
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
b.setOrientation(getOrientation());
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.addChangeListener(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.addChangeListener(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(count);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setOrientation(getOrientation());
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.addChangeListener(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
b.setOrientation(getOrientation());
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
b.addChangeListener(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.addChangeListener(this);
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.addChangeListener(this);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.add(b);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setWeight(count);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setOrientation(getOrientation());
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
b.setOrientation(getOrientation());
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(count);
b.setOrientation(getOrientation());
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(count);
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(count);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(count);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setOrientation(getOrientation());
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setOrientation(getOrientation());
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.addChangeListener(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.addChangeListener(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
b.setOrientation(getOrientation());
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
b.setOrientation(getOrientation());
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
b.addChangeListener(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
b.addChangeListener(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.addChangeListener(this);
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setWeight(count);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setOrientation(getOrientation());
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.addChangeListener(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
b.setOrientation(getOrientation());
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
b.addChangeListener(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
this.data.add(b);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(count);
b.setOrientation(getOrientation());
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(count);
b.addChangeListener(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(count);
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(count);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setOrientation(getOrientation());
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setOrientation(getOrientation());
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.addChangeListener(this);
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.addChangeListener(this);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
this.data.add(b);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
b.setOrientation(getOrientation());
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
b.setOrientation(getOrientation());
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
b.addChangeListener(this);
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
b.addChangeListener(this);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
this.data.add(b);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
this.data.add(b);
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
this.data.add(b);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.addChangeListener(this);
this.data.add(b);
fireChangeEvent();
if(weight==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setWeight(count);
b.setOrientation(getOrientation());
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setWeight(count);
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setWeight(count);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setWeight(count);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setOrientation(getOrientation());
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.setOrientation(getOrientation());
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.addChangeListener(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
b.addChangeListener(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setParent(this);
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
b.setOrientation(getOrientation());
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
b.setOrientation(getOrientation());
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
b.addChangeListener(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
b.addChangeListener(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setWeight(count);
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
b.addChangeListener(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
b.addChangeListener(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.setOrientation(getOrientation());
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null){
throw new IllegalArgumentException("Null \'subplot\' argument.");
}
b.addChangeListener(this);
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(count);
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(count);
b.setOrientation(getOrientation());
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(count);
b.setOrientation(getOrientation());
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(count);
b.addChangeListener(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(count);
b.addChangeListener(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setWeight(count);
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setOrientation(getOrientation());
b.addChangeListener(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setOrientation(getOrientation());
b.addChangeListener(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.setOrientation(getOrientation());
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setParent(this);
b.addChangeListener(this);
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
b.addChangeListener(this);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
b.setOrientation(getOrientation());
b.addChangeListener(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
b.setOrientation(getOrientation());
b.addChangeListener(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
b.setOrientation(getOrientation());
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setWeight(count);
b.addChangeListener(this);
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
b.addChangeListener(this);
this.data.add(b);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
b.addChangeListener(this);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.setOrientation(getOrientation());
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
b.addChangeListener(this);
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
b.setOrientation(getOrientation());
b.addChangeListener(this);
this.data.add(b);
fireChangeEvent();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(series==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index!=0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
this.data.setHighlightPaint(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
setSeriesNeedle(count,new ArrowNeedle(true));
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
setSeriesPaint(count,Color.red);
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
setSeriesNeedle(count,new ArrowNeedle(true));
setSeriesPaint(count,Color.red);

this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case 1 :

if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(notify){
fireChangeEvent();
}
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(notify){
fireChangeEvent();
}
if(index==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkAxisIndices(data);
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
datasetChanged(new DatasetChangeEvent(this,getDataset(count),new DatasetChangeInfo()));
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkAxisIndices(data);
if(index==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
datasetChanged(new DatasetChangeEvent(this,getDataset(count),new DatasetChangeInfo()));
if(index==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkAxisIndices(data);
datasetChanged(new DatasetChangeEvent(this,getDataset(count),new DatasetChangeInfo()));
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkAxisIndices(data);
datasetChanged(new DatasetChangeEvent(this,getDataset(count),new DatasetChangeInfo()));
if(index==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(column==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index>=0){
return (KeyedObjects)this.data.get(last).getObject(index);
}else {
return null;
}
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(seriesNumber==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
invalidateRangeInfo();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireSeriesChanged();
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(count==0){
this.data.valueOf(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index==index){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==index){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
this.data.setComposite(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
b.moveTo((float)(double[])drState.lowerCoordinates.get(0)[0],(float)coords[1]);
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
coords=(double[])drState.upperCoordinates.get(index-1);
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
b.lineTo((float)(double[])drState.lowerCoordinates.get(0)[0],(float)coords[1]);
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
b.closePath();
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
drState.lowerCoordinates.clear();
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
drState.upperCoordinates.clear();
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
b.moveTo((float)(double[])drState.lowerCoordinates.get(0)[0],(float)coords[1]);
coords=(double[])drState.upperCoordinates.get(index-1);
b.lineTo((float)(double[])drState.lowerCoordinates.get(0)[0],(float)coords[1]);
b.closePath();
drState.lowerCoordinates.clear();
drState.upperCoordinates.clear();

this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
this.data.draw(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.index=count;
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
notifyListeners(new TitleChangeEvent(this));
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
notifyListeners(new DialLayerChangeEvent(this));
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(section==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(++index%count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(valuesPerColor==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==0){
this.data.remove(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(rollMultiple==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(maximumItemCount<=0){
throw new IllegalArgumentException("Requires \'multiple\' > 0.");
}
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.index=maximumItemCount;
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.maximumItemCount=count;
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(maximumItemCount<=0){
throw new IllegalArgumentException("Requires \'multiple\' > 0.");
}
this.maximumItemCount=count;
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(count==0){
return null;
}
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(newMin==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.last=maxY;
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(newMax==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(data==null){
throw new IllegalArgumentException("Null \'values\' argument.");
}
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(subinterval==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(seriesIndex==0){
this.data.add(data);
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(seen==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index>maximumItemCount){
item=(PaintItem)this.data.get(high);
if(maxY<item.value){
item=(PaintItem)this.lookupTable.get(low);
}
}
if(count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.count==0){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count==that.count){
this.data.add(item);
added=true;
}else {
RegularTimePeriod last=getTimePeriod(getItemCount()-1);
if(item.getPeriod().compareTo(last)>0){
this.data.add(item);
added=true;
}else {
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.jfree.data.time.TimeSeries,599
========
{
fireChangeEvent();
this.data.add(item);
added=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
this.data.add((Task)(TaskSeries)this.data.get(count).getTasks().iterator().next().getDescription());
added=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
notifyListeners(new RendererChangeEvent(this));
this.data.add(item);
added=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.jfree.data.time.TimeSeries,600
org.jfree.data.time.TimeSeries,603
org.jfree.data.time.TimeSeries,604
org.jfree.data.time.TimeSeries,605
org.jfree.data.time.TimeSeries,606
org.jfree.data.time.TimeSeries,626
========
if(getItemCount()>this.maximumItemCount){
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(getItemCount()>this.maximumItemCount){
fireSeriesChanged();
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(getItemCount()>this.maximumItemCount){
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
fireSeriesChanged();

TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(getItemCount()>this.maximumItemCount){
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
fireSeriesChanged();
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(getItemCount()>this.maximumItemCount){
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
fireSeriesChanged();

TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(getItemCount()>this.maximumItemCount){
fireSeriesChanged();
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
fireSeriesChanged();

TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(getItemCount()>this.maximumItemCount){
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
fireSeriesChanged();
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
fireSeriesChanged();

TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
this.data.remove(maximumItemCount);
updateBoundsForRemovedItem(d);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(maxY>=maxY){
throw new IllegalArgumentException("Requires xLow < xHigh.");
}
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(getItemCount()>maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(getItemCount()>this.maximumItemCount){
result=(SelectableValue)this.data.getObject(maximumItemCount).getValue();
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getItemCount()>count){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(count<0){
throw new IllegalArgumentException("Negative \'maximum\' argument.");
}
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.maximumItemCount=count;
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(count<0){
throw new IllegalArgumentException("Negative \'maximum\' argument.");
}
if(getItemCount()>count){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.maximumItemCount=count;
if(getItemCount()>count){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(count<0){
throw new IllegalArgumentException("Negative \'maximum\' argument.");
}
this.maximumItemCount=count;
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(count<0){
throw new IllegalArgumentException("Negative \'maximum\' argument.");
}
this.maximumItemCount=count;
if(getItemCount()>count){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
setParent(d);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getItemCount()>this.maximumItemCount){
configureRangeAxes();
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getItemCount()>this.maximumItemCount){
fireChangeEvent();
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getItemCount()>this.maximumItemCount){
this.data.remove(maximumItemCount);
configureRangeAxes();
fireChangeEvent();

TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
copy.data=new java.util.ArrayList();
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
removeValue(d);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.add(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
count=29*result+(this.timePeriodClass!=null?this.timePeriodClass.hashCode():0);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(notify){
if(notify){
fireSeriesChanged();
}
fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(notify){
this.notify=notify;
fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.notify=notify;
if(notify){
fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.notify=added;
if(notify){
fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.added=added;
if(notify){
fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.count=count;
if(notify){
fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.maxY=maxY;
if(notify){
fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.added=circular;
if(notify){
fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(notify){
notifyListeners(new AxisChangeEvent(this));
}
if(notify){
fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(notify){
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(notify){
fireSeriesChanged();
fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(notify){
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
fireSeriesChanged();

fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(notify){
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
fireSeriesChanged();
fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(notify){
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
fireSeriesChanged();

fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(notify){
fireSeriesChanged();
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
fireSeriesChanged();

fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(notify){
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
fireSeriesChanged();
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
fireSeriesChanged();

fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(notify){
this.data.subList(0,count).clear();
fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(notify){
this.data.subList(0,count).clear();
fireSeriesChanged();

fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(notify){
this.data.subList(0,count).clear();
fireSeriesChanged();
fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(notify){
this.data.subList(0,count).clear();
this.data.subList(0,count).clear();
fireSeriesChanged();

fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(notify){
fireSeriesChanged();
this.data.subList(0,count).clear();
fireSeriesChanged();

fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(notify){
this.data.subList(0,count).clear();
fireSeriesChanged();
this.data.subList(0,count).clear();
fireSeriesChanged();

fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(notify){
this.autoTickUnitSelection=added;
fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(notify){
this.autoRange=added;
fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(notify){
if(this.added){
autoAdjustRange();
}
fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(notify){
this.autoRange=added;
if(this.added){
autoAdjustRange();
}

fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(notify){
this.autoRangeMinimumSize=maxY;
fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(notify){
this.autoRangeMinimumSize=maxY;
if(this.added){
autoAdjustRange();
}

fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireSeriesChanged();
if(notify){
fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
(SimpleHistogramBin)this.data.get(item).setSelected(added);
if(notify){
fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
item.setSelected(added);
if(notify){
fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(notify){
fireChangeEvent();
}
if(notify){
fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.added[item]=selected;
if(notify){
fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(notify){
fireSelectionEvent();
}
if(notify){
fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
(SelectableValue)this.data.getObject(count,count).setSelected(added);
if(notify){
fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
getSeries(count).getRawDataItem(item).setSelected(added);
if(notify){
fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super.setAutoRangeMinimumSize(maxY,notify);
if(notify){
fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super.setRange(range,added,notify);
if(notify){
fireSeriesChanged();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(added){
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
findBoundsByIteration();
if(added){
updateBoundsForAddedItem(item);
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}
removeAgedItems(false);
if(notify){
fireSeriesChanged();
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 0
TESTING : chart_3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_1/chart/chart_3_buggy && /usr/bin/timeout 600 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test
Failing tests: 0
Successfully repair!
