java version "1.7.0_231"
OpenJDK Runtime Environment (rhel-2.6.19.1.el7_6-x86_64 u231-b01)
OpenJDK 64-Bit Server VM (build 24.231-b01, mixed mode)
Check out 2e904fcd to /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j/ OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Run post-checkout hook..................................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 2e904fcd:372eb11e..................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Closure-25b..................................... OK
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 1
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
/home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4
PURIFY IS TRUE
=================================================
Project : closure_25	start : 19/10/16 17:34

Field type inconsistancy 'type' with types : JSType and Type
Field type inconsistancy 'SUPER' with types : FunctionInjector.Reference and SimpleReference<SimpleSlot>
Variable type inconsistancy of 'name' in method 'visit,NodeTraversal,Node,Node' with types : Name and String
Field type inconsistancy 'errors' with types : JSError[] and List<JSError>
Variable type inconsistancy of 'start' in method 'parseRegExp,String,String' with types : int and char
Variable type inconsistancy of 'end' in method 'parseRegExp,String,String' with types : int and char
Field type inconsistancy 'THIS' with types : Token and int
readFailedTest: path is /mnt/nfs/work1/brun/mmotwani/SimFix/d4j-info/failed_tests/closure/25.txtTESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
IN COMMENT TEST CASE: com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew

# FAILING TESTS: 1
TIMEOUT : 18000000
===========
locations= [<com.google.javascript.jscomp.Compiler,259>, <com.google.javascript.jscomp.Compiler,261>, <com.google.javascript.jscomp.Compiler,265>, <com.google.javascript.jscomp.Compiler,1536>, <com.google.javascript.jscomp.Compiler,1537>, <com.google.javascript.jscomp.Compiler,1539>, <com.google.javascript.jscomp.Compiler,1540>, <com.google.javascript.jscomp.Compiler,1542>, <com.google.javascript.jscomp.Compiler,1543>, <com.google.javascript.jscomp.ClosureCodingConvention,322>, <com.google.javascript.jscomp.ClosureCodingConvention,327>, <com.google.javascript.jscomp.CompilerOptions,1060>, <com.google.javascript.jscomp.ComposeWarningsGuard,127>, <com.google.javascript.jscomp.ComposeWarningsGuard,128>, <com.google.javascript.jscomp.ComposeWarningsGuard,130>, <com.google.javascript.jscomp.ComposeWarningsGuard,138>, <com.google.javascript.jscomp.DiagnosticGroup,60>, <com.google.javascript.jscomp.DiagnosticGroup,61>, <com.google.javascript.jscomp.DiagnosticGroup,62>, <com.google.javascript.jscomp.DiagnosticGroup,63>, <com.google.javascript.jscomp.DiagnosticGroup,71>, <com.google.javascript.jscomp.DiagnosticGroup,72>, <com.google.javascript.jscomp.DiagnosticGroup,74>, <com.google.javascript.jscomp.DiagnosticGroup,117>, <com.google.javascript.jscomp.DiagnosticGroup,118>, <com.google.javascript.jscomp.DiagnosticGroup,119>, <com.google.javascript.jscomp.TypedScopeCreator,228>, <com.google.javascript.jscomp.SyntacticScopeCreator,69>, <com.google.javascript.jscomp.SyntacticScopeCreator,70>, <com.google.javascript.jscomp.SyntacticScopeCreator,71>, <com.google.javascript.jscomp.SyntacticScopeCreator,73>, <com.google.javascript.jscomp.SyntacticScopeCreator,76>, <com.google.javascript.jscomp.SyntacticScopeCreator,78>, <com.google.javascript.jscomp.SyntacticScopeCreator,79>, <com.google.javascript.jscomp.SyntacticScopeCreator,80>, <com.google.javascript.jscomp.SyntacticScopeCreator,81>, <com.google.javascript.jscomp.SyntacticScopeCreator,85>, <com.google.javascript.jscomp.SyntacticScopeCreator,86>, <com.google.javascript.jscomp.SyntacticScopeCreator,87>, <com.google.javascript.jscomp.SyntacticScopeCreator,93>, <com.google.javascript.jscomp.SyntacticScopeCreator,94>, <com.google.javascript.jscomp.SyntacticScopeCreator,95>, <com.google.javascript.jscomp.SyntacticScopeCreator,99>, <com.google.javascript.jscomp.SyntacticScopeCreator,100>, <com.google.javascript.jscomp.SyntacticScopeCreator,105>, <com.google.javascript.jscomp.SyntacticScopeCreator,106>, <com.google.javascript.jscomp.SyntacticScopeCreator,108>, <com.google.javascript.jscomp.SyntacticScopeCreator,109>, <com.google.javascript.jscomp.SyntacticScopeCreator,107>, <com.google.javascript.jscomp.SyntacticScopeCreator,113>, <com.google.javascript.jscomp.SyntacticScopeCreator,114>, <com.google.javascript.jscomp.SyntacticScopeCreator,116>, <com.google.javascript.jscomp.SyntacticScopeCreator,117>, <com.google.javascript.jscomp.SyntacticScopeCreator,119>, <com.google.javascript.jscomp.SyntacticScopeCreator,125>, <com.google.javascript.jscomp.SyntacticScopeCreator,128>, <com.google.javascript.jscomp.SyntacticScopeCreator,129>, <com.google.javascript.jscomp.SyntacticScopeCreator,130>, <com.google.javascript.jscomp.SyntacticScopeCreator,131>, <com.google.javascript.jscomp.SyntacticScopeCreator,132>, <com.google.javascript.jscomp.SyntacticScopeCreator,133>, <com.google.javascript.jscomp.SyntacticScopeCreator,134>, <com.google.javascript.jscomp.SyntacticScopeCreator,137>, <com.google.javascript.jscomp.SyntacticScopeCreator,141>, <com.google.javascript.jscomp.SyntacticScopeCreator,142>, <com.google.javascript.jscomp.SyntacticScopeCreator,146>, <com.google.javascript.jscomp.SyntacticScopeCreator,147>, <com.google.javascript.jscomp.SyntacticScopeCreator,163>, <com.google.javascript.jscomp.SyntacticScopeCreator,164>, <com.google.javascript.jscomp.SyntacticScopeCreator,170>, <com.google.javascript.jscomp.SyntacticScopeCreator,171>, <com.google.javascript.jscomp.SyntacticScopeCreator,172>, <com.google.javascript.jscomp.SyntacticScopeCreator,173>, <com.google.javascript.jscomp.SyntacticScopeCreator,174>, <com.google.javascript.jscomp.SyntacticScopeCreator,175>, <com.google.javascript.jscomp.SyntacticScopeCreator,176>, <com.google.javascript.jscomp.SyntacticScopeCreator,178>, <com.google.javascript.jscomp.SyntacticScopeCreator,234>, <com.google.javascript.jscomp.SyntacticScopeCreator,236>, <com.google.javascript.jscomp.SyntacticScopeCreator,237>, <com.google.javascript.jscomp.SyntacticScopeCreator,238>, <com.google.javascript.jscomp.SyntacticScopeCreator,243>, <com.google.javascript.jscomp.SyntacticScopeCreator,245>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1314>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1456>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1491>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1492>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1494>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1493>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1497>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1617>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1620>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1621>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1625>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1626>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1628>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1629>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1630>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1633>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1638>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1643>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1645>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1647>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1655>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1622>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1664>, <com.google.javascript.rhino.jstype.PrototypeObjectType,179>, <com.google.javascript.rhino.jstype.PrototypeObjectType,354>, <com.google.javascript.rhino.jstype.PrototypeObjectType,356>, <com.google.javascript.rhino.jstype.PrototypeObjectType,358>, <com.google.javascript.rhino.jstype.PrototypeObjectType,361>, <com.google.javascript.rhino.jstype.PrototypeObjectType,362>, <com.google.javascript.rhino.jstype.PrototypeObjectType,363>, <com.google.javascript.rhino.jstype.PrototypeObjectType,366>, <com.google.javascript.rhino.jstype.PrototypeObjectType,365>, <com.google.javascript.rhino.jstype.PrototypeObjectType,369>, <com.google.javascript.rhino.jstype.PrototypeObjectType,370>, <com.google.javascript.rhino.jstype.PrototypeObjectType,372>, <com.google.javascript.rhino.jstype.PrototypeObjectType,373>, <com.google.javascript.rhino.jstype.PrototypeObjectType,389>, <com.google.javascript.rhino.jstype.PrototypeObjectType,391>, <com.google.javascript.rhino.jstype.PrototypeObjectType,392>, <com.google.javascript.rhino.Node,2221>, <com.google.javascript.rhino.Node,2249>, <com.google.javascript.rhino.Node,2281>, <com.google.javascript.jscomp.parsing.IRFactory,1195>, <com.google.javascript.jscomp.parsing.IRFactory,1336>, <com.google.javascript.jscomp.parsing.TypeSafeDispatcher,244>, <com.google.javascript.jscomp.parsing.TypeSafeDispatcher,248>, <com.google.javascript.jscomp.parsing.IRFactory,614>, <com.google.javascript.jscomp.parsing.IRFactory,616>, <com.google.javascript.jscomp.parsing.IRFactory,617>, <com.google.javascript.jscomp.parsing.IRFactory,618>, <com.google.javascript.jscomp.parsing.IRFactory,620>, <com.google.javascript.jscomp.parsing.IRFactory,621>, <com.google.javascript.jscomp.parsing.IRFactory,622>, <com.google.javascript.jscomp.parsing.IRFactory,623>, <com.google.javascript.jscomp.parsing.IRFactory,796>, <com.google.javascript.jscomp.parsing.IRFactory,862>, <com.google.javascript.jscomp.parsing.IRFactory,863>, <com.google.javascript.jscomp.parsing.IRFactory,864>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1737>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1738>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1740>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1741>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1748>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1991>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1999>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2000>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2004>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2006>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2007>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2008>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2009>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2012>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2013>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2017>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2018>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2020>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2021>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2025>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2027>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2029>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2030>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2031>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2034>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2036>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2084>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2085>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2087>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2091>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2092>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2096>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2098>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2099>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2106>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2109>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2111>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2115>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2117>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2118>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2119>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2130>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2137>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2139>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2143>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2144>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2149>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2153>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2154>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2156>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2160>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2161>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2162>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2163>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2171>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2173>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2174>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2193>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2275>]
======================com.google.javascript.jscomp.Compiler,259
UNKNOWN ASTNode type : catch (NumberFormatException nfe) {
  options.setDefineToStringLiteral(key,(String)value);
}

========
if(!options){
options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!options.checkTypes){
options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),options.checkGlobalThisLevel);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!options.skipAllPasses){
options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!options.checkTypes){
if(hasErrors()){
return ;
}
options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!options.checkTypes){
if(options.isExternExportsEnabled()||options.externExportsPath!=null){
externExports();
}
options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!options.checkTypes){
if(!options.ideMode){
optimize();
}
options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!options.checkTypes){
if(hasErrors()){
return ;
}
if(options.isExternExportsEnabled()||options.externExportsPath!=null){
externExports();
}
if(!options.ideMode){
optimize();
}

options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!options.skipAllPasses){
if(hasErrors()){
return ;
}
options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!options.skipAllPasses){
if(options.isExternExportsEnabled()||options.externExportsPath!=null){
externExports();
}
options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!options.skipAllPasses){
if(!options.ideMode){
optimize();
}
options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!options.skipAllPasses){
if(hasErrors()){
return ;
}
if(options.isExternExportsEnabled()||options.externExportsPath!=null){
externExports();
}
if(!options.ideMode){
optimize();
}

options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!options.checkTypes){
if(hasErrors()){
return ;
}
if(options.isExternExportsEnabled()||options.externExportsPath!=null){
externExports();
}
options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!options.checkTypes){
if(hasErrors()){
return ;
}
if(!options.ideMode){
optimize();
}
options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!options.checkTypes){
if(hasErrors()){
return ;
}
if(hasErrors()){
return ;
}
if(options.isExternExportsEnabled()||options.externExportsPath!=null){
externExports();
}
if(!options.ideMode){
optimize();
}

options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!options.checkTypes){
if(options.isExternExportsEnabled()||options.externExportsPath!=null){
externExports();
}
if(!options.ideMode){
optimize();
}
options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!options.checkTypes){
if(options.isExternExportsEnabled()||options.externExportsPath!=null){
externExports();
}
if(hasErrors()){
return ;
}
if(options.isExternExportsEnabled()||options.externExportsPath!=null){
externExports();
}
if(!options.ideMode){
optimize();
}

options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!options.checkTypes){
if(!options.ideMode){
optimize();
}
if(hasErrors()){
return ;
}
if(options.isExternExportsEnabled()||options.externExportsPath!=null){
externExports();
}
if(!options.ideMode){
optimize();
}

options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!options.skipAllPasses){
if(hasErrors()){
return ;
}
if(options.isExternExportsEnabled()||options.externExportsPath!=null){
externExports();
}
options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!options.skipAllPasses){
if(hasErrors()){
return ;
}
if(!options.ideMode){
optimize();
}
options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!options.skipAllPasses){
if(hasErrors()){
return ;
}
if(hasErrors()){
return ;
}
if(options.isExternExportsEnabled()||options.externExportsPath!=null){
externExports();
}
if(!options.ideMode){
optimize();
}

options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!options.skipAllPasses){
if(options.isExternExportsEnabled()||options.externExportsPath!=null){
externExports();
}
if(!options.ideMode){
optimize();
}
options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!options.skipAllPasses){
if(options.isExternExportsEnabled()||options.externExportsPath!=null){
externExports();
}
if(hasErrors()){
return ;
}
if(options.isExternExportsEnabled()||options.externExportsPath!=null){
externExports();
}
if(!options.ideMode){
optimize();
}

options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!options.skipAllPasses){
if(!options.ideMode){
optimize();
}
if(hasErrors()){
return ;
}
if(options.isExternExportsEnabled()||options.externExportsPath!=null){
externExports();
}
if(!options.ideMode){
optimize();
}

options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!options.checkTypes){
if(hasErrors()){
return ;
}
if(options.isExternExportsEnabled()||options.externExportsPath!=null){
externExports();
}
if(!options.ideMode){
optimize();
}
options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!options.checkTypes){
if(hasErrors()){
return ;
}
if(options.isExternExportsEnabled()||options.externExportsPath!=null){
externExports();
}
if(hasErrors()){
return ;
}
if(options.isExternExportsEnabled()||options.externExportsPath!=null){
externExports();
}
if(!options.ideMode){
optimize();
}

options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!options.checkTypes){
if(hasErrors()){
return ;
}
if(!options.ideMode){
optimize();
}
if(hasErrors()){
return ;
}
if(options.isExternExportsEnabled()||options.externExportsPath!=null){
externExports();
}
if(!options.ideMode){
optimize();
}

options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!options.checkTypes){
if(options.isExternExportsEnabled()||options.externExportsPath!=null){
externExports();
}
if(!options.ideMode){
optimize();
}
if(hasErrors()){
return ;
}
if(options.isExternExportsEnabled()||options.externExportsPath!=null){
externExports();
}
if(!options.ideMode){
optimize();
}

options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!options.skipAllPasses){
if(hasErrors()){
return ;
}
if(options.isExternExportsEnabled()||options.externExportsPath!=null){
externExports();
}
if(!options.ideMode){
optimize();
}
options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!options.skipAllPasses){
if(hasErrors()){
return ;
}
if(options.isExternExportsEnabled()||options.externExportsPath!=null){
externExports();
}
if(hasErrors()){
return ;
}
if(options.isExternExportsEnabled()||options.externExportsPath!=null){
externExports();
}
if(!options.ideMode){
optimize();
}

options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!options.skipAllPasses){
if(hasErrors()){
return ;
}
if(!options.ideMode){
optimize();
}
if(hasErrors()){
return ;
}
if(options.isExternExportsEnabled()||options.externExportsPath!=null){
externExports();
}
if(!options.ideMode){
optimize();
}

options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!options.skipAllPasses){
if(options.isExternExportsEnabled()||options.externExportsPath!=null){
externExports();
}
if(!options.ideMode){
optimize();
}
if(hasErrors()){
return ;
}
if(options.isExternExportsEnabled()||options.externExportsPath!=null){
externExports();
}
if(!options.ideMode){
optimize();
}

options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!options.checkTypes){
if(hasErrors()){
return ;
}
if(options.isExternExportsEnabled()||options.externExportsPath!=null){
externExports();
}
if(!options.ideMode){
optimize();
}
if(hasErrors()){
return ;
}
if(options.isExternExportsEnabled()||options.externExportsPath!=null){
externExports();
}
if(!options.ideMode){
optimize();
}

options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!options.stripTypes){
options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!options.checkSymbols){
options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!config.variableMapInputFile){
options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!config.propertyMapInputFile){
options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!options.nameReferenceGraphPath){
options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!options.nameReferenceReportPath){
options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!options.replaceStringsFunctionDescriptions){
options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!config.outputBundles){
options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
options.acceptConstKeyword=config.acceptConstKeyword;
if(!options.checkTypes){
options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
options.transformAMDToCJSModules=config.transformAMDToCJSModules;
if(!options.checkTypes){
options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!options.aliasableStrings){
options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(options.disables(DiagnosticGroups.GLOBAL_THIS)){
options.checkTypes=false;
}else if(!options.checkTypes){
options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(options.disables(DiagnosticGroup.forType(EMPTY_MODULE_LIST_ERROR))){
options.checkTypes=false;
}else if(!options.checkTypes){
options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(options.enables(DiagnosticGroups.CHECK_TYPES)){
options.checkTypes=false;
}else if(!options.checkTypes){
options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),CheckLevel.OFF);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
com.google.javascript.jscomp.Compiler,261
com.google.javascript.jscomp.Compiler,265
com.google.javascript.jscomp.Compiler,1536
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(SourceFile.fromCode("[testcode]",js));
if(inputsById==null){
inputsById=Maps.newHashMap();
}
if(inputsById.containsKey(new SyntheticAst(js).getInputId())){
throw new IllegalArgumentException("Conflicting externs name: "+js);
}
putCompilerInput(input.getInputId(),input);
return input.getAstRoot(this);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
externs.add(0,input);
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(SourceFile.fromCode("[testcode]",js));
if(inputsById==null){
inputsById=Maps.newHashMap();
}
putCompilerInput(input.getInputId(),input);
return input.getAstRoot(this);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(input.getInputId().equals(synthesizedExternsInput.getInputId()));
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(SourceFile.fromCode("[testcode]",js));
if(inputsById==null){
inputsById=Maps.newHashMap();
}
putCompilerInput(input.getInputId(),input);
return input.getAstRoot(this);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(input.getInputId().equals(input.getAstRoot(this).getInputId()));
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(SourceFile.fromCode("[testcode]",js));
if(inputsById==null){
inputsById=Maps.newHashMap();
}
putCompilerInput(input.getInputId(),input);
return input.getAstRoot(this);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputs.remove(synthesizedExternsInput);
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(SourceFile.fromCode("[testcode]",js));
if(inputsById==null){
inputsById=Maps.newHashMap();
}
putCompilerInput(input.getInputId(),input);
return input.getAstRoot(this);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(SourceFile.fromCode("[testcode]",js));
if(inputsById!=null){
inputsById=Maps.newHashMap();
}
putCompilerInput(input.getInputId(),input);
return input.getAstRoot(this);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(jsRoot==null){
return false;
}
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(SourceFile.fromCode("[testcode]",js));
if(inputsById==null){
inputsById=Maps.newHashMap();
}
putCompilerInput(input.getInputId(),input);
return input.getAstRoot(this);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(SourceFile.fromCode("[testcode]",js));
if(inputsById==null){
inputsById=Maps.newHashMap();
}
putCompilerInput(input.getInputId(),input);
return parse(SourceFile.fromCode(currentPassName,js));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(SourceFile.fromCode("[testcode]",js));
if(inputsById==null){
inputsById=Maps.newHashMap();
}
putCompilerInput(input.getInputId(),input);
return input.parse(this);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(SourceFile.fromCode("[testcode]",js));
if(inputsById==null){
inputsById=Maps.newHashMap();
}
if(moduleGraph==null&&!modules.isEmpty()){
modules.get(0).add(input);
}
putCompilerInput(input.getInputId(),input);
return input.getAstRoot(this);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(jsRoot==null){
return false;
}
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(SourceFile.fromCode("[testcode]",js));
if(inputsById==null){
inputsById=Maps.newHashMap();
}
if(moduleGraph==null&&!modules.isEmpty()){
modules.get(0).add(input);
}
putCompilerInput(input.getInputId(),input);
return input.getAstRoot(this);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new Node(Token.SCRIPT).setStaticSourceFile(SourceFile.fromCode(input.getIdName(),""));
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(SourceFile.fromCode("[testcode]",js));
if(inputsById==null){
inputsById=Maps.newHashMap();
}
putCompilerInput(input.getInputId(),input);
return input.getAstRoot(this);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkNotNull(jsRoot.getInputId());
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(SourceFile.fromCode("[testcode]",js));
if(inputsById==null){
inputsById=Maps.newHashMap();
}
putCompilerInput(input.getInputId(),input);
return input.getAstRoot(this);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
removeScriptReferences(jsRoot.getInputId());
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(SourceFile.fromCode("[testcode]",js));
if(inputsById==null){
inputsById=Maps.newHashMap();
}
putCompilerInput(input.getInputId(),input);
return input.getAstRoot(this);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(jsRoot.isFunction()||n.isScript()){
Preconditions.checkNotNull(input);
currentPassName=NodeUtil.getSourceName(n);
}
initCompilerOptionsIfTesting();
CompilerInput input=new CompilerInput(SourceFile.fromCode("[testcode]",js));
if(inputsById==null){
inputsById=Maps.newHashMap();
}
putCompilerInput(input.getInputId(),input);
return input.getAstRoot(this);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.Compiler,1537
com.google.javascript.jscomp.Compiler,1539
com.google.javascript.jscomp.Compiler,1540
com.google.javascript.jscomp.Compiler,1542
com.google.javascript.jscomp.Compiler,1543
com.google.javascript.jscomp.ClosureCodingConvention,322
com.google.javascript.jscomp.ClosureCodingConvention,327
com.google.javascript.jscomp.CompilerOptions,1060
========
return warningsGuard.enables(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
com.google.javascript.jscomp.ComposeWarningsGuard,127
========
if(guard.enables(singleton)){
return true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(guard.enables(DiagnosticGroups.ACCESS_CONTROLS)){
return false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(guard.enables(DiagnosticGroups.CONSTANT_PROPERTY)){
return false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(guard.enables(DiagnosticGroups.GLOBAL_THIS)){
return false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(guard.enables(DiagnosticGroups.ES5_STRICT)){
return false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(guard.enables(DiagnosticGroups.CHECK_VARIABLES)){
return false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(guard.enables(DiagnosticGroups.CHECK_TYPES)){
return false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(guard.enables(singleton)){
continue nextSingleton;
}else if(guard.enables(singleton)){
return false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(guard.disables(DiagnosticGroups.GLOBAL_THIS)){
continue nextSingleton;
}else if(guard.enables(singleton)){
return false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(guard.disables(DiagnosticGroups.CHECK_TYPES)){
continue nextSingleton;
}else if(guard.enables(singleton)){
return false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
com.google.javascript.jscomp.ComposeWarningsGuard,128
com.google.javascript.jscomp.ComposeWarningsGuard,130
com.google.javascript.jscomp.ComposeWarningsGuard,138
com.google.javascript.jscomp.DiagnosticGroup,60
Find no block!
com.google.javascript.jscomp.DiagnosticGroup,61
UNKNOWN ASTNode type : catch (IOException e) {
  compiler.getErrorManager().report(CheckLevel.ERROR,JSError.make(AbstractCompiler.READ_ERROR,getName()));
  return ImmutableList.<String>of();
}

UNKNOWN ASTNode type : catch (IOException e) {
  compiler.getErrorManager().report(CheckLevel.ERROR,JSError.make(AbstractCompiler.READ_ERROR,getName()));
  return ImmutableList.<String>of();
}

========
this.name=null;
this.types=ImmutableSet.copyOf(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
lazyInitInfo();
this.name=null;
this.types=ImmutableSet.of(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.GETPROP :

this.name=null;
this.types=ImmutableSet.of(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.name=name;
this.name=null;
this.types=ImmutableSet.of(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
assert (record != null);

this.name=null;
this.types=ImmutableSet.of(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
assert (record.name.isEmpty());

this.name=null;
this.types=ImmutableSet.of(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
occurrence.parent.replaceChild(occurrence.node,IR.name(name));
this.name=null;
this.types=ImmutableSet.of(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.type=type;
this.name=null;
this.types=ImmutableSet.of(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.OR :

this.name=null;
this.types=ImmutableSet.of(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(name==null)return ;
this.name=null;
this.types=ImmutableSet.of(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nameInfo.name=name;
this.name=null;
this.types=ImmutableSet.of(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(name.isEmpty()){
return name;
}
this.name=null;
this.types=ImmutableSet.of(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.DiagnosticGroup,62
com.google.javascript.jscomp.DiagnosticGroup,63
Find no block!
com.google.javascript.jscomp.DiagnosticGroup,71
========
if(!singletons.containsKey(name)){
singletons.put(type,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
singletons.put(name,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!recognizedAnnotations.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(name)){
singletons.put(name,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!throwsDescriptions.containsKey(type)){
throwsDescriptions.put(type,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!throwsDescriptions.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
throwsDescriptions.put(type,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
return true;
singletons.put(type,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parameters.containsKey(type)){
parameters.put(type,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parameters.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
parameters.put(type,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(name)){
return true;
singletons.put(type,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
return true;
singletons.put(name,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(name)){
return true;
singletons.put(name,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parameters.containsKey(name)){
singletons.put(type,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parameters.containsKey(type)){
singletons.put(name,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parameters.containsKey(type)){
return true;
singletons.put(type,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(name)){
parameters.put(type,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
parameters.put(name,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
return true;
parameters.put(type,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parameters.containsKey(name)){
parameters.put(type,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parameters.containsKey(type)){
parameters.put(name,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parameters.containsKey(type)){
return true;
parameters.put(type,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parameters.containsKey(name)){
singletons.put(name,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parameters.containsKey(name)){
return true;
singletons.put(type,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parameters.containsKey(type)){
return true;
singletons.put(name,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(name)){
parameters.put(name,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(name)){
return true;
parameters.put(type,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
return true;
parameters.put(name,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parameters.containsKey(name)){
parameters.put(name,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parameters.containsKey(name)){
return true;
parameters.put(type,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parameters.containsKey(type)){
return true;
parameters.put(name,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parameters.containsKey(name)){
return true;
singletons.put(name,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(name)){
return true;
parameters.put(name,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!reachingDef.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkNotNull(name);
if(!singletons.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!props.containsKey(type)){
props.put(type,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!props.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
props.put(type,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
if(incrementNameCount(name)!=0){
newName=getUniqueName(name,incrementNameCount(name));
}
singletons.put(type,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
return ;
singletons.put(type,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
mayUseMap.put(type,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!extraTracingStatistics.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
globals.put(type,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!instanceType.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!typesToSkip.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.contains(type)){
singletons.put(type,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.isEquivalentTo(type)){
singletons.put(type,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
refInfo.put(type,new DiagnosticGroup(type));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.DiagnosticGroup,72
com.google.javascript.jscomp.DiagnosticGroup,74
========
if(!singletons.containsKey(name)){
singletons.put(type,new DiagnosticGroup(type));
}
return singletons.get(name);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(name)){
singletons.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
singletons.put(name,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}
return singletons.get(name);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(name)){
singletons.put(name,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!recognizedAnnotations.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!throwsDescriptions.containsKey(type)){
throwsDescriptions.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!throwsDescriptions.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
throwsDescriptions.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
return true;
singletons.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}
return scope.ownSymbols.get(name);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}
return ownSymbols.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parameters.containsKey(type)){
parameters.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parameters.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
parameters.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(name)){
return true;
singletons.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
return true;
singletons.put(name,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(name)){
return true;
singletons.put(name,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parameters.containsKey(name)){
singletons.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parameters.containsKey(type)){
singletons.put(name,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parameters.containsKey(type)){
return true;
singletons.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(name)){
parameters.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
parameters.put(name,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
return true;
parameters.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parameters.containsKey(name)){
parameters.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parameters.containsKey(type)){
parameters.put(name,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parameters.containsKey(type)){
return true;
parameters.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parameters.containsKey(name)){
singletons.put(name,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parameters.containsKey(name)){
return true;
singletons.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parameters.containsKey(type)){
return true;
singletons.put(name,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(name)){
parameters.put(name,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(name)){
return true;
parameters.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
return true;
parameters.put(name,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parameters.containsKey(name)){
parameters.put(name,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parameters.containsKey(name)){
return true;
parameters.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parameters.containsKey(type)){
return true;
parameters.put(name,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parameters.containsKey(name)){
return true;
singletons.put(name,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(name)){
return true;
parameters.put(name,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!reachingDef.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.isEquivalentTo(type)){
singletons.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkNotNull(name);
if(!singletons.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!props.containsKey(type)){
props.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!props.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
props.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!extraTracingStatistics.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}
return ImmutableList.of();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!newName.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
if(incrementNameCount(name)!=0){
newName=getUniqueName(name,incrementNameCount(name));
}
singletons.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
return ;
singletons.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.contains(type)){
singletons.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
refInfo.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}
return singletons.get(v.index);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
mayUseMap.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}
return Collections.emptyList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!scopeUpRefMap.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
globals.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}
return Joiner.on(" -> ").join(Lists.newArrayList());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}
Lists.newArrayList().add(symbols.get(0));
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!instanceType.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}
return info.parameters.get(name);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}
return parameters.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}
return info.parameters.containsKey(name);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}
return documentation.parameters.containsKey(name);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}
return documentation.parameters.get(name);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}
return parameters.get(name);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.get(type)){
singletons.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getImplicitPrototype()!=null){
return implicitPrototype.isPropertyInExterns(name);
}
if(!singletons.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getImplicitPrototype()!=null){
return implicitPrototype.getPropertyNode(name);
}
if(!singletons.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!typesToSkip.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}
return singletons.get(type.getSource());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}
if(type==null){
return null;
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!singletons.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}
if(type.getSource()==null){
return null;
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}
return s.simplified.get(0);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!singletons.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}
return simplified.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

if(!singletons.containsKey(type)){
singletons.put(type,new DiagnosticGroup(type));
}
return singletons.get(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.DiagnosticGroup,117
com.google.javascript.jscomp.DiagnosticGroup,118
com.google.javascript.jscomp.DiagnosticGroup,119
com.google.javascript.jscomp.TypedScopeCreator,228
UNKNOWN ASTNode type : catch (IllegalArgumentException e) {
  compiler.report(t.makeError(n,INVALID_STYLE_ERROR,styleStr));
  return;
}

UNKNOWN ASTNode type : catch (MalformedException ex) {
  compiler.report(traversal.makeError(ex.getNode(),MESSAGE_TREE_MALFORMED,ex.getMessage()));
  return;
}

UNKNOWN ASTNode type : catch (IOException e) {
  compiler.report(JSError.make(AbstractCompiler.READ_ERROR,sourceFile.getName()));
}

UNKNOWN ASTNode type : catch (IOException e) {
  compiler.getErrorManager().report(CheckLevel.ERROR,JSError.make(AbstractCompiler.READ_ERROR,getName()));
  return ImmutableList.<String>of();
}

UNKNOWN ASTNode type : catch (IOException e) {
  compiler.getErrorManager().report(CheckLevel.ERROR,JSError.make(AbstractCompiler.READ_ERROR,getName()));
  return ImmutableList.<String>of();
}

UNKNOWN ASTNode type : catch (MalformedException e) {
  compiler.report(JSError.make(message.getSourceName(),e.getNode(),MESSAGE_TREE_MALFORMED,e.getMessage()));
  newValue=msgNode;
}

========
if(!alt.isUnknownType()){
NodeTraversal.traverse(compiler,functionNode.getLastChild(),scopeBuilder.new CollectProperties(fnThisType));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(codingConvention.isExported(functionNode.getLastChild().getString())){
return false;
}
if(!fnThisType.isUnknownType()){
NodeTraversal.traverse(compiler,functionNode.getLastChild(),scopeBuilder.new CollectProperties(fnThisType));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ownerName=functionNode.getString();
if(!fnThisType.isUnknownType()){
NodeTraversal.traverse(compiler,functionNode.getLastChild(),scopeBuilder.new CollectProperties(fnThisType));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
functionNode=node;
if(!fnThisType.isUnknownType()){
NodeTraversal.traverse(compiler,functionNode.getLastChild(),scopeBuilder.new CollectProperties(fnThisType));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
node=functionNode.getLastChild();
if(!fnThisType.isUnknownType()){
NodeTraversal.traverse(compiler,functionNode.getLastChild(),scopeBuilder.new CollectProperties(fnThisType));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!implicitProto.isUnknownType()){
NodeTraversal.traverse(compiler,functionNode.getLastChild(),scopeBuilder.new CollectProperties(fnThisType));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnThisType.isUnknownType()){
aliasName=ownerName;
NodeTraversal.traverse(compiler,functionNode.getLastChild(),scopeBuilder.new CollectProperties(fnThisType));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnThisType.isUnknownType()){
break;
NodeTraversal.traverse(compiler,functionNode.getLastChild(),scopeBuilder.new CollectProperties(fnThisType));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnThisType.isUnknownType()){
aliasName=ownerName;
break;

NodeTraversal.traverse(compiler,functionNode.getLastChild(),scopeBuilder.new CollectProperties(fnThisType));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!objType.isUnknownType()){
NodeTraversal.traverse(compiler,functionNode.getLastChild(),scopeBuilder.new CollectProperties(fnThisType));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!referencedObjType.isUnknownType()){
NodeTraversal.traverse(compiler,functionNode.getLastChild(),scopeBuilder.new CollectProperties(fnThisType));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnThisType.isUnknownType()){
functionNode.addChildToBack(IR.exprResult(newReportFunctionExitNode()));
NodeTraversal.traverse(compiler,functionNode.getLastChild(),scopeBuilder.new CollectProperties(fnThisType));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeTraversal.traverse(compiler,functionNode,this);
if(!fnThisType.isUnknownType()){
NodeTraversal.traverse(compiler,functionNode.getLastChild(),scopeBuilder.new CollectProperties(fnThisType));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(functionNode.isFunction());
if(!fnThisType.isUnknownType()){
NodeTraversal.traverse(compiler,functionNode.getLastChild(),scopeBuilder.new CollectProperties(fnThisType));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fnThisType.isUnknownType()){
functionNode.getLastChild().setIsSyntheticBlock(true);
NodeTraversal.traverse(compiler,functionNode.getLastChild(),scopeBuilder.new CollectProperties(fnThisType));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fnThisType.isUnknownType()){
functionNode.addChildToBack(functionNode.getLastChild());
NodeTraversal.traverse(compiler,functionNode.getLastChild(),scopeBuilder.new CollectProperties(fnThisType));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fnThisType.isUnknownType()){
functionNode.getLastChild().setIsSyntheticBlock(true);
functionNode.addChildToBack(functionNode.getLastChild());

NodeTraversal.traverse(compiler,functionNode.getLastChild(),scopeBuilder.new CollectProperties(fnThisType));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
functionNode.getLastChild().addChildToBack(node);
if(!fnThisType.isUnknownType()){
NodeTraversal.traverse(compiler,functionNode.getLastChild(),scopeBuilder.new CollectProperties(fnThisType));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnThisType.isUnknownType()){
functionNode.getLastChild().setIsSyntheticBlock(true);
functionNode.addChildToBack(functionNode.getLastChild());
NodeTraversal.traverse(compiler,functionNode.getLastChild(),scopeBuilder.new CollectProperties(fnThisType));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fnThisType.isUnknownType()){
functionNode.getLastChild().setIsSyntheticBlock(true);
functionNode.getLastChild().setIsSyntheticBlock(true);
functionNode.addChildToBack(functionNode.getLastChild());

NodeTraversal.traverse(compiler,functionNode.getLastChild(),scopeBuilder.new CollectProperties(fnThisType));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fnThisType.isUnknownType()){
functionNode.addChildToBack(functionNode.getLastChild());
functionNode.getLastChild().setIsSyntheticBlock(true);
functionNode.addChildToBack(functionNode.getLastChild());

NodeTraversal.traverse(compiler,functionNode.getLastChild(),scopeBuilder.new CollectProperties(fnThisType));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fnThisType.isUnknownType()){
functionNode.getLastChild().setIsSyntheticBlock(true);
functionNode.addChildToBack(functionNode.getLastChild());
functionNode.getLastChild().setIsSyntheticBlock(true);
functionNode.addChildToBack(functionNode.getLastChild());

NodeTraversal.traverse(compiler,functionNode.getLastChild(),scopeBuilder.new CollectProperties(fnThisType));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fnThisType.isUnknownType()){
ret=createConcreteInstance(functionNode.getJSType().restrictByNotNullOrUndefined().toObjectType());
NodeTraversal.traverse(compiler,functionNode.getLastChild(),scopeBuilder.new CollectProperties(fnThisType));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnThisType.isUnknownType()){
parent.removeChild(node);
NodeTraversal.traverse(compiler,functionNode.getLastChild(),scopeBuilder.new CollectProperties(fnThisType));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnThisType.isUnknownType()){
functionNode.replaceChild(node,node);
NodeTraversal.traverse(compiler,functionNode.getLastChild(),scopeBuilder.new CollectProperties(fnThisType));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnThisType.isUnknownType()){
parent.removeChild(node);
functionNode.replaceChild(node,node);

NodeTraversal.traverse(compiler,functionNode.getLastChild(),scopeBuilder.new CollectProperties(fnThisType));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnThisType.isUnknownType()){
return ;
NodeTraversal.traverse(compiler,functionNode.getLastChild(),scopeBuilder.new CollectProperties(fnThisType));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnThisType.isUnknownType()){
fnThisType.getConstructor().traverse(compiler,functionNode.getLastChild(),scopeBuilder.new CollectProperties(fnThisType));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnThisType.isUnknownType()){
return false;
NodeTraversal.traverse(compiler,functionNode.getLastChild(),scopeBuilder.new CollectProperties(fnThisType));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!objectType.isUnknownType()){
NodeTraversal.traverse(compiler,functionNode.getLastChild(),scopeBuilder.new CollectProperties(fnThisType));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.SyntacticScopeCreator,69
========
scanRoot(n,parent);
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
scope=null;
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
scanRoot(n,parent);
scope=null;
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
inputId=null;
if(scope==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
inputId=null;
if(parent==null){
scopeBuilder=new GlobalScopeBuilder(scope);
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scopeBuilder=new LocalScopeBuilder(scope);
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
new LocalScopeBuilder(scope).build();
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scopeBuilder=new LocalScopeBuilder(scope);
new LocalScopeBuilder(scope).build();

scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
if(parent!=null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
inputId=null;
Preconditions.checkArgument(n.isName()||n.isGetProp());
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
inputId=null;
if(n.isName()){
return true;
}
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isParamList()&&n==scope.getRootNode()){
handleFunctionInputs(parent);
return ;
}
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.NEW :

inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
if(parent==null){
valueNode=n;
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.ASSIGN :

inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.PARAM_LIST :

inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkNotNull(n);
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.ARGUMENTS=fnName==null?"":fnName;
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.n=errorRoot;
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.ARGUMENTS=sourceName;
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.compiler=compiler;
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.scope=scope;
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkNotNull(n);
this.scope=scope;
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.removeChild(n);
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
compiler.reportCodeChange();
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.removeChild(n);
compiler.reportCodeChange();
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.RETURN :

inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.GETELEM :

inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
if(parent==TweakFunction.GET_COMPILER_OVERRIDES){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.FUNCTION :

inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.GT :

inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
n.setString(ARGUMENTS);
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
inputId=null;
compiler.reportCodeChange();
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
inputId=null;
n.setString(ARGUMENTS);
compiler.reportCodeChange();
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED_OBFUSCATED);
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.ARGUMENTS="";
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
if(nameInfo.superclass!=null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
if(nameInfo.superclass==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
if(superclass==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.n=node;
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.EQUALS :

inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
n.detachFromParent();
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
inputId=null;
Preconditions.checkState(n.hasOneChild());
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
nameInfo.name=name;
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!(parent!=null)&&NodeUtil.isFunctionExpression(n)){
traverseBranch(n,n);
}
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
pushScope(n);
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((parent!=null)&&NodeUtil.isFunctionExpression(n)){
traverseBranch(n,n);
}
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
if(INHERITS==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
if(n==null){
return ;
}
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.replaceChild(n,n);
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.replaceChild(n,n);
compiler.reportCodeChange();
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
inputId=null;
NodeUtil.copyNameAnnotations(n.getLastChild(),NodeUtil.newName(compiler.getCodingConvention(),ARGUMENTS,n,ARGUMENTS));
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.getJSType()!=null){
NodeUtil.newName(compiler.getCodingConvention(),ARGUMENTS,n,ARGUMENTS).setJSType(type);
}
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parent.replaceChild(n,NodeUtil.newName(compiler.getCodingConvention(),ARGUMENTS,n,ARGUMENTS));
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
compiler.reportCodeChange();
inputId=null;
NodeUtil.copyNameAnnotations(n.getLastChild(),NodeUtil.newName(compiler.getCodingConvention(),ARGUMENTS,n,ARGUMENTS));
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
inputId=null;
if(parent==-1){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
case Token.NEW :

if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n==null){
continue;
}
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parent.replaceChild(n,IR.string(ARGUMENTS));
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
IR.string(ARGUMENTS).copyInformationFrom(parent);
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
reportCodeChange();
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
case Token.NAME :

if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
if(config.parameter!=Config.REPLACE_ALL_VALUE){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
if(config.parameter==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
if(parent==Config.REPLACE_ALL_VALUE){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
if(parameter==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
if(!n.isReturn()){
return ;
}
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.addChildToFront(newReportFunctionExitNode());
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
compiler.reportCodeChange();
inputId=null;
if(parent!=null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.getJSType()==null&&parent.isFunction()){
varType=parent.getJSType();
}
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeTraversal.traverse(compiler,n,new BuildGlobalNamespace());
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!areValidRegexpFlags(n.getString())){
error(INVALID_REGULAR_EXPRESSION_FLAGS,flags);
return n;
}
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!areSafeFlagsToFold(n.getString())){
return n;
}
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
if(objectLiteralCast.diagnosticType==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
if(diagnosticType==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
if(ARGUMENTS==null){
return ;
}
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.ARGUMENTS=placeholderToken.isEmpty()?DEFAULT_PLACEHOLDER_TOKEN:placeholderToken;
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(compiler==null){
return null;
}
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()||n.isScript()){
return ;
}
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeTraversal.traverse(compiler,n,new PropertyGatherer());
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
if(thisValue==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.hasOneChild());
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
parent.replaceChild(n,IR.string(ARGUMENTS));
reportCodeChange();
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
if(parent==null||!parent.isFunction()||n==parent.getFirstChild()){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
if(n.getFirstChild()==null||!function.isGetProp()){
return false;
}
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n=n;
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
NodeTraversal.traverse(compiler,n,new FunctionAnalyzer(true));
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeTraversal.traverse(compiler,n,new FunctionAnalyzer(false));
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
propagateSideEffects();
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
markPureFunctionCalls();
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeTraversal.traverse(compiler,n,new GlobalGatherer());
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
if(info.siblingToInsertVarDeclBefore==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
if(siblingToInsertVarDeclBefore==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
compiler.reportCodeChange();
inputId=null;
if(info.siblingToInsertVarDeclBefore==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parent.removeChild(n);
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
if(parent==n){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
if(topScope==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
if(topScope!=null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.copyNameAnnotations(ref.node.getLastChild(),n);
inputId=null;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.SyntacticScopeCreator,70
========
if(scope==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(parent==null){
scopeBuilder=new GlobalScopeBuilder(scope);
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scopeBuilder=new LocalScopeBuilder(scope);
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
new LocalScopeBuilder(scope).build();
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scopeBuilder=new LocalScopeBuilder(scope);
new LocalScopeBuilder(scope).build();

scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent!=null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isParamList()&&n==scope.getRootNode()){
handleFunctionInputs(parent);
return ;
}
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==this.parent){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
compiler.reportCodeChange();
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
compiler.reportCodeChange();
if(parent!=null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(parent==n){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
valueNode=n;
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.removeChild(n);
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.removeChild(n);
compiler.reportCodeChange();
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(parent==TweakFunction.GET_COMPILER_OVERRIDES){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.setString(ARGUMENTS);
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.setString(ARGUMENTS);
compiler.reportCodeChange();
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
parent.replaceChild(n,IR.string(ARGUMENTS));
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED_OBFUSCATED);
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nameInfo.superclass!=null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nameInfo.superclass==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(superclass==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.hasOneChild());
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.detachFromParent();
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(parent==-1){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
reportCodeChange();
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(INHERITS==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.isReturn()){
return ;
}
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.addChildToFront(newReportFunctionExitNode());
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nameInfo.name=name;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent!=-1){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getJSType()==null&&parent.isFunction()){
varType=parent.getJSType();
}
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.NEW :

if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
global.uses.add(n);
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.NAME :

if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope=traverseChildren(n,scope);
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(objectLiteralCast.diagnosticType==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(diagnosticType==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(config.parameter!=Config.REPLACE_ALL_VALUE){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(config.parameter==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==Config.REPLACE_ALL_VALUE){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parameter==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(ARGUMENTS==null){
return ;
}
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(info.siblingToInsertVarDeclBefore==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(siblingToInsertVarDeclBefore==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
compiler.reportCodeChange();
if(info.siblingToInsertVarDeclBefore==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeTraversal.traverse(compiler,n,new BuildGlobalNamespace());
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null||!parent.isFunction()||n==parent.getFirstChild()){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(thisValue==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(topScope==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n=n;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
NodeTraversal.traverse(compiler,n,new FunctionAnalyzer(true));
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeTraversal.traverse(compiler,n,new FunctionAnalyzer(false));
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
propagateSideEffects();
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
markPureFunctionCalls();
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(topScope!=null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.copyNameAnnotations(ref.node.getLastChild(),n);
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.isFunction()){
return ;
}
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.SyntacticScopeCreator,71
com.google.javascript.jscomp.SyntacticScopeCreator,73
com.google.javascript.jscomp.SyntacticScopeCreator,76
========
if(scope==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(parent==null){
scopeBuilder=new GlobalScopeBuilder(scope);
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scopeBuilder=new LocalScopeBuilder(scope);
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
new LocalScopeBuilder(scope).build();
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scopeBuilder=new LocalScopeBuilder(scope);
new LocalScopeBuilder(scope).build();

scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent!=null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n==scope.getRootNode())return ;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.NEW :

if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==this.parent){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.getFirstChild().isName()){
return ;
}
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==n){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
case GET_NUMBER :

scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.DELPROP :

if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
ARGUMENTS=getSourceName(n);
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scope=traverseChildren(n,scope);
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.PARAM_LIST :

if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.ASSIGN :

if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(ARGUMENTS.isEmpty()){
Preconditions.checkState(parent.isFunction());
Preconditions.checkState(NodeUtil.isFunctionExpression(parent));
return ;
}
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==TweakFunction.GET_COMPILER_OVERRIDES){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.RETURN :

if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!scope.isDeclared(ARGUMENTS,false)){
return ;
}
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.FUNCTION :

if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.GETELEM :

if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
if(compiler.getCodingConvention().describeFunctionBind(n,true)==null){
return ;
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
if(getJSType(bind.target).restrictByNotNullOrUndefined().toMaybeFunctionType()==null){
return ;
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.AND :

if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case 1 :

if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
compiler.reportCodeChange();
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
case Token.DEC :

scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.NOT :

if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
case Token.POS :

scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.EQ :

if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nameInfo.superclass!=null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nameInfo.superclass==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(superclass==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
Preconditions.checkArgument(n.isWhile());
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
if(NodeUtil.getPureBooleanValue(NodeUtil.getConditionExpression(n))!=TernaryValue.FALSE){
return n;
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
NodeUtil.redeclareVarsInsideBranch(n);
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
NodeUtil.removeChild(n.getParent(),n);
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
Preconditions.checkArgument(n.isWhile());
NodeUtil.redeclareVarsInsideBranch(n);
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
Preconditions.checkArgument(n.isWhile());
NodeUtil.removeChild(n.getParent(),n);
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
NodeUtil.redeclareVarsInsideBranch(n);
NodeUtil.removeChild(n.getParent(),n);
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
Preconditions.checkArgument(n.isWhile());
NodeUtil.redeclareVarsInsideBranch(n);
NodeUtil.removeChild(n.getParent(),n);
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
reportCodeChange();
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
redeclareSimpleVar(scope,n.getFirstChild(),getNativeType(JSTypeNative.UNKNOWN_TYPE));
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED_OBFUSCATED);
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.ASSIGN_BITOR :

if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.OBJECTLIT :

if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
pushScope(n);
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.getParent().replaceChild(n,n);
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.getParent().replaceChild(n,n);
reportCodeChange();
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
tryRemoveUnconditionalBranching(n);
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
if(n==null||!callGoogNow.isCall()||callGoogNow.getNext()!=null){
return ;
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
if(n.getFirstChild().getQualifiedName()==null||!"goog.now".equals(googNowQName)||n.getFirstChild().getNext()!=null){
return ;
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
if(!n.isReturn()){
return ;
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.addChildToFront(newReportFunctionExitNode());
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
if(ARGUMENTS==null){
return n;
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
IR.string(ARGUMENTS).copyInformationFrom(parent);
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case GET_BOOLEAN :

if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
Preconditions.checkNotNull(n);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
this.ARGUMENTS=fnName==null?"":fnName;
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.n=errorRoot;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.ARGUMENTS=sourceName;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.compiler=compiler;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.scope=scope;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.scope=scope;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
Preconditions.checkNotNull(n);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.CATCH :

if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
if(n==null){
continue;
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.copyNameAnnotations(n.getLastChild(),NodeUtil.newName(compiler.getCodingConvention(),ARGUMENTS,n,ARGUMENTS));
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
parent.replaceChild(n,NodeUtil.newName(compiler.getCodingConvention(),ARGUMENTS,n,ARGUMENTS));
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.copyNameAnnotations(n.getLastChild(),NodeUtil.newName(compiler.getCodingConvention(),ARGUMENTS,n,ARGUMENTS));
compiler.reportCodeChange();
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
case Token.NEW :

scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
if(NodeUtil.containsFunction(n)){
return ;
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
interpretAssigns();
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
removeUnreferencedVars();
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.NAME :

if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.VAR :

if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
n.detachFromParent();
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
compiler.reportCodeChange();
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
n.detachFromParent();
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isVar()){
n=n;
}else {
Preconditions.checkState(n.hasOneChild());
newInitializer=n.getFirstChild();
n.removeChild(newInitializer);
}
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(INHERITS==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(objectLiteralCast.diagnosticType==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(diagnosticType==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case OVERRIDE_DEFAULT_VALUE :

if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
if(NodeUtil.getImpureBooleanValue(n)!=TernaryValue.FALSE){
return n;
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getJSType()==null&&parent.isFunction()){
varType=parent.getJSType();
}
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
Preconditions.checkNotNull(parent);
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
n=n.getNext();
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
scope=tightenTypesAfterAssertions(scope,n);
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
Preconditions.checkState(n.isSwitch());
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
Preconditions.checkState(n.isName()||n.isString());
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
if(n.getFirstChild().isVar()){
lhs=lhs.getLastChild();
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
if(n.getFirstChild()==null){
return ;
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
if(createCheckTypeCallNode(n.getJSType().toMaybeFunctionType().getReturnType(),n.getFirstChild().cloneTree())==null){
return ;
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!shouldOptimizeScope(parent)){
return ;
}
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
if(ARGUMENTS.equals(n.getString())){
return ;
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
updateScopeForTypeChange(scope,n.getFirstChild(),n.getFirstChild().getJSType(),getJSType(n.getLastChild()));
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setDeferredType(n,createFunctionTypeFromNodes(n,NodeUtil.getBestLValueName(NodeUtil.getBestLValue(n)),NodeUtil.getBestJSDocInfo(n),NodeUtil.getBestLValue(n)));
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.isFunctionDeclaration(n)){
defineSlot(n.getFirstChild(),n,createFunctionTypeFromNodes(n,NodeUtil.getBestLValueName(NodeUtil.getBestLValue(n)),NodeUtil.getBestJSDocInfo(n),NodeUtil.getBestLValue(n)));
}
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parent.replaceChild(n,n);
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
bind.target.detachFromParent();
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n=bind.target;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
addParameterAfter(bind.parameters,n);
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(bind.thisValue!=null&&!NodeUtil.isUndefined(bind.thisValue)){
Node IR.getprop(n.cloneTree(),IR.string("call").srcref(callTarget))=IR.getprop(n.cloneTree(),IR.string("call").srcref(callTarget));
n.replaceChild(callTarget,newCallTarget);
n.addChildAfter(bind.thisValue.cloneTree(),newCallTarget);
n.putBooleanProp(Node.FREE_CALL,false);
}else {
n.putBooleanProp(Node.FREE_CALL,true);
}
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.isVar()){
return ;
}
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.hasOneChild());
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
if(n.isName()){
Preconditions.checkArgument(parent.isFunction()||parent.isVar());
}else {
Preconditions.checkArgument(n.isGetProp()&&(parent.isAssign()||parent.isExprResult()));
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parent.replaceChild(n,IR.arraylit());
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
this.n=node;
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
replaceChild(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
Preconditions.checkState(NodeUtil.isObjectLitKey(n,n.getParent())||n.getType()==Token.NAME||nType==Token.GETPROP);
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null||!parent.isFunction()||n==parent.getFirstChild()){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getFirstChild()==null||!function.isGetProp()){
return false;
}
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nameInfo.name=name;
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.putBooleanProp(Node.FREE_CALL,true);
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
Preconditions.checkState(n.isTry());
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
this.compiler=compiler;
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.ARGUMENTS="";
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
if(hasBreakOrContinue(n)){
return n;
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
Preconditions.checkState(NodeUtil.isControlStructureCodeBlock(n,n.getFirstChild()));
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(mayHaveSideEffects(n)){
Node IR.exprResult(n.detachFromParent()).srcref(cond)=IR.exprResult(cond.detachFromParent()).srcref(cond);
parent.addChildAfter(condStatement,n.removeFirstChild());
}
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
if(NodeUtil.getImpureBooleanValue(n)!=TernaryValue.FALSE){
return n;
}
Preconditions.checkState(NodeUtil.isControlStructureCodeBlock(n,n.getFirstChild()));
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
if(!n.isName()){
return ;
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
nameObj.type=type;
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parent.removeChild(n);
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
NodeTraversal.traverse(compiler,n,new BuildGlobalNamespace());
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
this.ARGUMENTS=placeholderToken.isEmpty()?DEFAULT_PLACEHOLDER_TOKEN:placeholderToken;
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
NodeTraversal.traverse(compiler,n,this);
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
if(compiler==null){
return null;
}
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
NodeTraversal.traverse(compiler,n,new PropertyGatherer());
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case AGGRESSIVE_HEURISTIC :

if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(a.newName==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(newName==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
NodeTraversal.traverse(compiler,n,new GlobalGatherer());
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==info.initialValue){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeTraversal.traverse(compiler,n,new InstrumentCallback());
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
if(compiler.getModuleGraph()==null){
return ;
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
if(n!=null||n!=null){
throw new IllegalStateException("It is illegal to call PureFunctionIdentifier.process "+"twice the same instance.  Please use a new ");
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
n=n;
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
NodeTraversal.traverse(compiler,n,new FunctionAnalyzer(true));
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
NodeTraversal.traverse(compiler,n,new FunctionAnalyzer(false));
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
markPureFunctionCalls();
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
if(n!=null||n!=null){
throw new IllegalStateException("It is illegal to call PureFunctionIdentifier.process "+"twice the same instance.  Please use a new ");
}
n=n;
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
default :

if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
if(!Strings.isNullOrEmpty(ARGUMENTS)&&!Strings.isNullOrEmpty(ARGUMENTS)){
throw new IllegalArgumentException("Cannot pass in both unaliasable and aliasable globals; you must "+"choose one or the other.");
}
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
if(!Strings.isNullOrEmpty(ARGUMENTS)){
this.unaliasableGlobals.addAll(Arrays.asList(unaliasableGlobals.split(",")));
}
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
if(!Strings.isNullOrEmpty(ARGUMENTS)){
this.aliasableGlobals.addAll(Arrays.asList(aliasableGlobals.split(",")));
}
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
Preconditions.checkState(parent==null);
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(info.siblingToInsertVarDeclBefore==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(siblingToInsertVarDeclBefore==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
compiler.reportCodeChange();
if(info.siblingToInsertVarDeclBefore==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
NodeTraversal.traverse(compiler,n,new CollectTweaks());
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(topScope==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
compiler.addToDebugLog("JS property assignments:");
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
NodeTraversal.traverse(compiler,n,new GatherExtractionInfo());
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
if(declar.lhs.getFirstChild().getFirstChild().getProp(Node.ORIGINALNAME_PROP)!=null){
ARGUMENTS=originalName.toString();
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
NodeUtil.setDebugInformation(NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),ARGUMENTS+".",declar.node,declar.memberName).getFirstChild(),n,"?"+".prototype");
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n=IR.exprResult(IR.assign(IR.getelem(IR.getprop(NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),ARGUMENTS),IR.string("prototype")),n),IR.trueNode()));
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(topScope!=null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new VariableUseDeclarationMap(compiler).mapUses(n);
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parent.addChildToFront(IR.name(ARGUMENTS).srcref(n));
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(parent.isCall());
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parent.putBooleanProp(Node.FREE_CALL,true);
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
NodeTraversal.traverse(compiler,n,new ProcessVars(false));
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
NodeTraversal.traverse(compiler,n,new FindAliasableNodes());
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
Preconditions.checkNotNull(ARGUMENTS);
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
NodeUtil.copyNameAnnotations(ref.node.getLastChild(),n);
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ref.node.getParent().removeChild(n);
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(ref.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)||(ref.node.getParent().getJSDocInfo()!=null&&info.isConstant())){
NodeUtil.newName(compiler.getCodingConvention(),ARGUMENTS,ref.node.getAncestor(2),n.getFullName()).putBooleanProp(Node.IS_CONSTANT_NAME,true);
}
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
IR.call(NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),ARGUMENTS,n,ARGUMENTS)).addChildToBack(IR.string(ARGUMENTS));
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
IR.call(NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),ARGUMENTS,n,ARGUMENTS)).addChildToBack(NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),ARGUMENTS,n,testFunctionName));
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeTraversal.traverse(compiler,n,new RewriteGlobalFunctionStatementsToVarAssignmentsCallback());
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeTraversal.traverse(compiler,n,new RewriteScopeCallback());
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeTraversal.traverse(compiler,n,new RemoveGlobalVarCallback());
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeTraversal.traverse(compiler,n,new MakeExternsReferenceWindowExplicitly());
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new Node(Token.SCRIPT).setStaticSourceFile(SourceFile.fromCode(inputId.getIdName(),""));
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
NodeTraversal.traverse(compiler,n,new FindCandidateFunctions());
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
getSynthesizedExternsRoot().addChildToBack(IR.var(IR.name(ARGUMENTS)));
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeTraversal.traverse(compiler,n,new GlobalScopeBuilder(scope));
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkNotNull(inputId);
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
removeScriptReferences(inputId);
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.SyntacticScopeCreator,78
UNKNOWN ASTNode type : catch (UnsupportedOperationException ex) {
  error(NEGATING_A_NON_NUMBER_ERROR,left);
  return n;
}

UNKNOWN ASTNode type : catch (UnsupportedOperationException ex) {
  error(NEGATING_A_NON_NUMBER_ERROR,left);
  return n;
}

UNKNOWN ASTNode type : catch (IllegalArgumentException e) {
  compiler.report(t.makeError(n,INVALID_STYLE_ERROR,styleStr));
  return;
}

========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
scope=null;
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(parent==null){
scope=new Scope(n,compiler);
}else {
scope=new Scope(parent,n);
}
scope=null;
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
ARGUMENTS=getSourceName(n);
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
returnedScope=n;
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()||n.isScript()){
Preconditions.checkNotNull(inputId);
returnedScope=NodeUtil.getSourceName(n);
}
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope.getGlobalScope();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
scanRoot(n,parent);
this.n=nameNode;
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
this.scope=scope;
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.returnedScope=n.getStaticSourceFile();
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.getRootOfQualifiedName(n).isName()){
Var scope.getVar(NodeUtil.getRootOfQualifiedName(n).getString())=scope.getVar(root.getString());
if(var!=null){
return var.getScope();
}
}
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
inputId=null;
this.scope=scope;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
returnedScope=new NameGenerator(Sets.newHashSet(),"",null);
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.redeclareVarsInsideBranch(n);
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
NodeUtil.removeChild(n,n);
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
NodeUtil.redeclareVarsInsideBranch(n);
NodeUtil.removeChild(n,n);
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
ARGUMENTS="";
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n==scope.getRootNode())return ;
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope=traverseChildren(n,scope);
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkNoTypeCheckSection(n,false);
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case GET_NUMBER :

scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
inputId=null;
Scope returnedScope=IR;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
inputId=null;
if(ARGUMENTS==null){
return n;
}
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
replaceChild(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
compiler.reportCodeChange();
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
scanRoot(n,parent);
Preconditions.checkState(n!=null);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
ARGUMENTS="";
scanRoot(n,parent);
Preconditions.checkState(n!=null);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
returnedScope=n;
scanRoot(n,parent);
Preconditions.checkState(n!=null);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ARGUMENTS="";
returnedScope=n;
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ARGUMENTS="";
returnedScope=n;
scanRoot(n,parent);
Preconditions.checkState(n!=null);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
bind.target.detachFromParent();
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
inputId=null;
Preconditions.checkArgument(n.isWhile());
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(NodeUtil.getPureBooleanValue(n)!=TernaryValue.FALSE){
return n;
}
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
inputId=null;
Preconditions.checkArgument(n.isDo());
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(NodeUtil.getImpureBooleanValue(n)!=TernaryValue.FALSE){
return n;
}
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
inputId=null;
Scope returnedScope=codingConvention;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
returnedScope=new Scope(parent,n);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
inputId=null;
Scope returnedScope=node;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
defineSlot(n,n,null);
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.hasOneChild()){
NodeUtil.redeclareVarsInsideBranch(catchBlock);
}
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
traverseNodes(n);
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
formatConclusion();
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
inputId=null;
Scope returnedScope=aliasTypes;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ARGUMENTS="right side of comparison";
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
compiler.report(JSError.make(NodeUtil.getSourceName(n),n,VAR_MULTIPLY_DECLARED_ERROR,n.toString()));
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.INC :

scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.INSTANCEOF :

scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.DEC :

scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.POS :

scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.ASSIGN :

scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
this.returnedScope=null;
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
this.n=rootNode;
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
reportCodeChange();
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.returnedScope=new SourceFile(ARGUMENTS);
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
Preconditions.checkState(parent.isGlobal());
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
traverseBranch(n,null);
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
popScope();
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ARGUMENTS="";
scanRoot(n,parent);
Preconditions.checkState(parent.isGlobal());
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
returnedScope=n;
scanRoot(n,parent);
Preconditions.checkState(parent.isGlobal());
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ARGUMENTS="";
returnedScope=n;
scanRoot(n,parent);
Preconditions.checkState(parent.isGlobal());
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n=n.getNext();
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n=n.getNext();
compiler.reportCodeChange();
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
nameObj.type=type;
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
inputId=null;
parent.replaceChild(n,n);
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scopeToDeclareIn;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
redeclareSimpleVar(scope,n,getNativeType(JSTypeNative.UNKNOWN_TYPE));
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
inputId=null;
n.detachFromParent();
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!normalizeNumericString(ARGUMENTS).equals("0")){
return n;
}
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
inputId=null;
Scope returnedScope=fns;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
inputId=null;
if(isCandidateUsage(n)){
return ;
}
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
inputId=null;
Scope returnedScope=OR;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
inputId=null;
Scope returnedScope=AND;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.redeclareVarsInsideBranch(n);
reportCodeChange();
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
inputId=null;
Scope returnedScope=LOCAL_VAR_PREFIX;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.setString(ARGUMENTS);
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
scanRoot(n,parent);
inputId=null;
n.removeChild(n.getFirstChild());
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
scanRoot(n,parent);
inputId=null;
n.removeChild(n.getFirstChild());
Scope returnedScope=IR;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
reportCodeChange();
scanRoot(n,parent);
inputId=null;
Scope returnedScope=IR;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nameInfo.name=name;
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
inputId=null;
Preconditions.checkArgument(n.isCall());
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
scanRoot(n,parent);
inputId=null;
Preconditions.checkArgument(n.isString());
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
scanRoot(n,parent);
inputId=null;
Preconditions.checkArgument(n.isCall());
Preconditions.checkArgument(n.isString());
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
scanRoot(n,parent);
inputId=null;
Scope returnedScope=NAME;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
inputId=null;
Scope returnedScope=GETPROP;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(NodeUtil.isObjectLitKey(n,n.getParent())||n.getType()==Token.NAME||nType==Token.GETPROP);
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
inputId=null;
Scope returnedScope=length;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkNotNull(inputId);
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
parent.replaceChild(n,n.removeFirstChild());
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateChildCount(n,1);
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateObjectLiteralKeyName(n);
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateChildCount(n,1);
validateObjectLiteralKeyName(n);
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
addAllChildren(n);
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
inputId=null;
n.getNext().detachFromParent();
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
scanRoot(n,parent);
inputId=null;
n.getNext().detachFromParent();
Scope returnedScope=IR;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parent.replaceChild(n,n);
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
inputId=null;
Scope returnedScope=TWEAK_FUNCTIONS_MAP;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
inputId=null;
if(!n.isCall()){
return ;
}
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parent.replaceChild(n,n);
scanRoot(n,parent);
inputId=null;
Scope returnedScope=IR;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
IR.empty().copyInformationFrom(n);
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.addChildBefore(IR.empty(),n);
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.addChildAfter(IR.empty().cloneNode(),n);
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
this.n=node;
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
this.n=nameNode;
this.scope=scope;
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.AND :

scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
this.returnedScope=null;
this.n=rootNode;
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
this.compiler=compiler;
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.ARGUMENTS="";
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.copyNameAnnotations(n.getLastChild(),NodeUtil.newName(compiler.getCodingConvention(),ARGUMENTS,n,ARGUMENTS));
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case GET_BOOLEAN :

scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
inputId=null;
Scope returnedScope=typeRegistry;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
global.uses.add(n);
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parent.replaceChild(n,n.getFirstChild().getNext());
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(scope.getVar(ARGUMENTS)!=null){
JSType scope.getVar(ARGUMENTS).getType()=ownerVar.getType();
return ObjectType.cast(ownerVarType==null?null:ownerVarType.restrictByNotNullOrUndefined());
}
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
inputId=null;
Scope returnedScope=references;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeTraversal.traverse(compiler,n,new GatherSideEffectSubexpressionsCallback(compiler,new CopySideEffectSubexpressions(compiler,Lists.newArrayList())));
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
inputId=null;
if(!scope.isDeclared(ARGUMENTS,false)){
return ;
}
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.getBestLValueName(NodeUtil.getBestLValue(n))!=null&&lValueName.endsWith(".prototype")){
return ;
}
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case OVERRIDE_DEFAULT_VALUE :

scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
inputId=null;
Preconditions.checkState((NodeUtil.isAssociative(n.getType())&&NodeUtil.isCommutative(opType))||n.isAdd());
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
inputId=null;
Preconditions.checkState(!n.isAdd()||!NodeUtil.mayBeString(n));
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.returnedScope=null;
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
inputId=null;
Scope returnedScope=graph;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.putBooleanProp(Node.FREE_CALL,true);
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.putBooleanProp(Node.FREE_CALL,true);
scanRoot(n,parent);
inputId=null;
Scope returnedScope=IR;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.getLastChild().getNext()==null&&body.isBlock());
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
collectMaybeUnreferencedVars(returnedScope);
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new Node(Token.SCRIPT).setStaticSourceFile(SourceFile.fromCode(inputId.getIdName(),""));
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
scanRoot(n,parent);
inputId=null;
scope=traverseChildren(n,scope);
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.removeChild(n);
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.removeChild(n);
compiler.reportCodeChange();
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
updateAssignAllowedStack(n,false);
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
inputId=null;
Scope returnedScope=explicitModule;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
inputId=null;
Scope returnedScope=typeSystem;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
inputId=null;
Scope returnedScope=s;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scanRoot(n,parent);
inputId=null;
Preconditions.checkState(n.isName());
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
scanRoot(n,parent);
inputId=null;
Scope returnedScope=consistNameMap;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(compiler.getCodingConvention().describeFunctionBind(n,true)==null){
return ;
}
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getJSType(bind.target).restrictByNotNullOrUndefined().toMaybeFunctionType()==null){
return ;
}
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n=n;
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
compiler.reportCodeChange();
scanRoot(n,parent);
inputId=null;
Scope returnedScope=IR;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isName()){
Preconditions.checkArgument(parent.isFunction()||parent.isVar());
}else {
Preconditions.checkArgument(n.isGetProp()&&(parent.isAssign()||parent.isExprResult()));
}
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.isName()){
return ;
}
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.SyntacticScopeCreator,79
========
inputId=null;
Scope returnedScope=scope;
this.n=node;
scope=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
Scope returnedScope=scope;
this.n=nameNode;
scope=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
Scope returnedScope=scope;
this.n=errorRoot;
scope=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
Scope returnedScope=scope;
this.ARGUMENTS=sourceName;
scope=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
Scope returnedScope=scope;
this.compiler=compiler;
scope=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(scope.getVar(ARGUMENTS)!=null){
JSType scope.getVar(ARGUMENTS).getType()=ownerVar.getType();
return ObjectType.cast(ownerVarType==null?null:ownerVarType.restrictByNotNullOrUndefined());
}
inputId=null;
Scope returnedScope=scope;
scope=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nameInfo.name=name;
inputId=null;
Scope returnedScope=scope;
scope=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
Scope returnedScope=scope;
this.n=original.node;
scope=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ARGUMENTS="";
inputId=null;
Scope returnedScope=scope;
scope=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n=n;
inputId=null;
Scope returnedScope=scope;
scope=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
pushScope(n);
inputId=null;
Scope returnedScope=scope;
scope=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.n=node;
inputId=null;
Scope returnedScope=scope;
scope=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.compiler=compiler;
inputId=null;
Scope returnedScope=scope;
scope=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.ARGUMENTS="";
inputId=null;
Scope returnedScope=scope;
scope=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n!=null);
inputId=null;
Scope returnedScope=scope;
scope=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(n!=null);
ARGUMENTS="";
inputId=null;
Scope returnedScope=scope;
scope=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n!=null);
n=n;
inputId=null;
Scope returnedScope=scope;
scope=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
ARGUMENTS="";
n=n;
inputId=null;
Scope returnedScope=scope;
scope=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n!=null);
ARGUMENTS="";
n=n;
inputId=null;
Scope returnedScope=scope;
scope=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
if(!scope.isDeclared(ARGUMENTS,false)){
return ;
}
Scope returnedScope=scope;
scope=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(scope.getRootNode().getFirstChild().getNext().isParamList());
inputId=null;
Scope returnedScope=scope;
scope=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(scope.isGlobal());
inputId=null;
Scope returnedScope=scope;
scope=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
pushScope(scope);
inputId=null;
Scope returnedScope=scope;
scope=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
traverseBranch(n,null);
inputId=null;
Scope returnedScope=scope;
scope=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
popScope();
inputId=null;
Scope returnedScope=scope;
scope=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(scope.isGlobal());
ARGUMENTS="";
inputId=null;
Scope returnedScope=scope;
scope=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(scope.isGlobal());
n=n;
inputId=null;
Scope returnedScope=scope;
scope=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(scope.isGlobal());
ARGUMENTS="";
n=n;
inputId=null;
Scope returnedScope=scope;
scope=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
(new NodeTraversal(compiler,new ReferenceCollectingCallback(compiler,ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR,Predicates.equalTo(scope.getVar(n.getString()))))).traverseAtScope(scope);
inputId=null;
Scope returnedScope=scope;
scope=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clearAst();
inputId=null;
Scope returnedScope=scope;
scope=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()||n.isScript()){
Preconditions.checkNotNull(inputId);
ARGUMENTS=NodeUtil.getSourceName(n);
}
inputId=null;
Scope returnedScope=scope;
scope=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
NodeTraversal.traverse(compiler,scope.getRootNode(),this);
Scope returnedScope=scope;
scope=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
inputId=null;
Scope returnedScope=references;
scope=null;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.SyntacticScopeCreator,80
========
scanRoot(n,parent);
Scope returnedScope=scope;
scope=null;
return returnedScope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
inputId=null;
Scope returnedScope=scope;
scope=null;
return returnedScope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
scanRoot(n,parent);
inputId=null;
Scope returnedScope=scope;
scope=null;
return returnedScope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Scope returnedScope=scope;
scope=null;
return scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Scope returnedScope=scope;
scope=null;
return parent;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Scope returnedScope=scope;
scope=null;
if(scope.vars.containsKey(ARGUMENTS))return true;
return returnedScope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Scope returnedScope=scope;
scope=null;
if(n!=null&&NodeUtil.isObjectLitKey(lValue,lValue.getParent())){
return false;
}
return returnedScope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!scope.isDeclared(ARGUMENTS,false)){
return ;
}
Scope returnedScope=scope;
scope=null;
return returnedScope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Scope returnedScope=scope;
scope=null;
return varsToRemove;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Scope returnedScope=scope;
scope=null;
Preconditions.checkArgument(n.isName()||n.isGetProp());
return returnedScope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Scope returnedScope=scope;
scope=null;
if(n.isName()){
return true;
}
return returnedScope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Scope returnedScope=scope;
scope=null;
if(n.getQualifiedName()==null){
return false;
}
return returnedScope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Scope returnedScope=scope;
scope=null;
Preconditions.checkArgument(n.isName()||n.isGetProp());
return scope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Scope returnedScope=scope;
this.n=node;
scope=null;
return returnedScope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()||n.isScript()){
Preconditions.checkNotNull(inputId);
ARGUMENTS=NodeUtil.getSourceName(n);
}
Scope returnedScope=scope;
scope=null;
return returnedScope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeTraversal.traverse(compiler,scope.getRootNode(),this);
Scope returnedScope=scope;
scope=null;
return returnedScope;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.SyntacticScopeCreator,81
com.google.javascript.jscomp.SyntacticScopeCreator,85
UNKNOWN ASTNode type : catch (NumberFormatException e) {
  return n;
}

UNKNOWN ASTNode type : catch (NumberFormatException e) {
  return n;
}

UNKNOWN ASTNode type : catch (IllegalArgumentException e) {
  compiler.report(t.makeError(n,INVALID_STYLE_ERROR,styleStr));
  return;
}

UNKNOWN ASTNode type : catch (UnsupportedOperationException e) {
  violation("getString failed for" + Token.name(n.getType()),n);
}

UNKNOWN ASTNode type : catch (UnsupportedOperationException e) {
  violation("getString failed for" + Token.name(n.getType()),n);
}

UNKNOWN ASTNode type : catch (IllegalArgumentException ex) {
  t.report(n,MALFORMED_REGEXP,ex.getMessage());
}

========
if(inputId!=null){
inputId=NodeUtil.getInputId(n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(inputId==n){
inputId=NodeUtil.getInputId(n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(inputId==null){
actualReturnType=getNativeType(VOID_TYPE);
inputId=NodeUtil.getInputId(n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(inputId==null){
ESCAPED_JS_STRINGS.put(ARGUMENTS,ARGUMENTS);
inputId=NodeUtil.getInputId(n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(inputId==VariableLiveness.KILL){
inputId=NodeUtil.getInputId(n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
initCompilerOptionsIfTesting();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
putCompilerInput(new CompilerInput(SourceFile.fromCode("[testcode]",ARGUMENTS)).getInputId(),input);
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(inputId==null){
inputId=IR.block().getInputId(n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(ARGUMENTS!=null&&ARGUMENTS!=null);
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.getJSType()==null&&parent.isFunction()){
varType=parent.getJSType();
}
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(inputId==null){
if(n.isAssign()){
Node n=n.getLastChild();
n.removeChild(n);
parent.replaceChild(n,n);
}else {
Preconditions.checkState(n.isName());
n.removeChild(n.getFirstChild());
}
inputId=NodeUtil.getInputId(n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(inputId==null){
compiler.reportCodeChange();
inputId=NodeUtil.getInputId(n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(inputId==null){
if(n.isAssign()){
Node n=n.getLastChild();
n.removeChild(n);
parent.replaceChild(n,n);
}else {
Preconditions.checkState(n.isName());
n.removeChild(n.getFirstChild());
}
compiler.reportCodeChange();

inputId=NodeUtil.getInputId(n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(inputId==n){
compiler.reportCodeChange();
inputId=NodeUtil.getInputId(n);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
UNKNOWN ASTNode type : catch (NumberFormatException e) {
  return n;
}

UNKNOWN ASTNode type : catch (NumberFormatException e) {
  return n;
}

UNKNOWN ASTNode type : catch (IllegalArgumentException e) {
  compiler.report(t.makeError(n,INVALID_STYLE_ERROR,styleStr));
  return;
}

UNKNOWN ASTNode type : catch (UnsupportedOperationException e) {
  violation("getString failed for" + Token.name(n.getType()),n);
}

UNKNOWN ASTNode type : catch (UnsupportedOperationException e) {
  violation("getString failed for" + Token.name(n.getType()),n);
}

UNKNOWN ASTNode type : catch (IllegalArgumentException ex) {
  t.report(n,MALFORMED_REGEXP,ex.getMessage());
}

========
if(n==null){
continue;
}
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isFunctionExpression(n)&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(n.isFunction());
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(n.isFunction());
if(!NodeUtil.isFunctionExpression(n)&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fnName==null&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fnName.isEmpty()&&fnName.getCodingConvention().isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.isName()){
return ;
}
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((!fnName.getFirstChild().isEmpty())&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getLineno()!=-1&&!n.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.getFirstChild().getString()!=null&&!name.isEmpty()&&parent!=null&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&isInThrowExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parseLine(fnName)&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&isLowerPrecedenceInExpression(fnName.getFirstChild(),OR_PRECEDENCE)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&isLowerPrecedenceInExpression(fnName.getFirstChild(),AND_PRECEDENCE)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.referencesThis(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!n.isScript()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fnName.isObjectLit()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(NodeUtil.isGet(n));
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
NodeUtil.redeclareVarsInsideBranch(n);
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fnName.reportCodeChange();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getNext()!=null&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!n.isArrayLit()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
c=IR.block().srcref(n);
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
reportChange();
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
c=IR.block().srcref(n);
reportChange();

declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.isExprResult()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!n.hasChildren()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!hasFinally(n)&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.getParent().isFunction()&&canFuseIntoOneStatement(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.getParent().isFunction()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fnName.isEmpty()&&canFuseIntoOneStatement(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
reportCodeChange();
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(isPropertyAssignmentInExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&isPropertyAssignmentInExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
return ;
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.isOptionalArg()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.getJSDocInfo()==null&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((parent.isCall()&&parent.getFirstChild()==n)&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isUpperCase(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.redeclareVarsInsideBranch(fnNameNode);
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((NodeUtil.isAssignmentOp(n)&&parent.getFirstChild()==n)&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isGetProp()&&n==n.getFirstChild()&&NodeUtil.isAssignmentOp(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isGetProp()&&n==n.getFirstChild()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fnName.isEmpty()&&NodeUtil.isAssignmentOp(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fnName.getAnnotation()!=GraphReachability.REACHABLE&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
tryRemoveUnconditionalBranching(n);
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((parent.isIf()||parent.isWhile())&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.isCall()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((parent.isHook()&&parent.getFirstChild()!=n)&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&isVariableStillLiveWithinExpression(n,fnNameNode,var.name)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isFunction()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fnName!=null&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((n.isVar()||NodeUtil.isFunctionDeclaration(parent))&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
fnName.addSuppression("duplicate");
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&shouldReportThis(fnNameNode,n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent.getFirstChild()==n&&isReferenceToRemovedVar(fnNameNode,n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent.getFirstChild()==n&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&isReferenceToRemovedVar(fnNameNode,n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&fnName.getEntry().isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((n.isName())&&isDeclaration(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((n.isName())&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fnName.isEmpty()&&isDeclaration(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(canNameValueChange(fnNameNode,n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&canNameValueChange(fnNameNode,n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fnNameNode.isWhile());
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkArgument(fnNameNode.isDo());
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fnNameNode==null||areMatchingExits(n,fnNameNode)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fnNameNode==null&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fnName.isEmpty()&&areMatchingExits(n,fnNameNode)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
n.detachFromParent();
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
return null;
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
n.detachFromParent();
return null;

declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fnNameNode==null&&NodeUtil.isFunctionExpression(n)){
n.detachFromParent();
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.getJSType()!=null&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
fnName.put(n,n);
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((n.isObjectLit())&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
n.putProp(Node.ORIGINALNAME_PROP,fnName);
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(isPinningPropertyUse(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&isPinningPropertyUse(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isUndefined(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
return fnNameNode;
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
reportCodeChange();
return fnNameNode;

declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isUndefined(n)){
reportCodeChange();
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n!=null&&!n.isScript()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fnName==null&&NodeUtil.isFunctionExpression(n)){
return ;
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(statementMustExitParent(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&statementMustExitParent(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.isQuotedString()&&TokenStream.isJSIdentifier(ARGUMENTS)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.isQuotedString()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fnName.isEmpty()&&TokenStream.isJSIdentifier(ARGUMENTS)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.hasChildren()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
n.getParent().replaceChild(n,fnNameNode);
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
n.getParent().replaceChild(n,fnNameNode);
reportCodeChange();
return fnNameNode;

declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
n.getParent().replaceChild(n,fnNameNode);
reportCodeChange();
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
n.getParent().replaceChild(n,fnNameNode);
return fnNameNode;
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
reportCodeChange();
return fnNameNode;
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
n.getParent().replaceChild(n,fnNameNode);
reportCodeChange();
return fnNameNode;
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.inGlobalScope()){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.inGlobalScope()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getNext()!=null&&n.getNext().isString()&&NodeUtil.isGet(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.getNext()!=null&&sibling.isString()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isGet(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fnName.isExtern()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
compiler.reportCodeChange();
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n==null||areMatchingExits(n,n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n==null&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fnName.isEmpty()&&areMatchingExits(n,n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
this.reportCodeChange();
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
this.reportCodeChange();
return fnNameNode;

declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n==null&&NodeUtil.isFunctionExpression(n)){
return fnNameNode;
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n==parent.getFirstChild()&&parent.getChildCount()==2&&n.getNext().isName()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
n.removeChild(fnNameNode);
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
n.addChildToBack(fnNameNode);
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
return n;
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
n.removeChild(fnNameNode);
n.addChildToBack(fnNameNode);
reportCodeChange();
return n;

declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
n.removeChild(fnNameNode);
n.addChildToBack(fnNameNode);
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
n.removeChild(fnNameNode);
reportCodeChange();
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
n.addChildToBack(fnNameNode);
reportCodeChange();
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
n.removeChild(fnNameNode);
n.addChildToBack(fnNameNode);
reportCodeChange();
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(!NodeUtil.isObjectLitKey(n,n.getParent()));
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(!NodeUtil.isObjectLitKey(n,n.getParent()));
if(n==null&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
n.getParent().replaceChild(n,n);
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n!=null&&isCallToScopeMethod(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n!=null&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fnName.isEmpty()&&isCallToScopeMethod(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
transformation=fnName.logAliasTransformation(n.getSourceFileName(),getSourceRegion(n));
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
if(n.getFirstChild().getJSType()==null||n.getFirstChild().getJSType().toObjectType()==null){
return ;
}
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isCall()&&n.getChildCount()==2&&"require".equals(n.getFirstChild().getQualifiedName())&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
n.addChildToBack(IR.and(fnNameNode,n.detachFromParent()).srcref(cond));
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
n.addChildrenToBack(fnName.detachFromParent());
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
n.addChildToBack(IR.and(fnNameNode,n.detachFromParent()).srcref(cond));
n.addChildrenToBack(fnName.detachFromParent());
reportCodeChange();
return n;

declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
reportCodeChange();
return n;
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getParent()!=null&&NodeUtil.isStatement(n)&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(parent.isAssign()&&parent.getFirstChild()==n&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
add(")");
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
fnNameNode.detachFromParent();
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(ARGUMENTS==null||!"goog.now".equals(googNowQName)&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.removeChild(n);
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
compiler.reportCodeChange();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.removeChild(n);
compiler.reportCodeChange();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
fnName.replaceChild(n,IR.exprResult(IR.assign(IR.getprop(IR.name("module"),IR.string("exports")),n)).useSourceInfoFromForTree(n));
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
fnName.reportCodeChange();
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
fnName.reportCodeChange();
return ;

declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.isLValue(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fnName.isEmpty()&&NodeUtil.isLValue(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fnName.isEmpty()&&isMarkedExpose(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getEnclosingScope(n).getQualifiedSlot(ARGUMENTS)!=null&&lexicalSym.isLexicalVariable()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&getEnclosingScope(n).getQualifiedSlot(ARGUMENTS).getDeclaration().isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getType()!=Token.GT&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
NodeUtil.copyNameAnnotations(n.getLastChild(),NodeUtil.newName(fnName.getCodingConvention(),ARGUMENTS,n,fnNameNode));
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.isString()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!scope.isDeclared(fnNameNode,false)&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent!=null&&parent.isVar()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnName.isEmpty()&&NodeUtil.isObjectLitKey(fnNameNode,n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fnName.isEmpty()&&NodeUtil.isStatementBlock(n)){
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
fnName.addOp(ARGUMENTS,true);
declareVar(fnNameNode);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
valueString=a.getString();
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
child=a.getNext();
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild().getNext().getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=n.getFirstChild().getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(args.isObjectLit());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
state.sideEffects=true;
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
parent=n;
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
state.sideEffects=true;
parent=n;

Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isName());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
childOf1=a.getNext();
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
childOf2=args.getFirstChild().getNext();
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
childOf1=a.getNext();
childOf2=args.getFirstChild().getNext();

Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild().getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
next=a.getNext();
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
a=args.getFirstChild().getNext();
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n=a.getNext();
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
rhs=a.getNext();
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
key=a.getNext();
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
connectToPossibleExceptionHandler(n,node.getFirstChild());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
if(a.isName()||a.isThis()){
return a;
}
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(args.get(ARGUMENTS)!=null);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkNotNull(a);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(a.getType()==Token.BLOCK);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
a=child.getFirstChild();
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(args.getParent().isFunction());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
cArg=a.getNext();
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Maps.newLinkedHashMap().put(THIS_MARKER,NodeUtil.newUndefinedNode(n));
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(a.getFirstChild()==n);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(NodeUtil.isAssignmentOp(args));
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(a.isBlock()||addingRoot.isScript());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(a.getFirstChild()==null||!addingRoot.getFirstChild().isScript());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
reportCodeChange();
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isAssign());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
elseBody=null;
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
elseBody=null;
reportCodeChange();

Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
bChild=a.getNext();
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
if(NodeUtil.getFunctionJSDocInfo(n)==null?null:fnInfo.getParameterType(a.getString())!=null&&NodeUtil.getFunctionJSDocInfo(n)==null?null:fnInfo.getParameterType(a.getString()).isVarArgs()){
a.putBooleanProp(Node.IS_VAR_ARGS_PARAM,true);
}
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!a.isEmpty()&&!init.isVar()){
init=trySimplifyUnusedResult(init,false);
}
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(a.hasOneChild());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null&&NodeUtil.isFunctionDeclaration(a);a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
validateNonEmptyString(a);
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
validateMaximumChildCount(a,1);
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
if(a.hasChildren()){
validateExpression(a.getFirstChild());
}
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
validateNonEmptyString(a);
validateMaximumChildCount(a,1);
if(a.hasChildren()){
validateExpression(a.getFirstChild());
}

Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.add(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.replaceChild(a,a.getLastChild());
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=n.getParent().getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=n;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=n.getParent().getFirstChild();a!=n;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
result=trySimplifyUnusedResult(args.getFirstChild());
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.hasOneChild());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
annotate(IR.exprResult(n));
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.srcref(a);
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.replaceChild(a,a.getFirstChild().getNext());
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.replaceChild(a,a.getFirstChild().getNext());
reportCodeChange();

Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
NodeUtil.removeChild(args,a);
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.replaceChild(a,a.getFirstChild().getNext());
reportCodeChange();
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.replaceChild(a,a.getFirstChild().getNext());
Preconditions.checkState(a.isName());
NodeUtil.removeChild(args,a);
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
reportCodeChange();
Preconditions.checkState(a.isName());
NodeUtil.removeChild(args,a);
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.replaceChild(a,a.getFirstChild().getNext());
reportCodeChange();
Preconditions.checkState(a.isName());
NodeUtil.removeChild(args,a);
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
c=a.getNext();
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n=n.getNext();
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
add(args,Context.PRESERVE_BLOCK);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(a.isNew());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
createEdge(n,Branch.ON_TRUE,computeFallThrough(a));
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(args.isName());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
current=a.getParent();
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
if(args.getFirstChild().isGetterDef()||args.getFirstChild().isSetterDef()){
return false;
}
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(args.getParent().isAssign());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
p=a.getNext();
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
a=p.getNext();
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
newInitializer=n.getFirstChild();
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(NodeUtil.isControlStructureCodeBlock(n,n.getFirstChild()));
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(isUselessCase(n,(n==args.getFirstChild())?null:lastNonRemovable)){
removeCase(args,c);
return null;
}
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=n;a=a.getNext()){
Preconditions.checkState(a.isName());
next=a.getNext();
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.getFirstChild().getNext().getNext().addChildToFront(IR.exprResult(a));
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(NodeUtil.isFunctionExpression(a));
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.remove(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.getFirstChild().getString()!=null);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
if(NodeUtil.isFunctionDeclaration(a)){
n.addChildToFront(a);
}else {
n.addChildToBack(a);
}
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.replaceChild(a,n);
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(args.isString(),"Bad GETPROP: RHS should be STRING");
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
Preconditions.checkState(a.hasOneChild());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
jsDocParameter=a.getNext();
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
if(a.isFunction()){
continue;
}
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
if(PrototypeMemberDeclaration.extractDeclaration(a)==null){
break;
}
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
delta+=pattern.perMemberOverhead;
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
if(a.isFunction()){
continue;
}
if(PrototypeMemberDeclaration.extractDeclaration(a)==null){
break;
}
delta+=pattern.perMemberOverhead;

Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkNotNull(scope);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(a!=null);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n==null||a.hasChild(externsRoot));
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
a=child.getNext();
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.addChildToBack(IR.and(n,args.getFirstChild().detachFromParent()).srcref(cond));
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.addChildrenToBack(a.detachFromParent());
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.addChildToBack(IR.and(n,args.getFirstChild().detachFromParent()).srcref(cond));
n.addChildrenToBack(a.detachFromParent());
reportCodeChange();

Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.addChildrenToBack(a.detachFromParent());
reportCodeChange();
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(a.isName());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(isUnflowable(args.getVar(a.getString()))){
return ;
}
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(mayBeExpression(n));
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
addChildToBack(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(!NodeUtil.isObjectLitKey(a,n.getParent()));
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(isExpressionTreeUnsafe(a,state.sideEffects)){
state.sideEffects=true;
state.extractBeforeStatement=extractExpression(n,state.extractBeforeStatement);
}
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
if(PrototypeMemberDeclaration.extractDeclaration(a)==null){
continue;
}
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.mayHaveSideEffects(a.getNext())||NodeUtil.canBeSideEffected(rhs)){
return false;
}
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.addChildBefore(a,n);
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
reportCodeChange("FOR-IN var declaration");
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.addChildBefore(a,n);
reportCodeChange("FOR-IN var declaration");

Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(ARGUMENTS.substring(ARGUMENTS.indexOf(':')+1).indexOf(':')==-1);
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.put(ARGUMENTS.substring(0,ARGUMENTS.indexOf(':')),ARGUMENTS.substring(ARGUMENTS.indexOf(':')+1));
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(ARGUMENTS.substring(ARGUMENTS.indexOf(':')+1).indexOf(':')==-1);
args.put(ARGUMENTS.substring(0,ARGUMENTS.indexOf(':')),ARGUMENTS.substring(ARGUMENTS.indexOf(':')+1));

Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope=traverseChildren(n,scope);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!a.isString()){
return ;
}
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(!current.renameMap.containsKey(args.getFirstChild().getString()));
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
a=p.getNext();
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
p=a.getNext();
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.replaceChild(n,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),String.format("%s.superClass_.%s.call",a.getQualifiedName(),ARGUMENTS),callee,"goog.base"));
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument((a.isAnd())||(node.isOr()),"Expected: AND or OR, Got: %s",Token.name(node.getType()));
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.append(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n==null||previousCase.getNext()==n);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.report(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall()||callsite.isNew());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(a.isFunction());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateChildCount(n,1);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateObjectLiteralKeyName(n);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateFunctionExpression(args);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.replaceChild(n,n.getFirstChild());
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.replaceChild(n,IR.string(NodeUtil.getStringValue(a)+NodeUtil.getStringValue(n)));
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.replaceChild(n,n.getFirstChild());
args.replaceChild(n,IR.string(NodeUtil.getStringValue(a)+NodeUtil.getStringValue(n)));
reportCodeChange();

Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.replaceChild(n,n.getFirstChild());
reportCodeChange();
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
if(!a.isStringKey()){
throw new MalformedException("STRING_KEY node expected as OBJLIT key",a);
}
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
if(!isLowerCamelCaseWithNumericSuffixes(a.getString())){
throw new MalformedException("Placeholder name not in lowerCamelCase: "+a.getString(),a);
}
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
if(!a.isStringKey()){
throw new MalformedException("STRING_KEY node expected as OBJLIT key",a);
}
if(!isLowerCamelCaseWithNumericSuffixes(a.getString())){
throw new MalformedException("Placeholder name not in lowerCamelCase: "+a.getString(),a);
}

Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall(),"Expected: CALL, Got: %s",Token.name(node.getType()));
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null||n.isScript();a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.removeChild(n.getNext());
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.addChildToFront(n.getNext());
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
a.copyInformationFrom(n);
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.getParent().replaceChild(candidateDefinition,a);
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.setJSDocInfo(n.getJSDocInfo());
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
replacementNode=a;
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.removeChild(n.getNext());
n.addChildToFront(n.getNext());
a.copyInformationFrom(n);
n.getParent().replaceChild(candidateDefinition,a);
n.setJSDocInfo(n.getJSDocInfo());
replacementNode=a;

Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.removeChild(n.getNext());
n.addChildToFront(n.getNext());
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.removeChild(n.getNext());
a.copyInformationFrom(n);
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.removeChild(n.getNext());
n.setJSDocInfo(n.getJSDocInfo());
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.addChildToFront(n.getNext());
a.copyInformationFrom(n);
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.addChildToFront(n.getNext());
n.setJSDocInfo(n.getJSDocInfo());
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
a.copyInformationFrom(n);
n.setJSDocInfo(n.getJSDocInfo());
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.removeChild(n.getNext());
n.addChildToFront(n.getNext());
a.copyInformationFrom(n);
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.removeChild(n.getNext());
n.addChildToFront(n.getNext());
n.setJSDocInfo(n.getJSDocInfo());
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.removeChild(n.getNext());
a.copyInformationFrom(n);
n.setJSDocInfo(n.getJSDocInfo());
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.addChildToFront(n.getNext());
a.copyInformationFrom(n);
n.setJSDocInfo(n.getJSDocInfo());
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.removeChild(n.getNext());
n.addChildToFront(n.getNext());
a.copyInformationFrom(n);
n.setJSDocInfo(n.getJSDocInfo());
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
alternates=args.build();
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(args.isCall());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
a.putBooleanProp(Node.IS_NAMESPACE,true);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(isNamespacePlaceholder(a));
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setSourceInfo(a);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkArgument(args.isExprResult());
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
explicitNode=args;
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkArgument(args.isExprResult());
explicitNode=args;

Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
bodyNode=IR.block();
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(a.isCall());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
args.removeChild(n);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
insertAfter=a.getFirstChild().detachFromParent();
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkNotNull(a.getInputId());
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
NodeUtil.setDebugInformation(a.getFirstChild(),n,ARGUMENTS+".prototype");
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
args.replaceChild(n,a);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.put(n,scope);
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
args.reportCodeChange();
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n=paramName.getNext();
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n=n;
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(args.getChildCount()>=2);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(a==args);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(a.isObjectLit());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
addExpr(a,1,Context.OTHER);
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
lastWasEmpty=a.isEmpty();
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
addExpr(a,1,Context.OTHER);
lastWasEmpty=a.isEmpty();

Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(a.isTry());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
NodeUtil.removeChild(n,a);
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
args.remove(inputId);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.isGet(a)){
n=tryFoldKnownStringMethods(subtree);
}else {
subtree=tryFoldKnownNumericMethods(subtree);
}
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(args.isTypeOf());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
IR.comma(a.removeFirstChild(),n).checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
a=args.getConstructor();
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(a.isConstructor()||ctor.isInterface());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
NodeUtil.removeChild(a.getParent(),expressRoot);
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
scope.getVar(ARGUMENTS).markEscaped();
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
seenCatchOrFinally=true;
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
phRef=JsMessageVisitor.toLowerCamelCaseWithNumericSuffixes(args.getValue(PLACEHOLDER_NAME_ATT_NAME));
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
a=current.getNext();
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
args.push(a);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.replaceChild(n,a.getLastChild());
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(a.isScript()||collectionRoot.isBlock());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.getParent().addChildAfter(a.cloneTree(),after);
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(NodeUtil.isStatementBlock(a.getParent()));
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.putProp(Node.ORIGINALNAME_PROP,ARGUMENTS);
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
initializer=createExternObjectLit(a);
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n!=null);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
args.push(n);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
args.push(scope);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(args.getLifeCycleStage().isNormalized());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
defFinder=new SimpleDefinitionFinder(compiler);
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
process(n,n,a);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
mapping.end=new FilePosition(getCurrentLineIndex(),getCurrentCharIndex());
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.fine(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.getNativeType(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
a.isFromExterns()?Preconditions.checkState(a.isName()):null;
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
setString(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
changed=!p.newName.equals(ARGUMENTS);
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
inlineConstReturn(parent,a,n);
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
createName(a.getString());
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.detachFromParent();
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
ancestor=a.getParent();
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
nameNode=args.getFirstChild();
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
args.removeChildAfter(n);
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
insertAfter=addToFront(args,n,a);
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
args.removeChildAfter(n);
insertAfter=addToFront(args,n,a);

declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
if(getArrayElementStringValue(a)==null){
return null;
}
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.substring(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(isNamespacePlaceholder(n));
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setSourceInfo(n);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
IR.comma(a,n).checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n=trySimplifyUnusedResult(c);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
a.replaceChild(args,n);
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
a=args.getNext();
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(ARGUMENTS!=null);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(ARGUMENTS!=null);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.append(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(!ARGUMENTS.equals(ARGUMENTS));
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkArgument(a.isGetProp()||site.isName());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(args.isCall());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(a.isGetProp());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(args.isFunction());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.getScope().getRootNode().getLastChild().checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
a.setLineno(node.getFirstChild().getLineno());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
a.setCharno(node.getFirstChild().getCharno());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(args.getLastChild().isBlock(),"Node must be a block.");
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(n.getParent()==null);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkArgument(args.getLastChild().isBlock(),"Node must be a block.");
Preconditions.checkState(n.getParent()==null);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
processNode(args.getFirstChild(),new JsonML(TagType.InitPatt));
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
a.detachFromParent();
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
name=args.getString()+ARGUMENTS;
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
nameInfo.name=ARGUMENTS;
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
name=args.getString()+ARGUMENTS;
nameInfo.name=ARGUMENTS;

Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isFunction());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.appendChild(new JsonML(TagType.IdPatt));
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
a.setLength(a.getQualifiedName().length());
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
a.getLastChild().setSourceEncodedPosition(args.getSourcePosition()+a.getFirstChild().getQualifiedName().length());
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
a.getLastChild().setLength(current.getLastChild().getString().length());
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
a.setLength(a.getQualifiedName().length());
a.getLastChild().setSourceEncodedPosition(args.getSourcePosition()+a.getFirstChild().getQualifiedName().length());
a.getLastChild().setLength(current.getLastChild().getString().length());

Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
a.setLength(a.getQualifiedName().length());
a.getLastChild().setSourceEncodedPosition(args.getSourcePosition()+a.getFirstChild().getQualifiedName().length());
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
addChildrenToBack(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
hasVar=true;
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(!a.isVar()||declParent.hasOneChild(),"AST not normalized.");
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
a.detachFromParent();
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.addChildToFront(a);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(parent!=null,"Cannot find continue target.");
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(parent!=null,"Cannot find continue target.");
n=n;
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
insertExprResultState=false;
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
insertExprResultState=true;
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
insertExprResultState=false;
insertExprResultState=true;

Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
args.addChildToBack(a);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
args=child.getNext();
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
eliminateParamsAfter(n,a.getNext());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
eliminateParamsAfter(n,a.getNext());
a.detachFromParent();

declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
args.detachFromParent();
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(n.isExprResult());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
args.detachFromParent();
Preconditions.checkState(n.isExprResult());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
subtree=IR.block().srcref(n);
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(a.isString());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.copyNameAnnotations(ref.node.getLastChild(),n);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.addChildToFront(a);
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
state.out=branchedFlowThrough(args.getValue(),state.in);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
previous=n.removeFirstChild();
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeTraversal.traverse(compiler,n,new FindCandidateFunctions());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.setDesc(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
sourceName=NodeUtil.getSourceName(a);
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
args.addChildToBack(n);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.getParent().replaceChild(n,a);
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
declareArguments(n);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
replaceNode(a.getParent(),getPropNode,IR.getelem(a.getFirstChild(),IR.name(getArrayNotationNameFor(ARGUMENTS))));
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.getParent().replaceChild(n,IR.var(args).srcref(n));
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.addChildToFront(n);
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.getParent().replaceChild(n,IR.var(args).srcref(n));
args.addChildToFront(n);

Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.replaceChild(a,IR.exprResult(IR.assign(IR.getprop(IR.name("module"),IR.string("exports")),a.getFirstChild())).useSourceInfoFromForTree(n));
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
a.addChildToBack(n);
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.replaceChild(n,n.getLastChild());
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.replaceChild(n,IR.string(NodeUtil.getStringValue(n)+NodeUtil.getStringValue(a)));
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.replaceChild(n,n.getLastChild());
args.replaceChild(n,IR.string(NodeUtil.getStringValue(n)+NodeUtil.getStringValue(a)));
reportCodeChange();

Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.replaceChild(n,n.getLastChild());
reportCodeChange();
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.replaceChild(n,a);
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.replaceChild(n,a);
reportCodeChange();

Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.replaceChild(n,a);
reportCodeChange();
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkNotNull(scope.getSymbolForScope());
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
n.detachFromParent();
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
parent.replaceChild(n,n);
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.detachFromParent();
n.detachFromParent();
parent.replaceChild(n,n);
reportCodeChange();

Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
reportCodeChange();
Preconditions.checkState(a.isName());
n.detachFromParent();
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.replaceChild(n,n);
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.detachFromParent();
n.detachFromParent();
args.replaceChild(n,n);
reportCodeChange();

Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.replaceChild(n,n);
Preconditions.checkState(a.isName());
n.detachFromParent();
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.replaceChild(n,n);
reportCodeChange();
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.replaceChild(n,n);
reportCodeChange();
Preconditions.checkState(a.isName());
n.detachFromParent();
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.putProp(Node.ORIGINALNAME_PROP,n.getString());
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.removeChild(n.getLastChild());
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.replaceChild(n,NodeUtil.newExpr(new Node(a.getType(),a.removeFirstChild(),IR.hook(n,a.removeFirstChild(),n.getLastChild()).srcref(n)).srcref(thenOp)));
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.removeChild(n.getLastChild());
args.replaceChild(n,NodeUtil.newExpr(new Node(a.getType(),a.removeFirstChild(),IR.hook(n,a.removeFirstChild(),n.getLastChild()).srcref(n)).srcref(thenOp)));
reportCodeChange();

Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.removeChild(n.getLastChild());
reportCodeChange();
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.replaceChild(n,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),compiler.getCodingConvention().getGlobalObject()).srcrefTree(n));
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.replaceChild(a,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),n.getQualifiedName()+".").srcrefTree(a));
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.removeChild(a);
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
args.replaceChild(n,IR.getprop(n.getFirstChild(),a));
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.removeChild(a);
args.replaceChild(n,IR.getprop(n.getFirstChild(),a));

Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
compiler.reportCodeChange();
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
validateChildCount(n,1);
validateObjectLiteralKeyName(n);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateChildCount(n,1);
validateFunctionExpression(args);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateObjectLiteralKeyName(n);
validateFunctionExpression(args);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateChildCount(n,1);
validateObjectLiteralKeyName(n);
validateFunctionExpression(args);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.OR :

for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(c.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=lastNonRemovable.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=args;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
next=a.getNext();
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(args.getLastChild().hasChildren()||mayHaveSideEffects(args.getFirstChild())){
lastNonRemovable=args;
}
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isSwitch());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(n.isSwitch());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=args;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(args.isFunction());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(args.getFirstChild().getString().isEmpty());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
trueBlock=fnNameNode.getFirstChild().getNext();
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
falseBlock=a.getNext();
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
trueBlock=fnNameNode.getFirstChild().getNext();
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
falseBlock=a.getNext();
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
trueBlock=fnNameNode.getFirstChild().getNext();
falseBlock=a.getNext();
trueBlock=fnNameNode.getFirstChild().getNext();
falseBlock=a.getNext();

for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
trueBlock=fnNameNode.getFirstChild().getNext();
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
falseBlock=a.getNext();
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
trueBlock=fnNameNode.getFirstChild().getNext();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
falseBlock=a.getNext();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
trueBlock=fnNameNode.getFirstChild().getNext();
falseBlock=a.getNext();
trueBlock=fnNameNode.getFirstChild().getNext();
falseBlock=a.getNext();

Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild().getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
sourceName=getSourceName(n);
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
curNode=n;
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
traverseBranch(fnNameNode,n);
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
traverseBranch(body,n);
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
popScope();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
sourceName=getSourceName(n);
curNode=n;
traverseBranch(fnNameNode,n);
traverseBranch(body,n);
popScope();

if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getFirstChild().isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(parent.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isName());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
n.addChildToBack(args.detachFromParent());
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
redeclaration=true;
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
n.addChildToBack(args.detachFromParent());
redeclaration=true;

Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=key.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
key=a.getNext();
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=decl.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=pred.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(args.getFirstChild().isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(args.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(body.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(a==null){
return null;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isExprAssign(body)){
return null;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(args.isGetProp()&&lhs.getFirstChild().isThis()){
Node body.getFirstChild().getLastChild()=body.getFirstChild().getLastChild();
if(rhs.isName()&&rhs.getString().equals(a.getString())){
Node args.getLastChild()=lhs.getLastChild();
return propertyName;
}
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(callTarget.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(a!=null){
if(right.getNext()!=null||!NodeUtil.isImmutableValue(right)){
return n;
}
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnNameNode.isArrayLit()||!fnName.getString().equals("join")){
return n;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(a!=null&&right.isString()&&",".equals(right.getString())){
n.removeChild(right);
reportCodeChange();
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getElem.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getElemParent.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(a.isParamList());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
elseBody=null;
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
elseBody=null;
reportCodeChange();

if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
elseBody=null;
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
elseBody=null;
reportCodeChange();

Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isIf());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkNotNull(body);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!mayHaveSideEffects(fnNameNode)&&a!=null){
n.removeChild(elseBody);
n.replaceChild(thenBody,elseBody);
Node new Node(Token.NOT)=new Node(Token.NOT);
n.replaceChild(args,notCond);
notCond.addChildToFront(cond);
cond=notCond;
thenBody=cond.getNext();
elseBody=null;
reportCodeChange();
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.hasOneChild()){
Node body=n.removeFirstChild();
Node fnName=n.getParent();
Node fnNameNode=IR.exprResult(condition).srcref(n);
parent.replaceChild(n,replacement);
reportCodeChange();
return replacement;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(previousBlock.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(block.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=args.getFirstChild().getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=args.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(init.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isFor());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(NodeUtil.isForIn(n)){
return n;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!a.isEmpty()){
increment=trySimplifyUnusedResult(increment,false);
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.getFirstChild().isEmpty()){
return n;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.getImpureBooleanValue(fnNameNode)!=TernaryValue.FALSE){
return n;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.redeclareVarsInsideBranch(n);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!mayHaveSideEffects(fnNameNode)){
NodeUtil.removeChild(n.getParent(),n);
}else {
Node body=IR.exprResult(cond.detachFromParent()).copyInformationFrom(cond);
n.getParent().replaceChild(n,statement);
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isFor());
NodeUtil.redeclareVarsInsideBranch(n);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(fnNameNode.isIf());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isStatementBlock(body)){
return ;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkNotNull(args);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkNotNull(n);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(lhs.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnNameNode.isDeclared(args.getString(),false)){
return ;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(a!=null&&rhs.isName()&&rhs.getString().equals(var.name)&&n.isAssign()){
n.removeChild(rhs);
n.getParent().replaceChild(n,rhs);
compiler.reportCodeChange();
return ;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(child.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(name.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(value.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=parent.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=parent.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(isCandidateUsage(n)){
return ;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(a==null){
return ;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fnNameNode.isAssign()&&parent.getFirstChild()==n){
a.setInline(false);
}else {
fs.setRemove(false);
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isName());
if(parent.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fnIdentifingNode.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(key.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isHook());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.detachChildren();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(mayHaveSideEffects(n.getFirstChild())){
a=IR.comma(cond,body).srcref(n);
}else {
replacement=branchToKeep;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
args.replaceChild(n,a);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
reportCodeChange();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isHook());
Preconditions.checkNotNull(args);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isHook());
n.detachChildren();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkNotNull(args);
n.detachChildren();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isHook());
Preconditions.checkNotNull(args);
n.detachChildren();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextSibling.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=forNode.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
fnNameNode.replaceChild(body,a);
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
compiler.reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
fnNameNode.replaceChild(body,a);
compiler.reportCodeChange();

if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(NodeUtil.containsType(n,Token.IN)){
return ;
}
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
fnNameNode.replaceChild(body,a);
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
compiler.reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(NodeUtil.containsType(n,Token.IN)){
return ;
}
fnNameNode.replaceChild(body,a);
compiler.reportCodeChange();

Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(args.getFirstChild().isFunction()){
compiler.reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(args.getFirstChild().isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(NodeUtil.containsType(n,Token.IN)){
return ;
}
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(args.getFirstChild().isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
compiler.reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(args.isFunction()){
compiler.reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(args.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(NodeUtil.containsType(n,Token.IN)){
return ;
}
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(args.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
compiler.reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
compiler.reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(NodeUtil.containsType(n,Token.IN)){
return ;
}
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
compiler.reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
compiler.reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(NodeUtil.containsType(n,Token.IN)){
return ;
}
compiler.reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(args.getFirstChild().isFunction()){
compiler.reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(NodeUtil.containsType(n,Token.IN)){
return ;
}
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(args.getFirstChild().isFunction()){
compiler.reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
compiler.reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(args.getFirstChild().isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(NodeUtil.containsType(n,Token.IN)){
return ;
}
compiler.reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(args.isFunction()){
compiler.reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(NodeUtil.containsType(n,Token.IN)){
return ;
}
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(args.isFunction()){
compiler.reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
compiler.reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(args.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(NodeUtil.containsType(n,Token.IN)){
return ;
}
compiler.reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
compiler.reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(NodeUtil.containsType(n,Token.IN)){
return ;
}
compiler.reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(args.getFirstChild().isFunction()){
compiler.reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(NodeUtil.containsType(n,Token.IN)){
return ;
}
compiler.reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(args.isFunction()){
compiler.reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(NodeUtil.containsType(n,Token.IN)){
return ;
}
compiler.reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(rootNode.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=rootNode.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(rootNode.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=rootNode.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getParent().getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=n.getFirstChild().getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getParent().getNext();
 final Node body=args.getNext();
String fnName=n.getFirstChild().getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(n.isFunction());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(n.isFunction());
if(parent.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(propNameNode.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n==null||n==a){
return ;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(!NodeUtil.isObjectLitKey(n,n.getParent()));
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(node.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getChildCount()==4){
a=cur.getFirstChild().getNext().getNext();
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(c.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=c.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=c.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
if(!a.hasChildren()){
throw new IllegalStateException("Empty VAR node.");
}
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fnNameNode.getFirstChild().isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fnNameNode.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getParent().isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=a.getFirstChild().getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
fnNameNode.detachFromParent();
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
n.replaceChild(n,IR.function(IR.name("").srcref(n),IR.paramList().srcref(callTarget),a));
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
n.putBooleanProp(Node.FREE_CALL,true);
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
fnNameNode.detachFromParent();
n.replaceChild(n,IR.function(IR.name("").srcref(n),IR.paramList().srcref(callTarget),a));
n.putBooleanProp(Node.FREE_CALL,true);

Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getParent().isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
n.putBooleanProp(Node.FREE_CALL,true);
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
value=fnName.getLastChild();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(maybeInheritsExpr.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=maybeInheritsExpr.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(maybeInheritsExpr.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(a.getFirstChild().isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(a.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=maybeInheritsExpr.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=ast1.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
childOf1=a.getNext();
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
childOf2=body.getNext();
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
childOf1=a.getNext();
childOf2=body.getNext();

Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(objLitNode.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(aNode.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(body==null){
throw new MalformedException("Message string literal expected",stringLiteralNode);
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nameArg.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(a.getChildCount()!=4){
return ;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fnNameNode.getQualifiedName()==null){
return ;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
a.addSuppression("duplicate");
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
a.addSuppression("duplicate");
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(ARGUMENTS.isEmpty()){
Preconditions.checkState(n.isFunction());
Preconditions.checkState(NodeUtil.isFunctionExpression(parent));
return ;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(innerIf.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=innerIf.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(innerIf.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=innerIf.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(body==null&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
n.addChildToBack(IR.and(n,fnNameNode.detachFromParent()).srcref(cond));
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
n.addChildrenToBack(args.detachFromParent());
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
reportCodeChange();
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
return n;
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
n.addChildToBack(IR.and(n,fnNameNode.detachFromParent()).srcref(cond));
n.addChildrenToBack(args.detachFromParent());
reportCodeChange();
return n;

declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(body==null&&NodeUtil.isFunctionExpression(n)){
n.addChildrenToBack(args.detachFromParent());
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(args.getParent().isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getString().isEmpty()){
return ;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
fnNameNode.addSuppression("duplicate");
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
fnNameNode.addSuppression("duplicate");
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(ARGUMENTS.isEmpty()){
Preconditions.checkState(n.isFunction());
Preconditions.checkState(NodeUtil.isFunctionExpression(parent));
return ;
}
if(parent.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(target.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=target.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(target.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=target.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
parent.replaceChild(n,body);
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isExprAssign(n)){
return false;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
fnName.replaceChild(n,body);
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
fnName.replaceChild(n,body);
reportCodeChange();

if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
fnName.replaceChild(n,body);
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
fnName.replaceChild(n,body);
reportCodeChange();

Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fnNameNode=trySimplifyUnusedResult(left);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(gramps.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=gramps.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(gramps.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=gramps.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
args.replaceChild(n,fnNameNode);
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(keyNode.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=valueNode.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(objectType.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isNew());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(args.getString().equals("String")){
Node a=objectType.getNext();
String null=null;
if(value==null){
stringValue="";
}else {
if(!NodeUtil.isImmutableValue(value)){
return n;
}
stringValue=NodeUtil.getStringValue(value);
}
if(stringValue==null){
return n;
}
Node fnNameNode=n.getParent();
Node body=IR.string(stringValue);
parent.replaceChild(n,newString);
newString.copyInformationFrom(parent);
reportCodeChange();
return newString;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(current.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(NodeUtil.isAssignmentOp(n));
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(a.isName()){
return new Assign(n,current,body);
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=constructorNameNode.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nameNode.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fnName==null||qName.isEmpty()){
return ;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(a==null||var.isLocal()||var.isExtern()){
return ;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(c.isFunction()){
reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(arg1.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkArgument(fnNameNode.isString());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(TWEAK_FUNCTIONS_MAP.get(body)==null){
return ;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
if(arg1.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fnNameNode.isString());
if(arg1.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
Preconditions.checkArgument(fnNameNode.isString());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
Preconditions.checkArgument(fnNameNode.isString());
if(arg1.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(property.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(a.isNumber()){
ARGUMENTS=NodeUtil.getStringValue(property);
}else {
propertyName=property.getString();
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(args.isGetElem()){
fnNameNode.setQuotedString();
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fnNameNode.addChildToBack(body);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.detachFromParent();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.detachFromParent();
if(lhs.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope=traverse(args,scope);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fnNameNode.setJSType(null);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
c=args;
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
reportChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
c=args;
reportChange();

if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(!a.isEmpty()){
args.addChildrenToFront(a);
}else {
args.setWasEmptyNode(true);
}
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
c=args;
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
reportChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(!a.isEmpty()){
args.addChildrenToFront(a);
}else {
args.setWasEmptyNode(true);
}
c=args;
reportChange();

Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fnNameNode.isFunction());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fnNameNode!=null){
Node a=NodeUtil.getFunctionParameters(fnNode).getFirstChild();
for(Node body : fnName.getParameters()){
if(paramNode==null){
break;
}
new StringBuilder("/**\n").append(" * ");
appendAnnotation(sb,"param",getParameterNodeJSDocType(n));
sb.append(" ").append(paramNode.getString()).append("\n");
paramNode=paramNode.getNext();
}
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(args!=null&&!retType.isUnknownType()&&!retType.isEmptyType()){
new StringBuilder("/**\n").append(" * ");
appendAnnotation(sb,"return",retType.toAnnotationString());
sb.append("\n");
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getProp.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fnName==null){
return ;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!"goog.exportSymbol".equals(fnName)){
return ;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fnNameNode.isString()){
return ;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(body==null||a.getNext()!=null){
return ;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=args.getFirstChild().getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(sibling.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
processNode(a,new JsonML(TagType.TryStmt));
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
a=child.getNext();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(a!=null){
processNode(child,new JsonML(TagType.TryStmt));
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getFirstChild().getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(mayHaveSideEffects(args)){
return n;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.getParent().replaceChild(n,body);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
totalDelta+=instance.delta;
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
totalDelta+=instance.delta;
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(subclass.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(superclass.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(name1.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=name1.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(name1.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(maybeName2.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=name1.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=a.getLastChild().getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
fnNameNode.detachFromParent();
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
parent.replaceChild(n,fnNameNode);
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
fnNameNode.detachFromParent();
parent.replaceChild(n,fnNameNode);
reportCodeChange();

if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
parent.replaceChild(n,fnNameNode);
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
fnNameNode.detachFromParent();
parent.replaceChild(n,fnNameNode);
reportCodeChange();

Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
fnNameNode.detachFromParent();
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
fnNameNode.detachFromParent();
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
fnNameNode.detachFromParent();
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
fnNameNode.detachFromParent();
scanVars(body,n);
}else {
reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
fnNameNode.detachFromParent();
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
fnNameNode.detachFromParent();
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
fnNameNode.detachFromParent();
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
fnNameNode.detachFromParent();
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
fnNameNode.detachFromParent();
scanVars(body,n);
}else {
reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
fnNameNode.detachFromParent();
scanVars(body,n);
}else {
reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
fnNameNode.detachFromParent();
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
fnNameNode.detachFromParent();
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
fnNameNode.detachFromParent();
scanVars(body,n);
}else {
reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
fnNameNode.detachFromParent();
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isName()||n.isString());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(fnName!=null&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(fnName!=null&&fnName.isLocal()){
return ;
}
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=parent.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(fnName!=null&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(firstChild.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isFunction());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(JSType.toMaybeFunctionType(n.getJSType())==null){
return ;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(a.getChildCount()!=3){
return ;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(candidateDefinition.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=candidateDefinition.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(candidateDefinition.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=candidateDefinition.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(src.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(args.isGetProp()&&a.isAssign());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(!fnNameNode.isExtern());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(catchBlock.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(body!=null&&scope.contains(n)){
return ;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
compiler.reportCodeChange();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.detachChildren();
compiler.reportCodeChange();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
body.copyInformationFrom(fnNameNode);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(ancestor.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=ancestor.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(ancestor.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=ancestor.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(call.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(NodeUtil.isGet(n.getFirstChild()));
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
state.extractBeforeStatement=fnNameNode;
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(NodeUtil.isGet(body));
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
state.extractBeforeStatement=extractExpression(body.getFirstChild(),state.extractBeforeStatement);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.removeFirstChild();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkArgument(n.isCall());
Preconditions.checkArgument(NodeUtil.isGet(n.getFirstChild()));
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkArgument(n.isCall());
n.removeFirstChild();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkArgument(n.isCall());
args.replaceChild(n,a);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(NodeUtil.isGet(n.getFirstChild()));
n.removeFirstChild();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkArgument(NodeUtil.isGet(n.getFirstChild()));
args.replaceChild(n,a);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.removeFirstChild();
args.replaceChild(n,a);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
Preconditions.checkArgument(NodeUtil.isGet(n.getFirstChild()));
n.removeFirstChild();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkArgument(n.isCall());
Preconditions.checkArgument(NodeUtil.isGet(n.getFirstChild()));
args.replaceChild(n,a);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
n.removeFirstChild();
args.replaceChild(n,a);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(NodeUtil.isGet(n.getFirstChild()));
n.removeFirstChild();
args.replaceChild(n,a);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
Preconditions.checkArgument(NodeUtil.isGet(n.getFirstChild()));
n.removeFirstChild();
args.replaceChild(n,a);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(secondArg.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.getStringValue(a)==null){
return n;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
n.getParent().replaceChild(n,body);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
reportCodeChange();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fnNameNode.isString());
n.getParent().replaceChild(n,body);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fnNameNode.isString());
reportCodeChange();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.getParent().replaceChild(n,body);
reportCodeChange();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
Preconditions.checkArgument(fnNameNode.isString());
n.getParent().replaceChild(n,body);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
Preconditions.checkArgument(fnNameNode.isString());
reportCodeChange();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
n.getParent().replaceChild(n,body);
reportCodeChange();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fnNameNode.isString());
n.getParent().replaceChild(n,body);
reportCodeChange();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
Preconditions.checkArgument(fnNameNode.isString());
n.getParent().replaceChild(n,body);
reportCodeChange();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.report(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.report(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.report(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.report(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isDo());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(NodeUtil.isControlStructureCodeBlock(n,n.getFirstChild()));
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(mayHaveSideEffects(fnNameNode)){
Node body=IR.exprResult(cond.detachFromParent()).srcref(cond);
args.addChildAfter(condStatement,a);
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isDo());
if(NodeUtil.getImpureBooleanValue(fnNameNode)!=TernaryValue.FALSE){
return n;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isDo());
Preconditions.checkState(NodeUtil.isControlStructureCodeBlock(n,n.getFirstChild()));
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkArgument(n.isDo());
args.replaceChild(n,a);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isDo());
reportCodeChange();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.getImpureBooleanValue(fnNameNode)!=TernaryValue.FALSE){
return n;
}
Preconditions.checkState(NodeUtil.isControlStructureCodeBlock(n,n.getFirstChild()));
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.getImpureBooleanValue(fnNameNode)!=TernaryValue.FALSE){
return n;
}
args.replaceChild(n,a);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.getImpureBooleanValue(fnNameNode)!=TernaryValue.FALSE){
return n;
}
reportCodeChange();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(NodeUtil.isControlStructureCodeBlock(n,n.getFirstChild()));
args.replaceChild(n,a);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(NodeUtil.isControlStructureCodeBlock(n,n.getFirstChild()));
reportCodeChange();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
args.replaceChild(n,a);
reportCodeChange();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isDo());
if(NodeUtil.getImpureBooleanValue(fnNameNode)!=TernaryValue.FALSE){
return n;
}
Preconditions.checkState(NodeUtil.isControlStructureCodeBlock(n,n.getFirstChild()));
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isDo());
if(NodeUtil.getImpureBooleanValue(fnNameNode)!=TernaryValue.FALSE){
return n;
}
args.replaceChild(n,a);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isDo());
if(NodeUtil.getImpureBooleanValue(fnNameNode)!=TernaryValue.FALSE){
return n;
}
reportCodeChange();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isDo());
Preconditions.checkState(NodeUtil.isControlStructureCodeBlock(n,n.getFirstChild()));
args.replaceChild(n,a);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isDo());
Preconditions.checkState(NodeUtil.isControlStructureCodeBlock(n,n.getFirstChild()));
reportCodeChange();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isDo());
args.replaceChild(n,a);
reportCodeChange();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.getImpureBooleanValue(fnNameNode)!=TernaryValue.FALSE){
return n;
}
Preconditions.checkState(NodeUtil.isControlStructureCodeBlock(n,n.getFirstChild()));
args.replaceChild(n,a);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.getImpureBooleanValue(fnNameNode)!=TernaryValue.FALSE){
return n;
}
Preconditions.checkState(NodeUtil.isControlStructureCodeBlock(n,n.getFirstChild()));
reportCodeChange();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.getImpureBooleanValue(fnNameNode)!=TernaryValue.FALSE){
return n;
}
args.replaceChild(n,a);
reportCodeChange();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(NodeUtil.isControlStructureCodeBlock(n,n.getFirstChild()));
args.replaceChild(n,a);
reportCodeChange();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isDo());
if(NodeUtil.getImpureBooleanValue(fnNameNode)!=TernaryValue.FALSE){
return n;
}
Preconditions.checkState(NodeUtil.isControlStructureCodeBlock(n,n.getFirstChild()));
args.replaceChild(n,a);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isDo());
if(NodeUtil.getImpureBooleanValue(fnNameNode)!=TernaryValue.FALSE){
return n;
}
Preconditions.checkState(NodeUtil.isControlStructureCodeBlock(n,n.getFirstChild()));
reportCodeChange();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isDo());
if(NodeUtil.getImpureBooleanValue(fnNameNode)!=TernaryValue.FALSE){
return n;
}
args.replaceChild(n,a);
reportCodeChange();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isDo());
Preconditions.checkState(NodeUtil.isControlStructureCodeBlock(n,n.getFirstChild()));
args.replaceChild(n,a);
reportCodeChange();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.getImpureBooleanValue(fnNameNode)!=TernaryValue.FALSE){
return n;
}
Preconditions.checkState(NodeUtil.isControlStructureCodeBlock(n,n.getFirstChild()));
args.replaceChild(n,a);
reportCodeChange();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=thenOp.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
args.removeChild(args.getLastChild());
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
parent.replaceChild(n,NodeUtil.newExpr(new Node(a.getType(),fnNameNode,body).srcref(thenOp)));
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
args.removeChild(args.getLastChild());
parent.replaceChild(n,NodeUtil.newExpr(new Node(a.getType(),fnNameNode,body).srcref(thenOp)));
reportCodeChange();

if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
args.removeChild(args.getLastChild());
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
parent.replaceChild(n,NodeUtil.newExpr(new Node(a.getType(),fnNameNode,body).srcref(thenOp)));
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
args.removeChild(args.getLastChild());
parent.replaceChild(n,NodeUtil.newExpr(new Node(a.getType(),fnNameNode,body).srcref(thenOp)));
reportCodeChange();

Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(root.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(id.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parent.replaceChild(n,IR.string(null));
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(left.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=left.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(left.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=left.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.replaceChild(args,a);
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.replaceChild(n,IR.string(body));
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
reportCodeChange();
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
n.replaceChild(args,a);
n.replaceChild(n,IR.string(body));
reportCodeChange();

Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeList.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
a.replaceChild(n,body);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
reportCodeChange();
if(arg1.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
reportCodeChange();
if(arg1.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fnNameNode.isString());
reportCodeChange();
if(arg1.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
Preconditions.checkArgument(fnNameNode.isString());
reportCodeChange();
if(arg1.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isGetProp());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fnNameNode.isString()&&right.getString().equals("length")){
int -1=-1;
swtich (args.getType()){
case Token.ARRAYLIT :
if(mayHaveSideEffects(left)){
return n;
}
knownLength=left.getChildCount();
break;

case Token.STRING :
knownLength=left.getString().length();
break;

default :
return n;

}
Preconditions.checkState(knownLength!=-1);
Node body=IR.number(knownLength);
n.getParent().replaceChild(n,lengthNode);
reportCodeChange();
return lengthNode;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isGetProp());
if(left.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
if("jQuery.prototype".equals(args.getQualifiedName())){
targetVal=args.removeFirstChild();
}else {
targetVal=args.detachFromParent();
}
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if("jQuery.prototype".equals(args.getQualifiedName())){
targetVal=args.removeFirstChild();
}else {
targetVal=args.detachFromParent();
}
n.putBooleanProp(Node.FREE_CALL,true);

Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
a.replaceChild(n,body);
if(arg1.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
a.replaceChild(n,body);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fnNameNode.isString());
a.replaceChild(n,body);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
a.replaceChild(n,body);
reportCodeChange();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
a.replaceChild(n,body);
if(arg1.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fnNameNode.isString());
a.replaceChild(n,body);
if(arg1.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
a.replaceChild(n,body);
reportCodeChange();
if(arg1.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
Preconditions.checkArgument(fnNameNode.isString());
a.replaceChild(n,body);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
a.replaceChild(n,body);
reportCodeChange();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fnNameNode.isString());
a.replaceChild(n,body);
reportCodeChange();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
Preconditions.checkArgument(fnNameNode.isString());
a.replaceChild(n,body);
if(arg1.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
a.replaceChild(n,body);
reportCodeChange();
if(arg1.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fnNameNode.isString());
a.replaceChild(n,body);
reportCodeChange();
if(arg1.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
Preconditions.checkArgument(fnNameNode.isString());
a.replaceChild(n,body);
reportCodeChange();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=args.getLastChild().getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(fnNameNode.isCall()&&fnNameNode.getFirstChild()==args){
return false;
}
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=args.getLastChild().getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(lhsAssign.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(condition.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(right.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fnNameNode.isAssign());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(left.isFunction()){
reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(left.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(left.isFunction()){
reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(rhs.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=calledFn.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
parent.declare(ARGUMENTS,n,n.getJSType(),v.input);
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.add(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.add(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.add(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.add(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=n.getLastChild().getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
IR.comma(n.removeFirstChild(),a).checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
IR.comma(n.removeFirstChild(),info.value.cloneTree()).checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(cur.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(n.getString().isEmpty()){
return ;
}
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(breakTarget.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
updateAssignAllowedStack(n,false);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Joiner.on("\n").checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=n.getFirstChild().getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.report(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
args.putProp(Node.ORIGINALNAME_PROP,fnName);
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
args.putProp(Node.ORIGINALNAME_PROP,fnName);
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(firstArgument.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!EXTERN_OBJECT_PROPERTY_STRING.equals(fnNameNode.getQualifiedName())){
return ;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.replaceChild(args,a);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.replaceChild(n,body);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fnName.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
n.removeChild(body);
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
fnNameNode.copyInformationFrom(a);
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
args.replaceChild(a,NodeUtil.newExpr(fnNameNode));
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
n.removeChild(body);
fnNameNode.copyInformationFrom(a);
args.replaceChild(a,NodeUtil.newExpr(fnNameNode));

if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(arg2.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(value.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=value.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=value.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(NodeUtil.isHoistedFunctionDeclaration(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isHoistedFunctionDeclaration(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
a.removeChild(n);
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
args.replaceChild(body,n);
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
a.removeChild(n);
args.replaceChild(body,n);
compiler.reportCodeChange();

if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
a.removeChild(n);
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
args.replaceChild(body,n);
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(NodeUtil.isHoistedFunctionDeclaration(n)){
args.addChildToFront(n.detachFromParent());
}
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
a.removeChild(n);
args.replaceChild(body,n);
if(NodeUtil.isHoistedFunctionDeclaration(n)){
args.addChildToFront(n.detachFromParent());
}
compiler.reportCodeChange();

Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(value.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(NodeUtil.isHoistedFunctionDeclaration(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(value.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isHoistedFunctionDeclaration(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(value.isFunction()){
compiler.reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(value.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
compiler.reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
compiler.reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(NodeUtil.isHoistedFunctionDeclaration(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(NodeUtil.isHoistedFunctionDeclaration(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
compiler.reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
compiler.reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isHoistedFunctionDeclaration(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isHoistedFunctionDeclaration(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
compiler.reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(value.isFunction()){
compiler.reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(NodeUtil.isHoistedFunctionDeclaration(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(value.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(NodeUtil.isHoistedFunctionDeclaration(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
compiler.reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(value.isFunction()){
compiler.reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isHoistedFunctionDeclaration(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(value.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isHoistedFunctionDeclaration(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
compiler.reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(value.isFunction()){
compiler.reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
compiler.reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
compiler.reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(NodeUtil.isHoistedFunctionDeclaration(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
compiler.reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
compiler.reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isHoistedFunctionDeclaration(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
compiler.reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(value.isFunction()){
compiler.reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(NodeUtil.isHoistedFunctionDeclaration(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
compiler.reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(value.isFunction()){
compiler.reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isHoistedFunctionDeclaration(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
compiler.reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getLastChild().isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.getLastChild().isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=parent.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getLastChild().isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=n.getFirstChild().getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=parent.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=n.getFirstChild().getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getLastChild().isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=parent.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=n.getFirstChild().getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
parent.replaceChild(fnNameNode,body);
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
parent.replaceChild(fnNameNode,body);
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(args.contains(n))return ;
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fnNameNode.isIf())return ;
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n=n.getNext();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(false&&n.isVar()){
args.add(body);
scope.add(new Collapse(varNode,n,fnNameNode));
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=n.isGetProp()?fnNameNode.getString():"(missing)";
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
addChildToBack(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
add(":");
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
addExpr(a.getFirstChild(),1,Context.OTHER);
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
add(":");
addExpr(a.getFirstChild(),1,Context.OTHER);

Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
parent.detachFromParent();
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
maybeAddStringNodeToSymbolTable(fnNameNode);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
maybeAddStringNodeToSymbolTable(fnNameNode);
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
fnNameNode.copyInformationFromForTree(n);
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
body.copyInformationFromForTree(n);
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
current=body;
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
body.copyInformationFromForTree(n);
current=body;

if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(current.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
fnNameNode.copyInformationFromForTree(n);
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(current.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
body.copyInformationFromForTree(n);
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
fnNameNode.copyInformationFromForTree(n);
declareVar(a);
}
body.copyInformationFromForTree(n);
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(current.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
fnNameNode.copyInformationFromForTree(n);
declareVar(a);
}
body.copyInformationFromForTree(n);
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(child.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
reportCodeChange();
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(newParam.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
args.setOptionalArg(true);
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
args.setOptionalArg(true);
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fnName.isEmpty()||compiler.getCodingConvention().isExported(name)){
return ;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(a==null||!v.isGlobal()){
return ;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(next.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(rValue.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=rValue.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(rValue.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=rValue.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fnNameNode.isInstanceOf());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(fnNameNode.isName()){
var=scope.getVar(fnNameNode.getString());
}
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(objLitParent.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(def.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=def.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(def.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=def.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
n.detachFromParent();
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
args.detachFromParent();
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
n.detachFromParent();
args.detachFromParent();

Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
n.detachFromParent();
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
args.detachFromParent();
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
n.detachFromParent();
n.detachFromParent();
args.detachFromParent();

Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
n.detachFromParent();
args.detachFromParent();

Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
args.detachFromParent();
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
n.detachFromParent();
n.detachFromParent();
args.detachFromParent();

Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
args.detachFromParent();
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(cArg.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=subtree.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if((a!=null)&&(a.isString()||a.isNumber())){
if(fnNameNode.equals("parseInt")||fnNameNode.equals("parseFloat")){
subtree=tryFoldParseNumber(body,fnNameNode,a);
}
}
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(toRemove.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
compiler.addToDebugLog("Unreferenced var: "+var.name);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isVar()||toRemove.isFunction(),"We should only declare vars and functions and function args");
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
parent.replaceChild(n,IR.exprResult(IR.assign(IR.getprop(IR.name("module"),IR.string("exports")),body)).useSourceInfoFromForTree(n));
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
parent.replaceChild(n,IR.exprResult(IR.assign(IR.getprop(IR.name("module"),IR.string("exports")),body)).useSourceInfoFromForTree(n));
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(p.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
if(a==null||a.toObjectType()==null){
return ;
}
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
body=traverseChildren(fnNameNode,scope);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(maybeAssign.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
maybeAssign=a.getParent();
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(body!=null){
args.replaceChild(fn,IR.string("prototype"));
compiler.reportCodeChange();
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(dest.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=fnNameNode.getFirstChild().getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=fnNameNode.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
if(fnName==null?null:objType.getIndexType()!=null&&!fnName==null?null:objType.getIndexType().isUnknownType()){
JSType fnNameNode.getGreatestSubtype(fnName==null?null:objType.getIndexType())=fnNameNode.getGreatestSubtype(fnName==null?null:objType.getIndexType());
if(!fnNameNode.getGreatestSubtype(fnName==null?null:objType.getIndexType()).isEmptyType()){
iterKeyType=fnNameNode.getGreatestSubtype(fnName==null?null:objType.getIndexType());
}
}
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(a==scope.getRootNode())return ;
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(thenBranch.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
args.replaceChild(n,a);
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
a.addChildToBack(n);
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
args.replaceChild(n,a);
a.addChildToBack(n);
reportCodeChange();

if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(callTarget.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=callTarget.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=callTarget.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
tryDefineLexicalQualifiedNameRef(n.getQualifiedName(),n);
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
n.removeChild(fnNameNode);
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
n.addChildToFront(IR.var(args));
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
n.addChildToBack(body);
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
scope.reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
n.removeChild(fnNameNode);
n.addChildToFront(IR.var(args));
n.addChildToBack(body);
scope.reportCodeChange();

if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
n.removeChild(fnNameNode);
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
n.addChildToFront(IR.var(args));
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
n.addChildToBack(body);
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
scope.reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
n.removeChild(fnNameNode);
n.addChildToFront(IR.var(args));
n.addChildToBack(body);
scope.reportCodeChange();

Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
parent=args.getFirstChild().getQualifiedName();
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
this.reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
this.reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(callee.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=callee.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(callee.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=callee.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(callbackFunction.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
a=fnName.getChildAtIndex(1);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeTraversal.traverse(compiler,NodeUtil.getFunctionBody(fnNameNode),new FindCallbackArgumentReferences(callbackFunction,Lists.newArrayList(),body,a.isArrayLit()));
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkArgument(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkArgument(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkArgument(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkArgument(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(cond.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&isLowerPrecedenceInExpression(args.getFirstChild(),OR_PRECEDENCE)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(isLowerPrecedenceInExpression(n,OR_PRECEDENCE)&&isLowerPrecedenceInExpression(args.getFirstChild(),OR_PRECEDENCE)){
return n;
}
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(isLowerPrecedenceInExpression(n,OR_PRECEDENCE)&&isLowerPrecedenceInExpression(args.getFirstChild(),OR_PRECEDENCE)){
return n;
}
reportCodeChange();

Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
fnNameNode.copyInformationFrom(n);
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
args.getParent().addChildAfter(fnNameNode,parent);
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
fnNameNode.copyInformationFrom(n);
args.getParent().addChildAfter(fnNameNode,parent);
reportCodeChange();

if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent.isFunction()){
reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(args.getParent().isFunction()){
reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(args.isFunction()){
reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(condition.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=condition.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=condition.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(a.isName()){
Node args=a.getParent();
if(args.isVar()&&args.hasOneChild()){
hasAnnotation=true;
}
fnNameNode.add(a);
}else if(a.isAssign()){
if(hasNoSideEffectsAnnotation(a)){
hasAnnotation=true;
}
fnNameNode.add(a.getFirstChild());
}
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(hasNoSideEffectsAnnotation(n)){
scope.addAll(fnNameNode);
}
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(a.isName()){
Node args=a.getParent();
if(args.isVar()&&args.hasOneChild()){
hasAnnotation=true;
}
fnNameNode.add(a);
}else if(a.isAssign()){
if(hasNoSideEffectsAnnotation(a)){
hasAnnotation=true;
}
fnNameNode.add(a.getFirstChild());
}
if(hasNoSideEffectsAnnotation(n)){
scope.addAll(fnNameNode);
}

Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(node.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=parent.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
args.putProp(Node.ORIGINALNAME_PROP,args.getString());
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
if(ARGUMENTS.equals(args.getString())){
return ;
}
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(fnName!=null&&NodeUtil.isFunctionExpression(n)){
args.putProp(Node.ORIGINALNAME_PROP,args.getString());
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
Preconditions.checkState(args!=null);
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
args.remove();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
Preconditions.checkState(args!=null);
args.remove();
compiler.reportCodeChange();

if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
Preconditions.checkState(args!=null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
args.remove();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(args!=null);
args.remove();
compiler.reportCodeChange();

Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
compiler.reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
Preconditions.checkState(args!=null);
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
Preconditions.checkState(args!=null);
scanVars(body,n);
}else {
compiler.reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
compiler.reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
Preconditions.checkState(args!=null);
scanVars(body,n);
}else {
compiler.reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
NodeUtil.copyNameAnnotations(n.getLastChild(),fnNameNode);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(body!=null){
fnNameNode.setJSType(type);
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
args.replaceChild(n,fnNameNode);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
compiler.reportCodeChange();
if(parent.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(firstArg.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getString().length()>0&&(fnName==null||var.isExtern())&&!scope.equals(name)&&!SPECIAL_EXTERNS.contains(name)){
parent.replaceChild(n,IR.getprop(IR.name(WINDOW),IR.string(name)).srcrefTree(n));
compiler.reportCodeChange();
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
fnNameNode.removeChild(n);
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
parent.replaceChild(fnNameNode,IR.getprop(body,n));
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
fnNameNode.removeChild(n);
parent.replaceChild(fnNameNode,IR.getprop(body,n));

if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
fnNameNode.removeChild(n);
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
parent.replaceChild(fnNameNode,IR.getprop(body,n));
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
fnNameNode.removeChild(n);
parent.replaceChild(fnNameNode,IR.getprop(body,n));

Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fnNameNode.isGetElem());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isNot()){
if(isLowerPrecedenceInExpression(cond,OR_PRECEDENCE)&&isLowerPrecedenceInExpression(args.getFirstChild(),OR_PRECEDENCE)){
return n;
}
Node body=IR.or(cond.removeFirstChild(),expr.removeFirstChild()).srcref(n);
Node a=NodeUtil.newExpr(or);
fnNameNode.replaceChild(n,newExpr);
reportCodeChange();
return newExpr;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(isLowerPrecedenceInExpression(n,AND_PRECEDENCE)&&isLowerPrecedenceInExpression(args.getFirstChild(),AND_PRECEDENCE)){
return n;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.removeChild(n);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fnNameNode.replaceChild(n,a);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.removeChild(n);
reportCodeChange();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(anonymousFnNode.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(fnName!=a&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=curParam.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
IR.string(NodeUtil.getStringValue(a)).checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=replacementTemplate.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fnNameNode.isName());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
assertDefinitionNode(n,Token.VAR);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
backwardsInferenceFromCallSite(n,fnNameNode);
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope=traverseChildren(n,scope);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope=tightenTypesAfterAssertions(scope,n);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(a==null){
actualReturnType=getNativeType(VOID_TYPE);
valueNode=n;
}else {
actualReturnType=getJSType(a);
}
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(args.getString().length()==0){
return ;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!okToRenameVar(args.getString(),(a!=null)&&var.isLocal())){
if(local){
String fnName=MakeDeclaredNamesUnique.ContextualRenameInverter.getOrginalName(name);
if(!newName.equals(name)){
args.setString(newName);
}
}
return ;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
fnNameNode.copyInformationFrom(a);
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(current.isFunction()){
fnNameNode.copyInformationFrom(a);
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent.isFunction()){
fnNameNode.copyInformationFrom(a);
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
staleInputs=true;
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
staleInputs=true;
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(rhsValue.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(args.getQualifiedName()!=null&&fnName!=null);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
n.setJSType(body);
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(args.isName());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(member.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(node.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=node.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=node.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
validateVar(n);
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(canReplaceWithSetProp(fnNameNode,n,body)){
String fnNameNode.getString()=fnNameNode.getString();
scope.add(n);
}
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(foldedStringNode.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n=n.getNext();
if(key.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.add(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
current.renameMap.put(n.getFirstChild().getString(),body);
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
compiler.addToDebugLog("label renamed: "+n.getFirstChild().getString());
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
current.renameMap.put(n.getFirstChild().getString(),body);
compiler.addToDebugLog("label renamed: "+n.getFirstChild().getString());

if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
current.renameMap.put(n.getFirstChild().getString(),body);
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
compiler.addToDebugLog("label renamed: "+n.getFirstChild().getString());
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
current.renameMap.put(n.getFirstChild().getString(),body);
compiler.addToDebugLog("label renamed: "+n.getFirstChild().getString());

Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(node.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=args.getFirstChild().getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(node.isFunction()){
compiler.addToDebugLog("label renamed: "+n.getFirstChild().getString());
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(node.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
compiler.addToDebugLog("label renamed: "+n.getFirstChild().getString());
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
compiler.addToDebugLog("label renamed: "+n.getFirstChild().getString());
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=args.getFirstChild().getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=args.getFirstChild().getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
compiler.addToDebugLog("label renamed: "+n.getFirstChild().getString());
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
compiler.addToDebugLog("label renamed: "+n.getFirstChild().getString());
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
compiler.addToDebugLog("label renamed: "+n.getFirstChild().getString());
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(node.isFunction()){
compiler.addToDebugLog("label renamed: "+n.getFirstChild().getString());
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=args.getFirstChild().getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(node.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=args.getFirstChild().getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
compiler.addToDebugLog("label renamed: "+n.getFirstChild().getString());
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(node.isFunction()){
compiler.addToDebugLog("label renamed: "+n.getFirstChild().getString());
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
compiler.addToDebugLog("label renamed: "+n.getFirstChild().getString());
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
compiler.addToDebugLog("label renamed: "+n.getFirstChild().getString());
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=args.getFirstChild().getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
compiler.addToDebugLog("label renamed: "+n.getFirstChild().getString());
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(node.isFunction()){
compiler.addToDebugLog("label renamed: "+n.getFirstChild().getString());
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=args.getFirstChild().getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
compiler.addToDebugLog("label renamed: "+n.getFirstChild().getString());
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
n.addChildAfter(a,fnNameNode);
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
n.addChildAfter(a,fnNameNode);
reportCodeChange();

if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
n.addChildAfter(a,fnNameNode);
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
n.addChildAfter(a,fnNameNode);
reportCodeChange();

Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(right.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=right.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=right.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
a.replaceChild(args,body);
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
a.replaceChild(n,IR.string(fnName));
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
a.replaceChild(args,body);
a.replaceChild(n,IR.string(fnName));
reportCodeChange();

Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(right.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
a.replaceChild(args,body);
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(right.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
reportCodeChange();
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
a.replaceChild(args,body);
reportCodeChange();
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(right.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
a.replaceChild(args,body);
reportCodeChange();
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.pushContainingFunction(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.pushContainingFunction(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isPrototypeProperty(n.getFirstChild())){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.pushContainingFunction(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.pushContainingFunction(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=parent.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isPrototypeProperty(n.getFirstChild())){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fncBlock.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(newNode.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(left.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
reportCodeChange();
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
fnNameNode.copyInformationFrom(args);
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
reportCodeChange("FOR initializer");
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
fnNameNode.copyInformationFrom(args);
reportCodeChange("FOR initializer");

if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
fnNameNode.copyInformationFrom(args);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
reportCodeChange("FOR initializer");
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
fnNameNode.copyInformationFrom(args);
reportCodeChange("FOR initializer");

Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(args.getFirstChild().isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=c.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(args.getFirstChild().isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
fnNameNode.copyInformationFrom(args);
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(args.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=c.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(args.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
fnNameNode.copyInformationFrom(args);
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=c.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
fnNameNode.copyInformationFrom(args);
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(args.getFirstChild().isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=c.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
fnNameNode.copyInformationFrom(args);
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(args.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=c.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
fnNameNode.copyInformationFrom(args);
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(fnName==null){
break;
}
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(fnName.restrictByNotNullOrUndefined().toMaybeFunctionType()==null){
break;
}
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(fnName==null){
break;
}
if(fnName.restrictByNotNullOrUndefined().toMaybeFunctionType()==null){
break;
}

Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(newChild.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fnNameNode!=null);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(scope.getRootNode().getFirstChild().getNext().getChildCount()==2){
args.markAllParametersEscaped();
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
args.analyze();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fnName.color();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.POS :

if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(paramNode.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(param.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(destBlock.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(body!=null){
fnNameNode.addChildToBack(returnRhs);
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
args.addChildToFront(fnNameNode);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope.reportCodeChange();
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(name2.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(maybeName1.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=thenAssign.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isReferenceName(n)){
return ;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(args==null){
return ;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(args.getScope().isGlobal()){
return ;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope.put(args,n);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
add(n,Context.STATEMENT);
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
args.maybeLineBreak();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
add(n,Context.STATEMENT);
args.maybeLineBreak();

if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
add(")");
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
fnNameNode.replaceChild(n,body);
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
fnNameNode.replaceChild(n,body);
reportCodeChange();

if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fnNameNode.size()>0){
Node body=joinOnComma(commas,n);
args.addChildBefore(comma,n);
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
args.removeChild(n);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
checkedClass.hasInstanceOfReference=true;
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
checkedClass.hasInstanceOfReference=true;
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(body<0){
return ;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(valueToExport.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
initializer=createExternObjectLit(n);
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(a==null){
info=body.getJSDocInfo();
}
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(first.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
n.removeChild(args);
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
parent.replaceChild(n,args);
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
n.removeChild(args);
parent.replaceChild(n,args);

if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(sibling.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=sibling.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=sibling.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.setDesc(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.setIsHidden(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(leftParent.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(rightParent.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if((isLowerPrecedence(n,NOT_PRECEDENCE)&&isHigherPrecedence(leftParent,body))&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isNot()){
a=leftParent.removeFirstChild();
}else {
leftParent.detachFromParent();
left=IR.not(leftParent).srcref(leftParent);
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
swtich (n.getType()){
case Token.EXPR_RESULT :

case Token.FUNCTION :

case Token.VAR :
break;

case Token.ASSIGN :
Preconditions.checkArgument(args.isFor(),"Unsupported assignment in replaceWithRhs. parent: %s",Token.name(parent.getType()));
break;

default :
throw new IllegalArgumentException("Unsupported node type in replaceWithRhs "+Token.name(n.getType()));

}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.add(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fnNameNode.isGetElem());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isArrayLit()){
return tryFoldArrayAccess(fnNameNode,left,body);
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
foundTemplateTypeOfThisParameter=true;
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
foundTemplateTypeOfThisParameter=true;
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
staleInputs=true;
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
staleInputs=true;
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isObjectLit());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(n.isObjectLit());
if(value.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(maybeBreak.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=maybeIf.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(n.isEmpty()){
n.replaceChild(n,IR.not(body).srcref(ifCondition));
}else {
Node args=new Node(Token.AND);
n.replaceChild(n,args);
args.addChildToBack(n);
args.addChildToBack(IR.not(body).srcref(ifCondition));
}
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(n.isEmpty()){
n.replaceChild(n,IR.not(body).srcref(ifCondition));
}else {
Node args=new Node(Token.AND);
n.replaceChild(n,args);
args.addChildToBack(n);
args.addChildToBack(IR.not(body).srcref(ifCondition));
}
reportCodeChange();

Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(origParent.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
maybeAddStringNodeToSymbolTable(n);
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
maybeAddStringNodeToSymbolTable(n);
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=block.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fnNameNode.isBlock());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.SHEQ :

if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.LT :

if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
foundTemplateType=true;
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
foundTemplateType=true;
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&isInThrowExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if("undefined".equals(n.getString())){
return ;
}
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(parent.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if("undefined".equals(n.getString())){
return ;
}
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
if(args.isFunctionPrototypeType()){
FunctionType fnName=args.toObjectType().getOwnerFunction();
if(fnName.isInterface()){
return true;
}
}
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(a==null||body==null){
return scope;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n==null){
return scope;
}
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(varNode.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
NodeUtil.removeChild(body,fnNameNode);
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
NodeUtil.removeChild(body,fnNameNode);
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fnNameNode.removeChild(args.getNode());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
ref.node=null;
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(!n.hasChildren()){
args.removeChild(n);
}
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
ref.node=null;
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(!n.hasChildren()){
args.removeChild(n);
}
ref.node=null;

Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(rvalue.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.copyNameAnnotations(ref.node.getLastChild(),fnNameNode);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
body=addMarker(a,nodeToInsertAfter,null);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Iterables.addAll(Sets.newTreeSet(ALPHA),a.getAllImplementedInterfaces());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(map.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkNoTypeCheckSection(fnNameNode,true);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(targetExpression.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(args.isCall()||callsite.isNew());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(useParent.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=useParent.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(useParent.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=useParent.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(arg.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
notifyOfRemoval(n);
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
Preconditions.checkState(!args.isVar()||declParent.hasOneChild(),"AST not normalized.");
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
Preconditions.checkState(!args.isVar()||declParent.hasOneChild(),"AST not normalized.");
args.detachFromParent();
compiler.reportCodeChange();

if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
Preconditions.checkState(!args.isVar()||declParent.hasOneChild(),"AST not normalized.");
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
args.detachFromParent();
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(!args.isVar()||declParent.hasOneChild(),"AST not normalized.");
args.detachFromParent();
compiler.reportCodeChange();

Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
compiler.reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
args.detachFromParent();
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
args.detachFromParent();
scanVars(body,n);
}else {
compiler.reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.isFunction()){
compiler.reportCodeChange();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
args.detachFromParent();
scanVars(body,n);
}else {
compiler.reportCodeChange();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(subtree.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
if(!"".equals(fnNameNode)){
n.getLastChild().setString(fnNameNode);
}else if(n.getChildCount()==2){
n.getLastChild().detachFromParent();
}
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
if(!"".equals(fnNameNode)){
n.getLastChild().setString(fnNameNode);
}else if(n.getChildCount()==2){
n.getLastChild().detachFromParent();
}
reportCodeChange();

declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=n.getFirstChild().getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
reportCodeChange();
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(bodyNode.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
bodyNode=IR.block();
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
bodyNode=IR.block();
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(callback.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeTraversal.traverse(compiler,body,new DefineCallbackReturnCallback());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
IR.block().checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
IR.block().checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
fnName.addChildToFront(IR.exprResult(n).srcref(cond));
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
cond=body;
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
fnName.addChildToFront(IR.exprResult(n).srcref(cond));
reportCodeChange();
cond=body;

if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
fnName.addChildToFront(IR.exprResult(n).srcref(cond));
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
cond=body;
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
fnName.addChildToFront(IR.exprResult(n).srcref(cond));
reportCodeChange();
cond=body;

Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case REGISTER_NUMBER :

if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case OVERRIDE_DEFAULT_VALUE :

if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(varName.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
n.addChildBefore(fnNameNode,n);
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
reportCodeChange("FOR-IN var declaration");
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
n.addChildBefore(fnNameNode,n);
reportCodeChange("FOR-IN var declaration");

if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
n.addChildBefore(fnNameNode,n);
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
reportCodeChange("FOR-IN var declaration");
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
n.addChildBefore(fnNameNode,n);
reportCodeChange("FOR-IN var declaration");

Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(first.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=fnNameNode.getFirstChild().getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(first.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=fnNameNode.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fnNameNode.isCall());
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
if(fnName.isSimpleAssignmentToName()){
return true;
}
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(second.isFunction()){
if(inputId==null){
inputId=NodeUtil.getInputId(n);
}
 final Node fnNameNode=n.getFirstChild();
 final Node args=fnNameNode.getNext();
 final Node body=args.getNext();
String fnName=fnNameNode.getString();
if(!fnName.isEmpty()&&NodeUtil.isFunctionExpression(n)){
declareVar(fnNameNode);
}
Preconditions.checkState(args.isParamList());
for(Node a=args.getFirstChild();a!=null;a=a.getNext()){
Preconditions.checkState(a.isName());
declareVar(a);
}
scanVars(body,n);
}else {
Preconditions.checkState(scope.getParent()==null);
scanVars(n,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
Timeout!
