java version "1.7.0_231"
OpenJDK Runtime Environment (rhel-2.6.19.1.el7_6-x86_64 u231-b01)
OpenJDK 64-Bit Server VM (build 24.231-b01, mixed mode)
Check out 2e904fcd to /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j/ OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Run post-checkout hook..................................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 2e904fcd:372eb11e..................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Closure-25b..................................... OK
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 1
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
/home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5
PURIFY IS TRUE
=================================================
Project : closure_25	start : 19/10/29 07:18

Field type inconsistancy 'THIS' with types : Token and int
Variable type inconsistancy of 'start' in method 'parseRegExp,String,String' with types : int and char
Variable type inconsistancy of 'end' in method 'parseRegExp,String,String' with types : int and char
Field type inconsistancy 'type' with types : Type and JSType
Variable type inconsistancy of 'name' in method 'visit,NodeTraversal,Node,Node' with types : String and Name
Field type inconsistancy 'errors' with types : JSError[] and List<JSError>
Field type inconsistancy 'SUPER' with types : FunctionInjector.Reference and SimpleReference<SimpleSlot>
readFailedTest: path is /mnt/nfs/work1/brun/mmotwani/SimFix/d4j-info/failed_tests/closure/25.txtTESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Running ant (compile.tests)................................................ 
IN COMMENT TEST CASE: com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew

# FAILING TESTS: 1
TIMEOUT : 18000000
===========
locations= [<com.google.javascript.rhino.jstype.JSTypeRegistry,1629>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1630>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1647>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2149>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2153>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2154>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2156>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2160>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2161>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2162>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2163>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1314>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1456>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1617>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1620>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1621>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1625>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1626>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1628>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1633>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1638>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1643>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1645>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1655>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1622>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1664>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1737>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1738>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2084>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2085>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2087>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2091>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2092>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2096>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2098>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2099>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2106>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2109>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2111>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2115>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2117>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2118>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2119>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2130>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2137>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2139>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2143>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2144>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2171>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2173>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2174>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,57>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,53>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,55>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,58>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,59>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,71>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,72>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,75>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,76>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,85>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,89>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,96>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,97>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,98>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,99>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,102>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,106>, <com.google.javascript.rhino.jstype.RecordType,79>, <com.google.javascript.rhino.jstype.RecordType,67>, <com.google.javascript.rhino.jstype.RecordType,68>, <com.google.javascript.rhino.jstype.RecordType,80>, <com.google.javascript.rhino.jstype.RecordType,82>, <com.google.javascript.rhino.jstype.RecordType,83>, <com.google.javascript.rhino.jstype.RecordType,84>, <com.google.javascript.rhino.jstype.RecordType,88>, <com.google.javascript.rhino.jstype.RecordType,89>, <com.google.javascript.rhino.jstype.RecordType,92>, <com.google.javascript.rhino.jstype.RecordType,93>, <com.google.javascript.rhino.jstype.RecordType,122>, <com.google.javascript.rhino.jstype.RecordType,128>, <com.google.javascript.rhino.jstype.RecordType,132>, <com.google.javascript.rhino.jstype.RecordType,133>, <com.google.javascript.rhino.jstype.RecordType,136>, <com.google.javascript.rhino.jstype.RecordType,272>, <com.google.javascript.rhino.jstype.RecordType,273>, <com.google.javascript.rhino.jstype.RecordType,274>, <com.google.javascript.rhino.jstype.RecordType,275>, <com.google.javascript.rhino.jstype.RecordType,278>, <com.google.javascript.rhino.jstype.RecordType,279>, <com.google.javascript.rhino.jstype.PrototypeObjectType,356>, <com.google.javascript.rhino.jstype.PrototypeObjectType,358>, <com.google.javascript.rhino.jstype.PrototypeObjectType,361>, <com.google.javascript.rhino.jstype.PrototypeObjectType,362>, <com.google.javascript.rhino.jstype.PrototypeObjectType,363>, <com.google.javascript.rhino.jstype.PrototypeObjectType,366>, <com.google.javascript.rhino.jstype.PrototypeObjectType,365>, <com.google.javascript.rhino.jstype.PrototypeObjectType,369>, <com.google.javascript.rhino.jstype.PrototypeObjectType,370>, <com.google.javascript.rhino.jstype.PrototypeObjectType,372>, <com.google.javascript.rhino.jstype.PrototypeObjectType,373>, <com.google.javascript.rhino.jstype.PrototypeObjectType,389>, <com.google.javascript.rhino.jstype.PrototypeObjectType,391>, <com.google.javascript.rhino.jstype.PrototypeObjectType,392>, <com.google.javascript.jscomp.TypedScopeCreator,1982>, <com.google.javascript.jscomp.TypedScopeCreator,1983>, <com.google.javascript.jscomp.TypeInference,1060>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1740>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1741>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1991>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2030>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2031>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2034>, <com.google.javascript.jscomp.TypedScopeCreator,1978>, <com.google.javascript.jscomp.TypedScopeCreator,1979>, <com.google.javascript.jscomp.TypedScopeCreator,1980>, <com.google.javascript.jscomp.TypedScopeCreator,1981>, <com.google.javascript.jscomp.DataFlowAnalysis,504>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2007>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2008>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2009>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2012>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2013>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2017>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2018>, <com.google.javascript.jscomp.ClosureCodingConvention,322>, <com.google.javascript.jscomp.ClosureCodingConvention,327>, <com.google.javascript.rhino.jstype.PrototypeObjectType,354>, <com.google.javascript.jscomp.NodeUtil,2025>, <com.google.javascript.jscomp.NodeUtil,2027>, <com.google.javascript.jscomp.NodeUtil,2028>, <com.google.javascript.jscomp.TypedScopeCreator,1977>, <com.google.javascript.jscomp.TypedScopeCreator,1987>, <com.google.javascript.jscomp.TypedScopeCreator,2000>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1748>, <com.google.javascript.jscomp.NodeUtil,3058>, <com.google.javascript.jscomp.parsing.JsDocTokenStream,135>, <com.google.javascript.jscomp.parsing.JsDocTokenStream,136>, <com.google.javascript.rhino.Node,2221>, <com.google.javascript.rhino.Node,2281>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1491>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1492>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1494>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1493>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1497>, <com.google.javascript.jscomp.NodeUtil,3052>, <com.google.javascript.rhino.jstype.PrototypeObjectType,179>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1999>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2000>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2004>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2006>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2020>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2021>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2025>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2027>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2029>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2036>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2275>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2276>, <com.google.javascript.jscomp.Compiler,1536>, <com.google.javascript.jscomp.Compiler,1537>, <com.google.javascript.jscomp.Compiler,1539>, <com.google.javascript.jscomp.Compiler,1540>, <com.google.javascript.jscomp.Compiler,1542>, <com.google.javascript.jscomp.Compiler,1543>, <com.google.javascript.jscomp.parsing.JsDocTokenStream,105>, <com.google.javascript.jscomp.parsing.JsDocTokenStream,108>, <com.google.javascript.jscomp.Scope,400>, <com.google.javascript.jscomp.NodeUtil,3045>, <com.google.javascript.jscomp.Compiler,265>, <com.google.javascript.jscomp.Compiler,259>, <com.google.javascript.jscomp.Compiler,261>, <com.google.javascript.jscomp.SyntacticScopeCreator,108>, <com.google.javascript.jscomp.SyntacticScopeCreator,109>, <com.google.javascript.jscomp.SyntacticScopeCreator,107>, <com.google.javascript.jscomp.CompilerOptions,1060>, <com.google.javascript.jscomp.ComposeWarningsGuard,127>, <com.google.javascript.jscomp.ComposeWarningsGuard,128>, <com.google.javascript.jscomp.ComposeWarningsGuard,130>, <com.google.javascript.jscomp.ComposeWarningsGuard,138>, <com.google.javascript.jscomp.DiagnosticGroup,60>, <com.google.javascript.jscomp.DiagnosticGroup,61>, <com.google.javascript.jscomp.DiagnosticGroup,62>, <com.google.javascript.jscomp.DiagnosticGroup,63>, <com.google.javascript.jscomp.DiagnosticGroup,71>, <com.google.javascript.jscomp.DiagnosticGroup,72>, <com.google.javascript.jscomp.DiagnosticGroup,74>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2193>, <com.google.javascript.jscomp.DiagnosticGroup,117>, <com.google.javascript.jscomp.DiagnosticGroup,118>, <com.google.javascript.jscomp.DiagnosticGroup,119>, <com.google.javascript.jscomp.SyntacticScopeCreator,128>, <com.google.javascript.jscomp.SyntacticScopeCreator,129>, <com.google.javascript.jscomp.SyntacticScopeCreator,130>, <com.google.javascript.jscomp.SyntacticScopeCreator,131>, <com.google.javascript.jscomp.SyntacticScopeCreator,132>, <com.google.javascript.jscomp.SyntacticScopeCreator,133>, <com.google.javascript.jscomp.SyntacticScopeCreator,134>, <com.google.javascript.jscomp.parsing.TypeSafeDispatcher,244>, <com.google.javascript.jscomp.parsing.IRFactory,862>]
======================com.google.javascript.rhino.jstype.JSTypeRegistry,1629
========
if(n.getType()==n){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()==n){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.LT){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.getType()==Token.LT){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()==null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()!=null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=parametersNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==TagType.Empty){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(first.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.GETELEM){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.addChildToBack(n);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.addChildToBack(n);
if(fieldTypeNode.getType()==Token.GETELEM){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()!=n){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==PROPERTY_CHECKING_UNION_SIZE){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(c.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=right.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()!=PROPERTY_CHECKING_UNION_SIZE){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(arg.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=initCodeRoot.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.STRING){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.getType()==Token.STRING){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()==Token.COLON){
type=getValueType(n.getNext());
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(node.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.SCRIPT){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(root.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldNameNode.isName()){
return true;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.getFirstChild()==n);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()==info.initialValue){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=hasType;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
info.initialValueParent.replaceChild(info.initialValue,fieldTypeNode.cloneTree());
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()!=info.initialValue){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=hasType;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()==info.initialValue){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=hasType;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()!=info.initialValue){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=hasType;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=callNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()==null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()!=null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=useSite.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getType()==PROPERTY_CHECKING_UNION_SIZE){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getChildCount()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getChildCount()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(parent.getType()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getType()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.getType()!=PROPERTY_CHECKING_UNION_SIZE){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n==null){
return ;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.NAME){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(cur.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild().getNext().getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild().getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getChildCount()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild().getNext().getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getChildCount()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild().getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!fieldNameNode.isCall()){
return ;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall(),"Expected: CALL, Got: %s",Token.name(node.getType()));
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(PROPERTY_CHECKING_UNION_SIZE==1||n.getType()==Token.BLOCK||parentType==Token.SCRIPT||parentType==Token.LABEL);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode=fieldTypeNode.getNext();
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n.getFirstChild()==null||!function.isGetProp()){
return false;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==scope){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
if(fieldTypeNode.getJSDocInfo()==null){
info=n.getJSDocInfo();
}
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getIntProp(Node.INCRDECR_PROP)==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()==TagType.ArrayExpr){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fieldTypeNode.isCall());
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()==Token.EQUALS){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(arg.getType()==Token.EQUALS){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
Preconditions.checkState(fieldTypeNode.getString().length()!=0);
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
Preconditions.checkState(fieldTypeNode.getString().length()!=0);
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()==null){
fieldNameNode=fieldTypeNode.getFirstChild();
Preconditions.checkState(fieldTypeNode.getString().length()!=0);
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()!=null){
fieldNameNode=fieldTypeNode.getFirstChild();
Preconditions.checkState(fieldTypeNode.getString().length()!=0);
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Context.IN_FOR_INIT_CLAUSE){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
declareArguments(fieldTypeNode);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
add(":");
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
addExpr(fieldTypeNode.getFirstChild(),1,Context.OTHER);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateNodeType(Token.IF,fieldTypeNode);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateMinimumChildCount(fieldTypeNode,2);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateMaximumChildCount(fieldTypeNode,3);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateExpression(fieldTypeNode.getFirstChild());
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateBlock(fieldTypeNode.getChildAtIndex(1));
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(subtree.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isAssign());
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getType()==Token.COLON){
next=fieldTypeNode.getNext();
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.GETPROP :

if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.rhino.jstype.JSTypeRegistry,1630
com.google.javascript.rhino.jstype.JSTypeRegistry,1647
========
hasType=true;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
fieldType=resolveInternal(reporter,scope);
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.setResolvedTypeInternal(resolveResult);
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(hasType){
fieldNameNode=fieldTypeNode.getFirstChild();
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldNameNode=fieldTypeNode.getFirstChild();
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(hasType){
fieldNameNode=fieldTypeNode.getFirstChild();
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldNameNode=fieldTypeNode.getFirstChild();
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(hasType){
right=n.getFirstChild();
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
right=n.getLastChild();
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isCall()&&n.getFirstChild()==fieldTypeNode){
return false;
}
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.containsFunction(n)){
return ;
}
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.addChildrenToFront(n.getLastChild().detachFromParent());
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.addChildrenToBack(n.getFirstChild().detachFromParent());
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.addChildrenToFront(n.getLastChild().detachFromParent());
n.addChildrenToBack(n.getFirstChild().detachFromParent());
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(fieldTypeNode.getFirstChild().getLastChild().getString().equals("call")||propString.equals("apply")){
return fieldTypeNode.getFirstChild().getNext();
}else {
return callTarget.getFirstChild();
}
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getSourceFileByName(sourceName)!=null){
return input.getLine(PROPERTY_CHECKING_UNION_SIZE);
}
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getSourceFileByName(sourceName)!=null){
return input.getRegion(PROPERTY_CHECKING_UNION_SIZE);
}
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateBlock(n.getLastChild());
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.parsing.JsDocInfoParser,2149
========
skipEOLs();
if(!match(JsDocToken.COLON)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(!match(JsDocToken.COMMA)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
token=next();
if(!match(JsDocToken.COLON)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
token=next();
if(!match(JsDocToken.COMMA)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(!match(JsDocToken.GT)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(!match(JsDocToken.LB)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
skipEOLs();
if(!match(JsDocToken.LB)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(!match(JsDocToken.RB)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(!match(JsDocToken.COLON)){
return fieldName;
}
skipEOLs();
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(!match(JsDocToken.RB)){
return fieldName;
}
skipEOLs();
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(!match(JsDocToken.RC)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(!match(JsDocToken.RP)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(parseResultType(next())==null){
return null;
}else {
associatedNode.addChildToBack(resultType);
}
if(!match(JsDocToken.COLON)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
if(!match(JsDocToken.RP)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
fieldName.addChildToBack(associatedNode);
if(!match(JsDocToken.COLON)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
fieldName.addChildToBack(associatedNode);
if(!match(JsDocToken.RC)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(JsDocToken.EQUALS==token){
token=next();
if(JsDocToken.STRING==token){
token=next();
}
}
if(!match(JsDocToken.COLON)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!match(JsDocToken.COLON)){
return fieldName;
}
next();
Preconditions.checkArgument(token==JsDocToken.LC);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!match(JsDocToken.COLON)){
return fieldName;
}
next();
if(associatedNode==null){
return null;
}
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
skipEOLs();
if(!match(JsDocToken.COLON)){
return fieldName;
}
next();
if(associatedNode==null){
return null;
}
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!match(JsDocToken.COLON)){
return fieldName;
}
next();
if(charno>charno){
throw new MaxIterationsExceededException("Analysis did not terminate after "+maxSteps);
}
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldName.addChildToBack(associatedNode);
if(!match(JsDocToken.COLON)){
return fieldName;
}
next();
if(associatedNode==null){
return null;
}
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!match(JsDocToken.COLON)){
return fieldName;
}
next();
if(associatedNode.isFunction()){
break;
}
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.COLON)){
return fieldName;
}
string=stream.getRemainingJSDocLine();
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case IMPLICIT_CAST :

if(!match(JsDocToken.COLON)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case TEMPLATE :

if(!match(JsDocToken.COLON)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

if(!match(JsDocToken.COLON)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(stream.getRemainingJSDocLine().trim().length()>0){
jsdocBuilder.markText(line,lineno,charno,lineno,charno+line.length());
}
if(!match(JsDocToken.COLON)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode=associatedNode;
if(!match(JsDocToken.COLON)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.COLON)){
return fieldName;
}
case EXTENDS :

next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.parsing.JsDocInfoParser,2153
========
if(match(JsDocToken.STRING)&&"void".equals(stream.getString())){
next();
return newNode(Token.VOID);
}else {
return parseTypeExpression(next());
}
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression=next();
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.LB)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.lb");
}
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
typeExpression=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!match(JsDocToken.LB)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.lb");
}
skipEOLs();
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(typeExpression==null){
return null;
}
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.COLON)){
return fieldName;
}
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
next();
state=State.SEARCHING_ANNOTATION;
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
token=next();
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
next();
if(!match(JsDocToken.RB)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rb");
}
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
next();
Preconditions.checkArgument(token==JsDocToken.LC);
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
next();
if(!match(JsDocToken.RP)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rp");
}
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!match(JsDocToken.RB)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rb");
}
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
string=trimEnd(line);
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!suppressionNames.contains(string)){
parser.addParserWarning("msg.jsdoc.suppress.unknown",name,stream.getLineno(),stream.getCharno());
}
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
suppressionNames.add(stream.getString());
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!modifiesAnnotationKeywords.contains(string)&&!jsdocBuilder.hasParameter(name)){
parser.addParserWarning("msg.jsdoc.modifies.unknown",name,stream.getLineno(),stream.getCharno());
}
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
modifiesAnnotationKeywords.add(stream.getString());
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
next();
skipEOLs();
Node typeExpression=newNode(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newNode(Token.COLON).addChildToBack(associatedNode);
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
newNode(Token.COLON).addChildToBack(associatedNode);
next();
skipEOLs();
Node typeExpression=newNode(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode=associatedNode;
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression!=null){
add("(");
addList(next);
add(")");
}
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(stream.getRemainingJSDocLine().trim().length()>0){
jsdocBuilder.markText(line,lineno,charno,lineno,charno+line.length());
}
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case EXTENDS :

next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case IMPLICIT_CAST :

next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case TEMPLATE :

next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode=typeExpression;
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.parsing.JsDocInfoParser,2154
========
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
token=next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!match(JsDocToken.LB)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.lb");
}
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
skipEOLs();
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
typeExpression=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.LB)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.lb");
}
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!match(JsDocToken.LB)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.lb");
}
skipEOLs();
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
next();
skipEOLs();
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!match(JsDocToken.LB)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.lb");
}
next();
skipEOLs();
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(contextType==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(match(JsDocToken.STRING)&&"void".equals(stream.getString())){
next();
return newNode(Token.VOID);
}else {
return parseTypeExpression(next());
}
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression!=null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeNode==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeNode!=null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(resultType==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
if(!match(JsDocToken.RP)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rp");
}
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
skipEOLs();
if(!match(JsDocToken.RP)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rp");
}
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!match(JsDocToken.RB)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rb");
}
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!match(JsDocToken.RB)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rb");
}
skipEOLs();
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!match(JsDocToken.RB)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rb");
}
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
skipEOLs();
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!match(JsDocToken.RB)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rb");
}
skipEOLs();
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkArgument(token==JsDocToken.LC);
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkArgument(token==JsDocToken.LC);
token=next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(fieldType==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.COMMA)){
break;
}
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
typeExpression.addChildToBack(fieldName);
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(arg==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=newNode(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==fieldName){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(curNode==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(charno>charno){
throw new MaxIterationsExceededException("Analysis did not terminate after "+maxSteps);
}
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression.isFunction()){
break;
}
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkNotNull(getSimplifiedName(getDefinitionsReferencedAt(associatedNode).iterator().next().getLValue()));
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(null!=this.typeExpression.associatedNode){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==this.typeExpression.associatedNode){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(stream.getRemainingJSDocLine().trim().length()>0){
jsdocBuilder.markText(line,lineno,charno,lineno,charno+line.length());
}
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode=associatedNode;
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(n==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case EXTENDS :

skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(associatedNode==typeExpression){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(associatedNode==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(first==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
Preconditions.checkArgument(typeExpression!=null&&node.parent==this,"The existing child node of the parent should not be null.");
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==associatedNode){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(child==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
Preconditions.checkArgument(prev.parent==this,"prev is not a child of this node.");
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
Preconditions.checkArgument(prev.next!=null,"no next sibling.");
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
prev.next=child.next;
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.next=null;
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.parent=null;
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(last==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
Preconditions.checkArgument(child.parent==null);
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
Preconditions.checkArgument(child.next==null);
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
child.parent=this;
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
child.next=associatedNode;
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
associatedNode=associatedNode;
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
associatedNode.copyInformationFrom(associatedNode);
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
skipEOLs();
newChild.next=child.next;
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
newChild.parent=this;
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
lastSib.next=associatedNode;
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(associatedNode==null){
last=associatedNode.getLastSibling();
}
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(prev==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(associatedNode==associatedNode)last=typeExpression;
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.next=null;
child.parent=null;
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(child==associatedNode){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(result.last!=null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(result.last==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(result==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(last!=null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.parsing.JsDocInfoParser,2156
com.google.javascript.jscomp.parsing.JsDocInfoParser,2160
========
fieldType.addChildToBack(typeExpression);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldTypeList.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
if(fieldName==null){
return null;
}
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
skipEOLs();
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
skipEOLs();
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
if(fieldName==null){
return null;
}
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
functionType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
paramsType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
array.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
call.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression!=null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(prev==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
union.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
block.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
newProperty.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.detachFromParent();
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fieldType.addChildToBack(typeExpression);
typeExpression.detachFromParent();
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
node.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parseDirectives(fieldType);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
comma.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
parent.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fieldType.addChildToBack(IR.string(string));
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!(string.equals(""))){
fieldType.addChildToBack(IR.string(flags));
}
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
labelName.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.setType(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
labelName.setType(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
node.setType(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(argumentNode==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.setLineno(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.FUNCTION);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
typeExpression.addChildToBack(typeExpression);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
typeExpression.addChildToBack(typeExpression);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
node.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
ifNode.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
newDestBlock.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
n.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
replacement.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
paramNode.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.addChildToBack(fieldType);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
destParent.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpr==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
typeList.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.LC);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
nodeName.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
script.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
externs.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(sourceMapOutputPath==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(insertionPoint==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
IR.call(typeExpression).addChildToBack(IR.string(string));
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!match(JsDocToken.COLON)){
return typeExpression;
}
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!match(JsDocToken.COLON)){
return typeExpression;
}
if(fieldName==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
recordType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
next();
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
name.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
newName.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.setCharno(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.setLineno(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
if(string.equals(".")){
type=Token.GETPROP;
}else if(op.equals("[]")){
type=Token.GETELEM;
}else {
throw new JsonMLException("Invalid OP argument: "+op);
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType.getType()!=Token.GETPROP&&first.getType()!=Token.GETELEM){
fieldName.putBooleanProp(Node.FREE_CALL,true);
}
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
externsRoot.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
syntheticExternsAndJsRoot.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
tryNode.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Preconditions.checkState(typeExpression.isBlock());
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(typeExpression==null){
return null;
}
Preconditions.checkState(typeExpression.isBlock());
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(oldRoot==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
if(fieldName==null){
return false;
}
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldName=parseTypeExpression(token);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldName==null){
return null;
}
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fieldName=parseTypeExpression(token);
if(fieldName==null){
return null;
}
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fieldName=parseTypeExpression(token);
fieldType.addChildToBack(fieldName);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName==null){
return null;
}
fieldType.addChildToBack(fieldName);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldName=parseTypeExpression(token);
if(fieldName==null){
return null;
}
fieldType.addChildToBack(fieldName);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
lp.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
flagsNode.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
node.setLineno(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
if(!associatedNode.isBlock()){
Preconditions.checkState(config.isIdeMode);
bodyNode=IR.block();
}
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(associatedNode);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextElse==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
nameNode.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildToBack(associatedNode);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
associatedNode.addChildToFront(typeExpression);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fieldType.replaceChild(fieldName,associatedNode);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildToBack(associatedNode);
associatedNode.addChildToFront(typeExpression);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
parentName.replacementNode.getParent().addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
replacementNode.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToFront(fieldName);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(before==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
associatedNode.getParent().removeChild(callbackBlock);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.tryMergeBlock(associatedNode);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression!=null){
return null;
}
Node fieldType=newNode(Token.COLON);
script.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildToBack(associatedNode);
if(typeExpression!=null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
associatedNode.addChildToBack(associatedNode);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
script.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildToBack(associatedNode);
if(typeExpression!=null){
return null;
}
Node fieldType=newNode(Token.COLON);
script.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
getSynthesizedExternsRoot().addChildToBack(IR.var(fieldType));
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
suppressionNames.remove(string);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
lit.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
keyNode.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
if(!associatedNode.isString()){
keyNode=IR.string(NodeUtil.getStringValue(keyNode)).srcref(keyNode);
}
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.setQuotedString();
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fieldType.addChildToBack(IR.propdef(associatedNode,fieldName));
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.setQuotedString();
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.setType(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
n.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null&&!(isLowerPrecedenceInExpression(associatedNode,AND_PRECEDENCE)&&isLowerPrecedenceInExpression(fieldName,AND_PRECEDENCE))){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(innerElseBranch==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.setLineno(node.getFirstChild().getLineno());
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.setCharno(node.getFirstChild().getCharno());
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
newNode.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.setCharno(fieldType.getCharno());
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fncBlock.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
if("jQuery.prototype".equals(typeExpression.getQualifiedName())){
typeExpression=objectToExtend.removeFirstChild();
}else {
targetVal=objectToExtend.detachFromParent();
}
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
if(!suppressionNames.contains(string)){
return ;
}
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
if(typeExpression.isQuotedString()){
typeExpression=IR.getelem(typeExpression.cloneTree(),currentProp).srcref(currentProp);
}else {
newProp=IR.getprop(objectToExtend.cloneTree(),currentProp).srcref(currentProp);
}
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.FUNCTION :

if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.getParent().addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
if(typeExpression.isVar()){
typeExpression=IR.block(key,IR.exprResult(IR.assign(key.getFirstChild().cloneNode(),typeExpression.cloneTree())),typeExpression);
}else {
ifBody=IR.block(IR.exprResult(IR.assign(key,tmp.cloneTree())),body);
}
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
key.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.reportGetterParam(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.reportSetterParam(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldName.addChildToFront(typeExpression);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fieldName.addChildToFront(typeExpression);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.setType(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.setType(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldName.addChildToFront(typeExpression);
fieldType.addChildToBack(fieldName);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldName.addChildToFront(typeExpression);
fieldType.addChildToBack(fieldName);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.setType(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
n.setLineno(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
typeExpression.getParent().addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
typeExpression.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
if(typeExpression!=null){
if(secondArg.getNext()!=null||!secondArg.isNumber()){
return typeExpression;
}else {
charno=(int)secondArg.getDouble();
}
}
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
reportCodeChange();
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(value==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.parsing.JsDocInfoParser,2161
========
Node fieldType=newNode(Token.COLON);
fieldTypeList.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
if(fieldName==null){
return null;
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldType=newNode(Token.COLON);
innerBlock.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildToBack(fieldType.removeChildAfter(outerBlock));
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildToBack(typeExpression);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldType=newNode(Token.COLON);
newProperty.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
objectLiteral.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
associatedNode.detachFromParent();
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(typeExpression);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
associatedNode.detachFromParent();
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
associatedNode.detachFromParent();
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
associatedNode.detachFromParent();
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(typeExpression);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldType=newNode(Token.PIPE);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldType=newNode(Token.COLON);
union.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.PIPE);
fieldType.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldType=newNode(Token.COLON);
simplified.addChildToBack(fieldName);
simplified.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
simplified.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
simplified.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(simplifyShortCircuitBranch(typeExpression));
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
node.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
parent.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
parent.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldType);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
node.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!(string.equals(""))){
fieldType.addChildToBack(IR.string(flags));
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
lhs.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
var.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
parent.addChildToBack(fieldName);
node.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
arrayLiteral.addChildToBack(fieldName);
arrayLiteral.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
arrayLiteral.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
arrayLiteral.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
block.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
node.addChildToBack(fieldName);
node.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
comma.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
call.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
arrayNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
call.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
functionType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
block.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.addChildToBack(fieldType);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
parent.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
n.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
replacement.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
simplified.addChildToBack(fieldName);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
simplified.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
simplified.addChildToBack(fieldName);
simplified.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
script.addChildToBack(fieldName);
script.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
script.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
externs.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
script.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
functionType.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
prev.addChildToBack(fieldName);
prev.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
prev.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
cur.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.setLineno(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
prev.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
call.addChildToBack(fieldName);
call.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
call.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
typeExpression.putBooleanProp(Node.DIRECT_EVAL,true);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fieldType.addChildToBack(typeExpression);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
node.addChildToBack(fieldName);
parent.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
node.addChildToBack(fieldName);
fieldType.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.putBooleanProp(Node.DIRECT_EVAL,true);
Node fieldType=newNode(Token.COLON);
node.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
parent.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.putBooleanProp(Node.DIRECT_EVAL,true);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
parent.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.putBooleanProp(Node.DIRECT_EVAL,true);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldType=newNode(Token.COLON);
node.addChildToBack(fieldName);
parent.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.putBooleanProp(Node.DIRECT_EVAL,true);
Node fieldType=newNode(Token.COLON);
node.addChildToBack(fieldName);
parent.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.putBooleanProp(Node.DIRECT_EVAL,true);
Node fieldType=newNode(Token.COLON);
node.addChildToBack(fieldName);
fieldType.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.putBooleanProp(Node.DIRECT_EVAL,true);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
parent.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.putBooleanProp(Node.DIRECT_EVAL,true);
Node fieldType=newNode(Token.COLON);
node.addChildToBack(fieldName);
parent.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
paramsType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
if(typeExpression==null){
return null;
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldType=newNode(Token.COLON);
if(typeExpression==null){
return null;
}
fieldType.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldType=newNode(Token.COLON);
array.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
destParent.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
charno--;
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
typeList.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
block.setLineno(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
block.addChildToBack(fieldName);
node.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
block.addChildToBack(fieldName);
fieldType.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.setLineno(fieldName);
node.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.setLineno(fieldName);
fieldType.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
node.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
block.setLineno(fieldName);
node.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
block.setLineno(fieldName);
fieldType.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
block.addChildToBack(fieldName);
node.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.setLineno(fieldName);
node.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
block.setLineno(fieldName);
node.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
typeExpression=parseTypeExpression(token);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldType=newNode(Token.COLON);
union.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
typeExpression=parseTypeExpression(token);
union.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
if(typeExpression==null){
return null;
}
union.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
typeExpression=parseTypeExpression(token);
fieldType.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldType=newNode(Token.COLON);
typeExpression=parseTypeExpression(token);
if(typeExpression==null){
return null;
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldType=newNode(Token.COLON);
typeExpression=parseTypeExpression(token);
union.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
if(typeExpression==null){
return null;
}
union.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
typeExpression=parseTypeExpression(token);
if(typeExpression==null){
return null;
}
union.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
typeExpression=parseTypeExpression(token);
if(typeExpression==null){
return null;
}
fieldType.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldType=newNode(Token.COLON);
typeExpression=parseTypeExpression(token);
if(typeExpression==null){
return null;
}
union.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
name.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
varNode.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildrenToFront(fieldType);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
objKeyNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
objNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
lp.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldType);
node.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
charno++;
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
parent.addChildToBack(fieldName);
block.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(typeExpression);
block.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
parent.addChildToBack(typeExpression);
block.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
paramNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
root.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
labelName.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.setType(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
labelName.setType(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
node.setType(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
paramList.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
block.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
newcall.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
arraylit.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.tryMergeBlock(typeExpression);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
ifNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
newDestBlock.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
n.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
arrayOfStrings.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
jsRoot.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
name.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
name.addChildToBack(fieldName);
varNode.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
name.addChildToBack(fieldName);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildrenToFront(fieldType);
Node fieldType=newNode(Token.COLON);
name.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(typeExpression);
varNode.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildrenToFront(fieldType);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
varNode.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildrenToFront(fieldType);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
varNode.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildrenToFront(fieldType);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
name.addChildToBack(typeExpression);
varNode.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
name.addChildToBack(typeExpression);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildrenToFront(fieldType);
Node fieldType=newNode(Token.COLON);
name.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
name.addChildToBack(fieldName);
varNode.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildrenToFront(fieldType);
Node fieldType=newNode(Token.COLON);
name.addChildToBack(fieldName);
varNode.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildrenToFront(fieldType);
Node fieldType=newNode(Token.COLON);
name.addChildToBack(fieldName);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(typeExpression);
varNode.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildrenToFront(fieldType);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(typeExpression);
varNode.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildrenToFront(fieldType);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(typeExpression);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildrenToFront(fieldType);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
varNode.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
name.addChildToBack(typeExpression);
varNode.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildrenToFront(fieldType);
Node fieldType=newNode(Token.COLON);
name.addChildToBack(typeExpression);
varNode.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildrenToFront(fieldType);
Node fieldType=newNode(Token.COLON);
name.addChildToBack(typeExpression);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildrenToFront(fieldType);
Node fieldType=newNode(Token.COLON);
name.addChildToBack(fieldName);
varNode.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildrenToFront(fieldType);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(typeExpression);
varNode.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
var.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
original.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
nextNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
newCond.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
reportCodeChange();
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
tryNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(associatedNode);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(associatedNode.isBlock());
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(associatedNode.isBlock());
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(associatedNode);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
opNode.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode=associatedNode.cloneTree();
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
switchNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
node.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
nodeName.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
if(typeExpression==null){
return false;
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
if(!fieldName.isBlock()){
Preconditions.checkState(config.isIdeMode);
bodyNode=IR.block();
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
node.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldName.getParent().addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldType=newNode(Token.COLON);
fieldName.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldType=newNode(Token.COLON);
fieldName.getParent().addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldType=newNode(Token.COLON);
fieldName.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldType=newNode(Token.COLON);
newName.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.setCharno(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.setLineno(fieldName);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.setLineno(fieldName);
node.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
Preconditions.checkNotNull(typeExpression);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldType=newNode(Token.COLON);
script.addChildToBack(fieldName);
parent.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
script.addChildToBack(fieldName);
fieldType.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
Preconditions.checkNotNull(typeExpression);
script.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
Preconditions.checkNotNull(typeExpression);
fieldType.addChildToBack(fieldName);
parent.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
Preconditions.checkNotNull(typeExpression);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldType=newNode(Token.COLON);
script.addChildToBack(fieldName);
parent.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
Preconditions.checkNotNull(typeExpression);
script.addChildToBack(fieldName);
parent.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
Preconditions.checkNotNull(typeExpression);
script.addChildToBack(fieldName);
fieldType.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
Preconditions.checkNotNull(typeExpression);
fieldType.addChildToBack(fieldName);
parent.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
Preconditions.checkNotNull(typeExpression);
script.addChildToBack(fieldName);
parent.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
externsRoot.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
flagsNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
node.setLineno(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.setLineno(fieldType);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
node.addChildToBack(fieldType);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
node.setLineno(fieldType);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
Preconditions.checkState(fieldType.getType()==Token.BLOCK||parent.getType()==Token.SCRIPT);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
objectlit.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
comma.addChildToBack(fieldName);
parent.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
nameNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldName.addChildToFront(typeExpression);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fieldName.addChildToFront(typeExpression);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
varNode.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldName.addChildToFront(typeExpression);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fieldName.addChildToFront(typeExpression);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
varNode.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
lit.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
recordType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldType=newNode(Token.COLON);
next();
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldType=newNode(Token.COLON);
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldType=newNode(Token.COLON);
charno++;
fieldType.addChildToBack(fieldName);
parent.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
child.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
newCond.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
nextNode.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType.getType()!=Token.GETPROP&&first.getType()!=Token.GETELEM){
typeExpression.putBooleanProp(Node.FREE_CALL,true);
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
parent.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
keyNode.addChildToBack(fieldName);
keyNode.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
keyNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
keyNode.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
if(!fieldType.isString()){
keyNode=IR.string(NodeUtil.getStringValue(keyNode)).srcref(keyNode);
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildToBack(IR.propdef(fieldType,typeExpression));
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
parentName.replacementNode.getParent().addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
replacementNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
suppressionNames.remove(string);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
expandedBlock.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
n.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
associatedNode.detachFromParent();
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldType=newNode(Token.COLON);
associatedNode.detachFromParent();
fieldType.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldType=newNode(Token.COLON);
typeList.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.LC);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(parseFieldTypeList(token)==null){
return reportGenericTypeSyntaxWarning();
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(parseFieldTypeList(token)==null){
return reportGenericTypeSyntaxWarning();
}
Node fieldType=newNode(Token.LC);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldType=newNode(Token.COLON);
if(!suppressionNames.contains(string)){
return ;
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fncBlock.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
if("jQuery.prototype".equals(fieldType.getQualifiedName())){
associatedNode=objectToExtend.removeFirstChild();
}else {
targetVal=objectToExtend.detachFromParent();
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
if(associatedNode.isQuotedString()){
associatedNode=IR.getelem(fieldType.cloneTree(),currentProp).srcref(currentProp);
}else {
newProp=IR.getprop(objectToExtend.cloneTree(),currentProp).srcref(currentProp);
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
literalStringNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fncBlock.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
newBlock.addChildToBack(fieldName);
newBlock.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
newBlock.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
newBlock.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.FUNCTION);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldType=newNode(Token.COLON);
if(associatedNode.isVar()){
associatedNode=IR.block(key,IR.exprResult(IR.assign(key.getFirstChild().cloneNode(),fieldType.cloneTree())),fieldName);
}else {
ifBody=IR.block(IR.exprResult(IR.assign(key,tmp.cloneTree())),body);
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
newNode.addChildToBack(fieldName);
newNode.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
newNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
newNode.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
key.addChildToBack(fieldName);
key.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
key.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.reportGetterParam(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.reportSetterParam(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
key.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
key.setType(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.addChildToBack(fieldType);
Node fieldType=newNode(Token.COLON);
key.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.setType(fieldName);
key.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.addChildToBack(fieldType);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
key.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.addChildToBack(fieldType);
Node fieldType=newNode(Token.COLON);
fieldType.setType(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
key.setType(fieldName);
key.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.addChildToBack(fieldType);
Node fieldType=newNode(Token.COLON);
key.addChildToBack(fieldName);
key.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.addChildToBack(fieldType);
Node fieldType=newNode(Token.COLON);
key.setType(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.addChildToBack(fieldType);
Node fieldType=newNode(Token.COLON);
fieldType.setType(fieldName);
key.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.addChildToBack(fieldType);
Node fieldType=newNode(Token.COLON);
key.setType(fieldName);
key.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
if(fieldType==null){
return null;
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldType=newNode(Token.COLON);
n.addChildToBack(fieldName);
n.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.setCharno(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
n.setLineno(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.setLineno(fieldName);
n.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
n.setLineno(fieldName);
n.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.getParent().addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldType=newNode(Token.COLON);
prev.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
prev.setLineno(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(typeExpression);
prev.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
cur.addChildToBack(fieldName);
prev.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.setLineno(fieldName);
prev.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
cur.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.setLineno(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
cur.setLineno(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
prev.addChildToBack(typeExpression);
prev.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
prev.setLineno(fieldName);
prev.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
prev.setLineno(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
cur.addChildToBack(typeExpression);
prev.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.setLineno(typeExpression);
prev.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
cur.setLineno(fieldName);
prev.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
cur.setLineno(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
prev.setLineno(typeExpression);
prev.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
cur.setLineno(typeExpression);
prev.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
ancestor.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
typeExpression.getParent().addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldType=newNode(Token.COLON);
typeExpression.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldType=newNode(Token.COLON);
paramList.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.copyInformationFromForTree(typeExpression);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Node fieldType=newNode(Token.COLON);
fieldType.copyInformationFromForTree(typeExpression);
newNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.FUNCTION :

Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.parsing.JsDocInfoParser,2162
========
fieldTypeList.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName==null){
return null;
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
comma.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
newProperty.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
objectLiteral.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(fieldName);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
associatedNode.detachFromParent();
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fieldType.addChildToBack(typeExpression);
fieldType.addChildToBack(fieldName);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
associatedNode.detachFromParent();
fieldType.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
associatedNode.detachFromParent();
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(fieldName);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
associatedNode.detachFromParent();
fieldType.addChildToBack(typeExpression);
fieldType.addChildToBack(fieldName);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
call.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
functionType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
union.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
paramsType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(typeExpression==null){
return null;
}
fieldType.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
array.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
functionType.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parent.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
node.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
node.addChildToBack(typeExpression);
return node;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
block.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return node;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldType);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!(string.equals(""))){
fieldType.addChildToBack(IR.string(flags));
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parent.addChildToBack(fieldType);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parent.addChildToBack(fieldName);
node.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldType);
node.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parent.addChildToBack(fieldType);
node.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
replacement.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
destParent.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
script.addChildToBack(fieldName);
script.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
script.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
externs.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
script.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
arrayNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeList.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression=parseTypeExpression(token);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
union.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression=parseTypeExpression(token);
union.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
union.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression=parseTypeExpression(token);
fieldType.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
typeExpression=parseTypeExpression(token);
if(typeExpression==null){
return null;
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
typeExpression=parseTypeExpression(token);
union.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
union.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression=parseTypeExpression(token);
if(typeExpression==null){
return null;
}
union.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression=parseTypeExpression(token);
if(typeExpression==null){
return null;
}
fieldType.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
typeExpression=parseTypeExpression(token);
if(typeExpression==null){
return null;
}
union.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
node.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
node.addChildToBack(fieldName);
node.addChildToBack(typeExpression);
return node;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
node.addChildToBack(fieldName);
node.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
node.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return node;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ifNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newDestBlock.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
paramNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return paramNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
paramNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
root.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(fieldType);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return paramNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
externsRoot.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.tryMergeBlock(typeExpression);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.setLineno(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
block.addChildToBack(fieldName);
node.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
block.addChildToBack(fieldName);
fieldType.addChildToBack(fieldType);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
node.addChildToBack(fieldType);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
block.addChildToBack(fieldName);
node.addChildToBack(fieldType);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
name.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
jsRoot.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
syntheticModuleJsRoot.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return syntheticModuleJsRoot;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
syntheticModuleJsRoot.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(associatedNode.cloneTree());
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fieldType.addChildToBack(fieldName);
syntheticExternsAndJsRoot.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return typeExpression;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return syntheticModuleJsRoot;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(associatedNode.cloneTree());
fieldType.addChildToBack(typeExpression);
return typeExpression;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
prev.addChildToBack(fieldName);
prev.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
prev.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
cur.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
prev.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return associatedNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fieldType.setLineno(typeExpression);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);
return associatedNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fieldType.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);
return node;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.setLineno(fieldName);
fieldType.addChildToBack(typeExpression);
return associatedNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.setLineno(fieldName);
fieldType.addChildToBack(typeExpression);
return node;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.setLineno(typeExpression);
fieldType.addChildToBack(typeExpression);
return associatedNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.setLineno(typeExpression);
fieldType.addChildToBack(typeExpression);
return node;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
call.addChildToBack(fieldName);
call.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
call.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildAfter(typeExpression,fieldName);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
associatedNode.addChildAfter(typeExpression,fieldName);
call.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
lp.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
tryNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return tryNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
tryNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(associatedNode);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return tryNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(associatedNode.isBlock());
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(associatedNode.isBlock());
fieldType.addChildToBack(associatedNode);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
nodeName.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
node.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldName.isBlock()){
Preconditions.checkState(config.isIdeMode);
bodyNode=IR.block();
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
node.addChildToBack(fieldName);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(fieldName);
return node;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
node.addChildToBack(fieldName);
return node;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
body.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return false;
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
parent.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return exp2;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
comma.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return associatedNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
labelName.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.setType(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
labelName.setType(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
node.setType(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
flagsNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
node.setLineno(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
node.setLineno(typeExpression);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldName.getParent().addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fieldName.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fieldName.getParent().addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fieldName.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
recordType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
recordType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
next();
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
externsRoot.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
lit.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nextNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newCond.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parent.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nameNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
varNode.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldName.addChildToFront(typeExpression);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fieldName.addChildToFront(typeExpression);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(fieldName);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fieldType.addChildToBack(fieldName);
parent.addChildToBack(fieldName);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parentName.replacementNode.getParent().addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
replacementNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keyNode.addChildToBack(fieldName);
keyNode.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keyNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
keyNode.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!associatedNode.isString()){
keyNode=IR.string(NodeUtil.getStringValue(keyNode)).srcref(keyNode);
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(IR.propdef(associatedNode,typeExpression));
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fieldType.addChildToBack(IR.propdef(associatedNode,typeExpression));
fieldType.setType(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType.getType()!=Token.GETPROP&&first.getType()!=Token.GETELEM){
typeExpression.putBooleanProp(Node.FREE_CALL,true);
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newName.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.setCharno(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.setLineno(fieldName);
node.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.setLineno(fieldName);
fieldType.addChildToBack(fieldName);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.setLineno(fieldName);
node.addChildToBack(fieldName);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
suppressionNames.remove(string);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fncBlock.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(associatedNode.isQuotedString()){
associatedNode=IR.getelem(fieldType.cloneTree(),currentProp).srcref(currentProp);
}else {
newProp=IR.getprop(objectToExtend.cloneTree(),currentProp).srcref(currentProp);
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!suppressionNames.contains(string)){
return ;
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeList.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if("jQuery.prototype".equals(fieldType.getQualifiedName())){
associatedNode=objectToExtend.removeFirstChild();
}else {
targetVal=objectToExtend.detachFromParent();
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(associatedNode.isVar()){
associatedNode=IR.block(key,IR.exprResult(IR.assign(key.getFirstChild().cloneNode(),fieldType.cloneTree())),fieldName);
}else {
ifBody=IR.block(IR.exprResult(IR.assign(key,tmp.cloneTree())),body);
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
key.addChildToBack(fieldName);
key.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
key.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.reportGetterParam(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.reportSetterParam(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
key.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.addChildToBack(fieldType);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
key.setType(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.addChildToBack(fieldType);
key.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.setType(fieldName);
key.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.addChildToBack(fieldType);
fieldType.addChildToBack(fieldName);
key.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.addChildToBack(fieldType);
fieldType.setType(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
key.setType(fieldName);
key.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.addChildToBack(fieldType);
key.addChildToBack(fieldName);
key.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.addChildToBack(fieldType);
key.setType(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.addChildToBack(fieldType);
fieldType.setType(fieldName);
key.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.addChildToBack(fieldType);
key.setType(fieldName);
key.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldName;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.FUNCTION :

fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.parsing.JsDocInfoParser,2163
com.google.javascript.rhino.jstype.JSTypeRegistry,1314
com.google.javascript.rhino.jstype.JSTypeRegistry,1456
UNKNOWN ASTNode type : catch (IllegalArgumentException ex) {
  t.report(n,MALFORMED_REGEXP,ex.getMessage());
}

UNKNOWN ASTNode type : catch (IllegalArgumentException e) {
  compiler.report(t.makeError(n,INVALID_STYLE_ERROR,styleStr));
  return;
}

UNKNOWN ASTNode type : catch (UnsupportedOperationException e) {
  violation("getString failed for" + Token.name(n.getType()),n);
}

UNKNOWN ASTNode type : catch (UnsupportedOperationException e) {
  violation("getString failed for" + Token.name(n.getType()),n);
}

UNKNOWN ASTNode type : catch (NumberFormatException e) {
  return n;
}

UNKNOWN ASTNode type : catch (NumberFormatException e) {
  return n;
}

========
case Token.LC :
return createFromTypeNodesInternal(n.getFirstChild(),sourceName,scope).restrictByNotNullOrUndefined();


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.QMARK :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.LC :
return createOptionalType(createFromTypeNodesInternal(n.getFirstChild(),sourceName,scope));


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.STAR :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.LC :
return createDefaultObjectUnion(createFromTypeNodesInternal(n,sourceName,scope));


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(n==null){
return getNativeType(UNKNOWN_TYPE);
}
case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.EQUALS :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.LC :
return createFromTypeNodesInternal(n,sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(resolveMode==ResolveMode.LAZY_EXPRESSIONS){
boolean hasTypeName(n)=hasTypeName(n);
if(hasNames){
return new UnresolvedTypeExpression(this,n,sourceName);
}
}
case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.FALSE :
n.setJSType(getNativeType(BOOLEAN_TYPE));
break;

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.SETTER_DEF :
Preconditions.checkState(n.getParent().isObjectLit());
Preconditions.checkState(PROPERTY_CHECKING_UNION_SIZE==1);

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.NEW :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
sourceName=n.getString();
case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.CALL :
Node n.getFirstChild()=n.getFirstChild();
String n.getFirstChild().getQualifiedName()=calledFn.getQualifiedName();

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.AND :
VariableLiveness isVariableReadBeforeKill(n.getFirstChild(),sourceName)=isVariableReadBeforeKill(n.getFirstChild(),sourceName);
VariableLiveness isVariableReadBeforeKill(n.getLastChild(),sourceName)=isVariableReadBeforeKill(n.getLastChild(),variable);

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.CATCH :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!n.isGetProp()){
return false;
}
case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getType(n.getFirstChild()).isUnknownType()||type.isUnionType()){
return false;
}
case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
UNKNOWN ASTNode type : catch (UnsupportedOperationException ex) {
  error(NEGATING_A_NON_NUMBER_ERROR,left);
  return n;
}

UNKNOWN ASTNode type : catch (UnsupportedOperationException ex) {
  error(NEGATING_A_NON_NUMBER_ERROR,left);
  return n;
}

UNKNOWN ASTNode type : catch (IllegalArgumentException e) {
  compiler.report(t.makeError(n,INVALID_STYLE_ERROR,styleStr));
  return;
}

========
case Token.LC :
return createOptionalType(createFromTypeNodesInternal(n.getFirstChild(),sourceName,scope));

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.BITNOT :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.DELPROP :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.COMMA :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.ASSIGN :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.FOR :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.LC :
return getNativeType(UNKNOWN_TYPE);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
default :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.CALL :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.PARAM_LIST :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.GETELEM :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.ARRAYLIT :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.CATCH :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case Token.HOOK :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
sourceName=n.getQualifiedName();
case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(sourceName==null)return ;
case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.LC :
return n.getJSType().restrictByNotNullOrUndefined();

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!n.isGetProp()){
return false;
}
case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getType(n.getFirstChild()).isUnknownType()||type.isUnionType()){
return false;
}
case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkNoTypeCheckSection(n,true);
case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.rhino.jstype.JSTypeRegistry,1617
========
if(fieldName.startsWith("."+File.separator)||fieldName.startsWith(".."+File.separator)){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("."+File.separator)||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith(".."+File.separator)){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")&&fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldName.startsWith("\'")||fieldName.substring(0,2).equalsIgnoreCase("0x")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
radix=16;
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")&&fieldName.substring(0,2).equalsIgnoreCase("0x")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldName.equals(sourceName)||fieldName.startsWith(sourceName+".")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldName.equals(sourceName)||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldName.startsWith("\'")||fieldName.startsWith(sourceName+".")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldName.indexOf(sourceName,PROPERTY_CHECKING_UNION_SIZE)<0){
return -1;
}
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.endsWith(".")||fieldName.startsWith(".")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldName.endsWith(".")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldName.startsWith("\'")||fieldName.startsWith(".")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldName.indexOf("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldName=parentName.substring(0,parentName.lastIndexOf('.'));
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.isUpperCase("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.isJavaIdentifierStart("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
UNKNOWN ASTNode type : catch (IllegalArgumentException ex) {
  t.report(n,MALFORMED_REGEXP,ex.getMessage());
}

UNKNOWN ASTNode type : catch (IllegalArgumentException e) {
  compiler.report(t.makeError(n,INVALID_STYLE_ERROR,styleStr));
  return;
}

UNKNOWN ASTNode type : catch (UnsupportedOperationException e) {
  violation("getString failed for" + Token.name(n.getType()),n);
}

UNKNOWN ASTNode type : catch (UnsupportedOperationException e) {
  violation("getString failed for" + Token.name(n.getType()),n);
}

UNKNOWN ASTNode type : catch (NumberFormatException e) {
  return n;
}

UNKNOWN ASTNode type : catch (NumberFormatException e) {
  return n;
}

========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==Token.EQUALS){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)!=null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==-1){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
errorReporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
return false;
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==TernaryValue.FALSE){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isWhile());
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkArgument(n.isWhile());
if(builder.addProperty(fieldName,fieldType,fieldNameNode)!=null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkArgument(n.isDo());
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)!=TernaryValue.FALSE){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isDo());
if(builder.addProperty(fieldName,fieldType,fieldNameNode)!=null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkArgument(n.isDo());
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==TernaryValue.FALSE){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isDo());
if(builder.addProperty(fieldName,fieldType,fieldNameNode)!=TernaryValue.FALSE){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
compiler.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
return ;
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.replaceChild(n,fieldNameNode);
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
n.replaceChild(n,fieldNameNode);
if(builder.addProperty(fieldName,fieldType,fieldNameNode)!=null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
reporter.reportCodeChange();
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
return ;
compiler.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
break;
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==Token.NAME){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
return true;
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(!NodeUtil.isObjectLitKey(fieldNameNode,n.getParent()));
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nameInfo.superclass!=null){
recordReference(nameInfo.name,nameInfo.superclass,RefType.INHERITANCE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
n.setString(sourceName+DISAMBIGUATION_SUFFIX);
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
tryDefineLexicalQualifiedNameRef(NodeUtil.getBestLValueName(fieldNameNode),n);
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==fieldName){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
transformationHandler.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope=traverseChildren(fieldNameNode,scope);
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
callNodeToParentMap.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==fieldNameNode){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==n){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
if(n.getJSDocInfo()==null){
info=fieldNameNode.getJSDocInfo();
}
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.EQUALS :

if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==fieldType){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.removeChild(fieldNameNode);
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
refNodes.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
checkedClass.hasInstanceOfReference=true;
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
checkedClass.hasInstanceOfReference=true;
return ;

reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)!=-1){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
IR.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
n.replaceChild(n,info.value.cloneTree());
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
fieldNameNode.reportCodeChange();
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
n.replaceChild(n,info.value.cloneTree());
fieldNameNode.reportCodeChange();

reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
n.setString(p.newName);
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
changed=lastGeneration||!p.newName.equals(n.getString());
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
n.setString(p.newName);
changed=lastGeneration||!p.newName.equals(n.getString());

reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType=src.restrictByNotNullOrUndefined();
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(templateTypeName!=null&&fieldName!=null);
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
global.uses.add(n);
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isCall());
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!NodeUtil.isGet(fieldNameNode)){
n.putBooleanProp(Node.FREE_CALL,true);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
abstractMethodAssignmentNodes.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
newName.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
n.setString(a.newName);
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.hasOneChild());
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
defineSlot(fieldNameNode,n,fieldType,lastGeneration);
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
n.add(sourceName);
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
if(templateTypeName==null||!templateTypeName.endsWith(".prototype."+fieldNameNode.getString())){
return ;
}
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
n.removeChild(fieldNameNode);
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
if(templateTypeName==null||!templateTypeName.endsWith(".prototype."+fieldNameNode.getString())){
return ;
}
n.removeChild(fieldNameNode);

RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
if(fieldNameNode.getParent()!=null&&fieldNameNode.getParent().isGetElem()){
Node fieldName=fieldNameNode.getParent();
while(fieldName.isGetProp()||fieldName.isGetElem()){
propObject=fieldName.getFirstChild();
}
Node n=fieldNameNode.getParent().cloneTree();
Node fieldTypeNode=n.getChildAtIndex(1);
if(fieldTypeNode.isString()&&NodeUtil.isValidPropertyName(fieldTypeNode.getString())){
Node n.getFirstChild()=n.getFirstChild();
Node IR.getprop(n.getFirstChild().detachFromParent(),fieldTypeNode.detachFromParent())=IR.getprop(n.getFirstChild().detachFromParent(),fieldTypeNode.detachFromParent());
fieldNameNode.getParent().getParent().replaceChild(ancestor,IR.getprop(n.getFirstChild().detachFromParent(),fieldTypeNode.detachFromParent()));
}else {
isValidExpansion=false;
}
}
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
if(hasType){
ObjectType getJSType(n).dereference()=getJSType(n).dereference();
if(getJSType(n).dereference()!=null){
type=getJSType(n).dereference();
}
}
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
if(getJSType(n).isFunctionPrototypeType()||(getJSType(n).toObjectType()!=null&&getJSType(n).toObjectType().getConstructor()!=null)){
return getJSType(n).toString();
}else if(fieldName!=null){
return fieldName;
}else if(getJSType(n).isFunctionType()){
return "function";
}else {
return getJSType(n).toString();
}
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
if(hasType){
ObjectType getJSType(n).dereference()=getJSType(n).dereference();
if(getJSType(n).dereference()!=null){
type=getJSType(n).dereference();
}
}
if(getJSType(n).isFunctionPrototypeType()||(getJSType(n).toObjectType()!=null&&getJSType(n).toObjectType().getConstructor()!=null)){
return getJSType(n).toString();
}else if(fieldName!=null){
return fieldName;
}else if(getJSType(n).isFunctionType()){
return "function";
}else {
return getJSType(n).toString();
}

RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
if(lastGeneration){
if(hasType){
return ;
}
while(fieldTypeNode!=null){
oType=fieldTypeNode.getImplicitPrototype();
}
}
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.getParent().replaceChild(typeofNode,IR.string(null));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reportCodeChange();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.getParent().replaceChild(typeofNode,IR.string(null));
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
RecordTypeBuilder builder=new RecordTypeBuilder(this);
Preconditions.checkArgument(fieldTypeNode.isTypeOf());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
RecordTypeBuilder builder=new RecordTypeBuilder(this);
Preconditions.checkArgument(fieldTypeNode.getFirstChild()!=null);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
RecordTypeBuilder builder=new RecordTypeBuilder(this);
Preconditions.checkArgument(fieldTypeNode.isTypeOf());
Preconditions.checkArgument(fieldTypeNode.getFirstChild()!=null);

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
new StringBuilder().append(getLevelName(lastGeneration?CheckLevel.WARNING:CheckLevel.ERROR));
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
new StringBuilder().append(" - ");
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
new StringBuilder().append(error.description);
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
new StringBuilder().append('\n');
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
if(templateTypeName!=null){
new StringBuilder().append(templateTypeName);
new StringBuilder().append('\n');
if(0<=PROPERTY_CHECKING_UNION_SIZE&&PROPERTY_CHECKING_UNION_SIZE<=templateTypeName.length()){
new StringBuilder().append("^\n");
}
}
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
new StringBuilder().append(getLevelName(lastGeneration?CheckLevel.WARNING:CheckLevel.ERROR));
new StringBuilder().append(" - ");
new StringBuilder().append(error.description);
new StringBuilder().append('\n');
if(templateTypeName!=null){
new StringBuilder().append(templateTypeName);
new StringBuilder().append('\n');
if(0<=PROPERTY_CHECKING_UNION_SIZE&&PROPERTY_CHECKING_UNION_SIZE<=templateTypeName.length()){
new StringBuilder().append("^\n");
}
}

RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
newNode=IR.number(Double.parseDouble(sourceName));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
normalizedNewVal=normalizeNumericString(String.valueOf(Double.parseDouble(sourceName)));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
newNode=IR.number(Double.parseDouble(sourceName));
normalizedNewVal=normalizeNumericString(String.valueOf(Double.parseDouble(sourceName)));

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
if(!normalizeNumericString(sourceName).equals(fieldType)){
return n;
}
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.rhino.jstype.JSTypeRegistry,1620
Find no block!
com.google.javascript.rhino.jstype.JSTypeRegistry,1621
========
for(Node fieldTypeNode=n.getFirstChild();arg!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(arg.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.ELLIPSIS){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=current.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();arg!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(arg.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getFirstChild().getNext().getFirstChild()==null){
return null;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!NodeUtil.isExprAssign(fieldNameNode)){
return null;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isGetProp()&&lhs.getFirstChild().isThis()){
Node fieldNameNode.getFirstChild().getLastChild()=fieldNameNode.getFirstChild().getLastChild();
if(rhs.isName()&&rhs.getString().equals(n.getFirstChild().getNext().getFirstChild().getString())){
Node fieldTypeNode.getLastChild()=lhs.getLastChild();
return propertyName;
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild().getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();c!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.getFirstChild().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=lastNonRemovable;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isSwitch());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild().getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.getFirstChild().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild().getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(n.isSwitch());
for(Node fieldTypeNode=n.getFirstChild().getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(n.isSwitch());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.getFirstChild().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(n.isSwitch());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(n.isSwitch());
for(Node fieldTypeNode=n.getFirstChild().getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.getFirstChild().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Preconditions.checkState(n.isSwitch());
for(Node fieldTypeNode=n.getFirstChild().getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
NodeUtil.setDebugInformation(fieldNameNode.getFirstChild(),n.getFirstChild(),fieldName+".prototype");
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.replaceChild(n.getFirstChild(),fieldNameNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();name!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=left.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
value=n.getFirstChild().getFirstChild();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldNameNode.getNext().getType()==Token.GETPROP){
Node fieldNameNode.getNext().getFirstChild()=fieldNameNode.getNext().getFirstChild();
secondArgument.removeChild(newChild);
fieldTypeNode.replaceChild(fieldNameNode,newChild);
n.replaceChild(secondArgument,IR.string(secondArgument.getFirstChild().getString()));
}else if(secondArgumentType==Token.GETELEM){
Node fieldNameNode.getNext().getFirstChild()=secondArgument.getFirstChild();
secondArgument.removeChild(newFirstArgument);
Node fieldNameNode.getNext().getLastChild()=secondArgument.getLastChild();
secondArgument.removeChild(newSecondArgument);
n.replaceChild(firstArgument,newFirstArgument);
n.replaceChild(secondArgument,newSecondArgument);
}else {
n.replaceChild(secondArgument,IR.string(secondArgument.getString()));
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();name!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.setSourceEncodedPosition(n.getSourcePosition()+FOR_QUOTE);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.setLength(current.getString().length());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
maybeAddToSymbolTable(fieldNameNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(fieldTypeNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
key=fieldTypeNode.getNext();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reporter.reportCodeChange();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(fieldTypeNode);
key=fieldTypeNode.getNext();
reporter.reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(fieldTypeNode);
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=n.getFirstChild().getNext().getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(Node fieldTypeNode=fieldNameNode.getFirstChild().getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=fieldNameNode.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope.declareSlot(ConcreteFunctionType.CALL_SLOT_NAME,n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope.declareSlot(ConcreteFunctionType.THIS_SLOT_NAME,n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope.declareSlot(ConcreteFunctionType.RETURN_SLOT_NAME,n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope.initForScopeRoot(n.getLastChild());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=objectLiteral.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();keyNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
next=fieldTypeNode.getNext();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();c!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.isNumber()){
return false;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!(n.getDouble()>=0)||Double.isInfinite(dindex)){
return false;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getDouble()!=(int)n.getDouble()){
return false;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=arg.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getNext()!=null){
if(right.getNext()!=null||!NodeUtil.isImmutableValue(right)){
return n;
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldNameNode.isArrayLit()||!fieldNameNode.getNext().getString().equals("join")){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getNext()!=null&&right.isString()&&",".equals(right.getString())){
n.removeChild(right);
reportCodeChange();
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateNodeType(Token.SWITCH,n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateMinimumChildCount(n,1);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateExpression(n.getFirstChild());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(PROPERTY_CHECKING_UNION_SIZE>1){
violation("Expected at most 1 \'default\' in switch but was "+defaults,n);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(NodeUtil.isAssignmentOp(fieldNameNode));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isName()){
return new Assign(fieldNameNode,current,hasType);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();arg!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=arg;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=args.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=arg;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(NodeUtil.getFunctionJSDocInfo(n)==null?null:fnInfo.getParameterType(sourceName)!=null&&NodeUtil.getFunctionJSDocInfo(n)==null?null:fnInfo.getParameterType(sourceName).isVarArgs()){
fieldTypeNode.putBooleanProp(Node.IS_VAR_ARGS_PARAM,true);
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n!=null&&value.isName()&&value.getString().equals(fieldTypeNode.getString())){
return true;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
state.extractBeforeStatement=fieldTypeNode;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(NodeUtil.isGet(fieldNameNode));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
state.extractBeforeStatement=extractExpression(fieldNameNode.getFirstChild(),state.extractBeforeStatement);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldTypeNode.isBlock()||addingRoot.isScript());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldTypeNode.getFirstChild()==null||!addingRoot.getFirstChild().isScript());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=block.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null&&NodeUtil.isFunctionDeclaration(fieldTypeNode);fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();next!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();key!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope=traverseChildren(fieldNameNode,scope);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkNotNull(fieldTypeNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldTypeNode.getType()==Token.BLOCK);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode=child.getFirstChild();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=objLitNode.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();key!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=varNode.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();child!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_5/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
Timeout!
