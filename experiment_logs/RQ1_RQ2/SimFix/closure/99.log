=================================================
Project : closure_99	start : 19/09/02 18:14
Current failed test : com.google.javascript.jscomp.CheckGlobalThisTest::testInterface1 | 19/09/02 18:15
Mon Sep 02 18:15:51 EDT 2019 com.google.javascript.rhino.JSDocInfo,276

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
setFlag(value,MASK_CONSTRUCTOR);

Time : 19/09/02 18:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
setFlag(value,MASK_OVERRIDE);

Time : 19/09/02 18:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
setFlag(value,MASK_EXTERNS);

Time : 19/09/02 18:18
----------------------------------------
Mon Sep 02 18:19:57 EDT 2019 Mon Sep 02 18:19:57 EDT 2019 : com.google.javascript.rhino.JSDocInfo,277=>Find no block
Mon Sep 02 18:19:57 EDT 2019 com.google.javascript.rhino.JSDocInfoBuilder,677

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!hasAnySingletonTypeTags()&&!currentInfo.isConstructor()){
currentInfo.setConstructor(true);
populated=true;
return true;
}else {
return false;
}

Time : 19/09/02 18:20
----------------------------------------
Mon Sep 02 18:22:16 EDT 2019 com.google.javascript.rhino.JSDocInfoBuilder,679
Mon Sep 02 18:22:17 EDT 2019 com.google.javascript.rhino.JSDocInfoBuilder,680
Mon Sep 02 18:22:18 EDT 2019 com.google.javascript.rhino.JSDocInfoBuilder,681
Mon Sep 02 18:22:18 EDT 2019 com.google.javascript.jscomp.parsing.JsDocInfoParser,228
Mon Sep 02 18:23:34 EDT 2019 com.google.javascript.jscomp.parsing.JsDocInfoParser,237
Mon Sep 02 18:25:23 EDT 2019 com.google.javascript.jscomp.parsing.JsDocInfoParser,238
Mon Sep 02 18:27:40 EDT 2019 com.google.javascript.jscomp.parsing.IRFactory,913
Mon Sep 02 18:27:48 EDT 2019 com.google.javascript.rhino.JSDocInfo,365

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
return getFlag(MASK_INTERFACE);

Time : 19/09/02 18:28
----------------------------------------
Mon Sep 02 18:30:09 EDT 2019 com.google.javascript.jscomp.parsing.TypeSafeDispatcher,145
Mon Sep 02 18:32:21 EDT 2019 com.google.javascript.jscomp.CheckGlobalThis,102

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(jsDoc==null||(!jsDoc.isConstructor()&&!jsDoc.hasThisType())){
return false;
}

Time : 19/09/02 18:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(jsDoc!=null&&!jsDoc.hasThisType()){
return false;
}

Time : 19/09/02 18:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(jsDoc!=null&&!jsDoc.isConstructor()){
return false;
}

Time : 19/09/02 18:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.GETPROP){
JSDocInfo jsDoc=getFunctionJsDocInfo(n);
if(jsDoc!=null&&(jsDoc.isConstructor()||jsDoc.hasThisType())){
return false;
}
int pType=parent.getType();
if(!(pType==Token.BLOCK||pType==Token.SCRIPT||pType==Token.NAME||pType==Token.ASSIGN)){
return false;
}
}

Time : 19/09/02 18:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!n.getBooleanProp(Node.IS_NAMESPACE)){
return false;
}
if(n.getType()==Token.FUNCTION){
JSDocInfo jsDoc=getFunctionJsDocInfo(n);
if(jsDoc!=null&&(jsDoc.isConstructor()||jsDoc.hasThisType())){
return false;
}
int pType=parent.getType();
if(!(pType==Token.BLOCK||pType==Token.SCRIPT||pType==Token.NAME||pType==Token.ASSIGN)){
return false;
}
}

Time : 19/09/02 18:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!n.getBooleanProp(Node.IS_NAMESPACE)){
return false;
}
if(n.getType()==Token.EXPR_RESULT){
JSDocInfo jsDoc=getFunctionJsDocInfo(n);
if(jsDoc!=null&&(jsDoc.isConstructor()||jsDoc.hasThisType())){
return false;
}
int pType=parent.getType();
if(!(pType==Token.BLOCK||pType==Token.SCRIPT||pType==Token.NAME||pType==Token.ASSIGN)){
return false;
}
}

Time : 19/09/02 18:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.FUNCTION){
JSDocInfo jsDoc=getFunctionJsDocInfo(n);
if(jsDoc!=null&&(jsDoc.isConstructor()||jsDoc.hasThisType())){
return false;
}
int pType=n.getType();
if(!(pType==Token.BLOCK||pType==Token.SCRIPT||pType==Token.NAME||pType==Token.ASSIGN)){
return false;
}
}

Time : 19/09/02 18:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.GETPROP){
JSDocInfo jsDoc=getFunctionJsDocInfo(n);
if(jsDoc!=null&&(jsDoc.isConstructor()||jsDoc.hasThisType())){
return true;
}
int pType=parent.getType();
if(!(pType==Token.BLOCK||pType==Token.SCRIPT||pType==Token.NAME||pType==Token.ASSIGN)){
return false;
}
}

Time : 19/09/02 18:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.FUNCTION){
JSDocInfo jsDoc=getFunctionJsDocInfo(n);
if(jsDoc!=null&&(jsDoc.isConstructor()||jsDoc.hasThisType())){
return true;
}
int pType=n.getType();
if(!(pType==Token.BLOCK||pType==Token.SCRIPT||pType==Token.NAME||pType==Token.ASSIGN)){
return false;
}
}

Time : 19/09/02 18:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.GETPROP){
JSDocInfo jsDoc=getFunctionJsDocInfo(n);
if(jsDoc==null&&(jsDoc.isConstructor()||jsDoc.hasThisType())){
return false;
}
int pType=parent.getType();
if(!(pType==Token.BLOCK||pType==Token.SCRIPT||pType==Token.NAME||pType==Token.ASSIGN)){
return false;
}
}

Time : 19/09/02 18:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.GETPROP){
JSDocInfo jsDoc=getFunctionJsDocInfo(n);
if(jsDoc!=null&&(jsDoc.isConstructor()||jsDoc.hasThisType())){
return false;
}
int pType=n.getFirstChild().getType();
if(!(pType==Token.BLOCK||pType==Token.SCRIPT||pType==Token.NAME||pType==Token.ASSIGN)){
return false;
}
}

Time : 19/09/02 18:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.GETPROP){
JSDocInfo jsDoc=getFunctionJsDocInfo(n);
if(jsDoc!=null&&(jsDoc.isConstructor()||jsDoc.hasThisType())){
return false;
}
int pType=n.getType();
if(!(pType==Token.BLOCK||pType==Token.SCRIPT||pType==Token.NAME||pType==Token.ASSIGN)){
return false;
}
}

Time : 19/09/02 18:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.FUNCTION){
JSDocInfo jsDoc=getFunctionJsDocInfo(n);
if(jsDoc==null&&(jsDoc.isConstructor()||jsDoc.hasThisType())){
return false;
}
int pType=n.getType();
if(!(pType==Token.BLOCK||pType==Token.SCRIPT||pType==Token.NAME||pType==Token.ASSIGN)){
return false;
}
}

Time : 19/09/02 18:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.GETPROP){
JSDocInfo jsDoc=getFunctionJsDocInfo(n);
if(jsDoc==null&&(jsDoc.isConstructor()||jsDoc.hasThisType())){
return true;
}
int pType=parent.getType();
if(!(pType==Token.BLOCK||pType==Token.SCRIPT||pType==Token.NAME||pType==Token.ASSIGN)){
return false;
}
}

Time : 19/09/02 18:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.GETPROP){
JSDocInfo jsDoc=getFunctionJsDocInfo(n);
if(jsDoc!=null&&(jsDoc.isConstructor()||jsDoc.hasThisType())){
return true;
}
int pType=n.getFirstChild().getType();
if(!(pType==Token.BLOCK||pType==Token.SCRIPT||pType==Token.NAME||pType==Token.ASSIGN)){
return false;
}
}

Time : 19/09/02 18:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.GETPROP){
JSDocInfo jsDoc=getFunctionJsDocInfo(n);
if(jsDoc!=null&&(jsDoc.isConstructor()||jsDoc.hasThisType())){
return true;
}
int pType=n.getType();
if(!(pType==Token.BLOCK||pType==Token.SCRIPT||pType==Token.NAME||pType==Token.ASSIGN)){
return false;
}
}

Time : 19/09/02 18:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.FUNCTION){
JSDocInfo jsDoc=getFunctionJsDocInfo(n);
if(jsDoc==null&&(jsDoc.isConstructor()||jsDoc.hasThisType())){
return true;
}
int pType=n.getType();
if(!(pType==Token.BLOCK||pType==Token.SCRIPT||pType==Token.NAME||pType==Token.ASSIGN)){
return false;
}
}

Time : 19/09/02 18:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.GETPROP){
JSDocInfo jsDoc=getFunctionJsDocInfo(n);
if(jsDoc==null&&(jsDoc.isConstructor()||jsDoc.hasThisType())){
return false;
}
int pType=n.getFirstChild().getType();
if(!(pType==Token.BLOCK||pType==Token.SCRIPT||pType==Token.NAME||pType==Token.ASSIGN)){
return false;
}
}

Time : 19/09/02 18:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.GETPROP){
JSDocInfo jsDoc=getFunctionJsDocInfo(n);
if(jsDoc==null&&(jsDoc.isConstructor()||jsDoc.hasThisType())){
return false;
}
int pType=n.getType();
if(!(pType==Token.BLOCK||pType==Token.SCRIPT||pType==Token.NAME||pType==Token.ASSIGN)){
return false;
}
}

Time : 19/09/02 18:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.GETPROP){
JSDocInfo jsDoc=getFunctionJsDocInfo(n);
if(jsDoc==null&&(jsDoc.isConstructor()||jsDoc.hasThisType())){
return true;
}
int pType=n.getFirstChild().getType();
if(!(pType==Token.BLOCK||pType==Token.SCRIPT||pType==Token.NAME||pType==Token.ASSIGN)){
return false;
}
}

Time : 19/09/02 18:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.GETPROP){
JSDocInfo jsDoc=getFunctionJsDocInfo(n);
if(jsDoc==null&&(jsDoc.isConstructor()||jsDoc.hasThisType())){
return true;
}
int pType=n.getType();
if(!(pType==Token.BLOCK||pType==Token.SCRIPT||pType==Token.NAME||pType==Token.ASSIGN)){
return false;
}
}

Time : 19/09/02 18:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS){
JSDocInfo jsDoc=getFunctionJsDocInfo(n);
if(jsDoc!=null&&(jsDoc.isConstructor()||jsDoc.hasThisType())){
return false;
}
int pType=parent.getType();
if(!(pType==Token.BLOCK||pType==Token.SCRIPT||pType==Token.NAME||pType==Token.ASSIGN)){
return false;
}
}

Time : 19/09/02 18:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getParent().getType()==Token.FUNCTION){
JSDocInfo jsDoc=getFunctionJsDocInfo(n);
if(jsDoc!=null&&(jsDoc.isConstructor()||jsDoc.hasThisType())){
return false;
}
int pType=parent.getType();
if(!(pType==Token.BLOCK||pType==Token.SCRIPT||pType==Token.NAME||pType==Token.ASSIGN)){
return false;
}
}

Time : 19/09/02 19:00
----------------------------------------
Mon Sep 02 19:07:26 EDT 2019 com.google.javascript.jscomp.CheckGlobalThis,103
Mon Sep 02 19:07:26 EDT 2019 com.google.javascript.jscomp.JSError,187
Mon Sep 02 19:07:29 EDT 2019 com.google.javascript.jscomp.CheckGlobalThis,140

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.NAME&&shouldReportThis(n,parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.LP&&shouldReportThis(n,parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&NodeUtil.isAssignmentOp(parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.OBJECTLIT&&shouldReportThis(n,parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&NodeUtil.isExpressionNode(parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.ASSIGN&&shouldReportThis(n,parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getJSType()!=null&&shouldReportThis(n,parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&t.inGlobalScope()){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.DEC&&shouldReportThis(n,parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&parent.hasOneChild()){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.INSTANCEOF&&shouldReportThis(n,parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&NodeUtil.isVar(parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.COMMA&&shouldReportThis(n,parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&n.getNext().getString().equals("call")){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&n.hasChildren()){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&NodeUtil.isLhs(n,parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&NodeUtil.isFunctionExpression(n)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&NodeUtil.isFunction(n)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&NodeUtil.isGetProp(n)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.VAR&&shouldReportThis(n,parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&NodeUtil.isStatementBlock(n)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getJSDocInfo()!=null&&n.getJSDocInfo().isExterns()){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getJSDocInfo()!=null&&shouldReportThis(n,parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getJSDocInfo()!=null&&n.getJSDocInfo().isExterns()){
assignLhsChild.addChildToBack(n);
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getJSDocInfo()!=null&&shouldReportThis(n,parent)){
assignLhsChild.addChildToBack(n);
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n==null&&shouldReportThis(n,parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&NodeUtil.isControlStructure(n)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.BLOCK&&shouldReportThis(n,parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&n.isSyntheticBlock()){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&NodeUtil.isPrototypeProperty(parent.getFirstChild())){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&NodeUtil.isName(n)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent==null&&shouldReportThis(n,parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&compiler.hasHaltingErrors()){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent==null&&compiler.hasHaltingErrors()){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&NodeUtil.isFunctionExpression(parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 19:46
----------------------------------------
Mon Sep 02 19:47:52 EDT 2019 com.google.javascript.jscomp.NodeTraversal,640
Mon Sep 02 19:48:44 EDT 2019 com.google.javascript.jscomp.parsing.IRFactory,458
Mon Sep 02 19:48:46 EDT 2019 com.google.javascript.jscomp.parsing.TypeSafeDispatcher,232
Mon Sep 02 19:51:34 EDT 2019 com.google.javascript.jscomp.PrepareAst,173
Timeout time : 19/09/02 19:55
Current failed test : com.google.javascript.jscomp.CheckGlobalThisTest::testMethod4 | 19/09/02 19:55
Mon Sep 02 19:56:29 EDT 2019 com.google.javascript.rhino.JSDocInfo,276
Mon Sep 02 19:57:56 EDT 2019 Mon Sep 02 19:57:56 EDT 2019 : com.google.javascript.rhino.JSDocInfo,277=>Find no block
Mon Sep 02 19:57:57 EDT 2019 com.google.javascript.rhino.JSDocInfoBuilder,677
Mon Sep 02 19:59:19 EDT 2019 com.google.javascript.rhino.JSDocInfoBuilder,679
Mon Sep 02 19:59:19 EDT 2019 com.google.javascript.rhino.JSDocInfoBuilder,680
Mon Sep 02 19:59:20 EDT 2019 com.google.javascript.rhino.JSDocInfoBuilder,681
Mon Sep 02 19:59:21 EDT 2019 com.google.javascript.jscomp.parsing.JsDocInfoParser,228
Mon Sep 02 20:00:31 EDT 2019 com.google.javascript.jscomp.parsing.JsDocInfoParser,237
Mon Sep 02 20:02:17 EDT 2019 com.google.javascript.jscomp.parsing.JsDocInfoParser,238
Mon Sep 02 20:04:34 EDT 2019 com.google.javascript.jscomp.parsing.IRFactory,913
Mon Sep 02 20:04:41 EDT 2019 com.google.javascript.rhino.JSDocInfo,365
Mon Sep 02 20:06:12 EDT 2019 com.google.javascript.jscomp.parsing.TypeSafeDispatcher,145
Mon Sep 02 20:08:21 EDT 2019 com.google.javascript.jscomp.CheckGlobalThis,102

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(jsDoc==null||(!jsDoc.isConstructor()&&!jsDoc.hasThisType())){
return false;
}

Time : 19/09/02 20:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.ASSIGN){
JSDocInfo jsDoc=getFunctionJsDocInfo(n);
if(jsDoc!=null&&(jsDoc.isConstructor()||jsDoc.hasThisType())){
return false;
}
int pType=parent.getType();
if(!(pType==Token.BLOCK||pType==Token.SCRIPT||pType==Token.NAME||pType==Token.ASSIGN)){
return false;
}
}

Time : 19/09/02 20:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!n.getBooleanProp(Node.IS_NAMESPACE)){
return false;
}
if(n.getType()==Token.FUNCTION){
JSDocInfo jsDoc=getFunctionJsDocInfo(n);
if(jsDoc!=null&&(jsDoc.isConstructor()||jsDoc.hasThisType())){
return false;
}
int pType=parent.getType();
if(!(pType==Token.BLOCK||pType==Token.SCRIPT||pType==Token.NAME||pType==Token.ASSIGN)){
return false;
}
}

Time : 19/09/02 20:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!n.getBooleanProp(Node.IS_NAMESPACE)){
return false;
}
if(n.getType()==Token.EXPR_RESULT){
JSDocInfo jsDoc=getFunctionJsDocInfo(n);
if(jsDoc!=null&&(jsDoc.isConstructor()||jsDoc.hasThisType())){
return false;
}
int pType=parent.getType();
if(!(pType==Token.BLOCK||pType==Token.SCRIPT||pType==Token.NAME||pType==Token.ASSIGN)){
return false;
}
}

Time : 19/09/02 20:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.FUNCTION){
JSDocInfo jsDoc=getFunctionJsDocInfo(n);
if(jsDoc!=null&&(jsDoc.isConstructor()||jsDoc.hasThisType())){
return false;
}
int pType=n.getType();
if(!(pType==Token.BLOCK||pType==Token.SCRIPT||pType==Token.NAME||pType==Token.ASSIGN)){
return false;
}
}

Time : 19/09/02 20:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.FUNCTION){
JSDocInfo jsDoc=getFunctionJsDocInfo(n);
if(jsDoc!=null&&(jsDoc.isConstructor()||jsDoc.hasThisType())){
return true;
}
int pType=n.getType();
if(!(pType==Token.BLOCK||pType==Token.SCRIPT||pType==Token.NAME||pType==Token.ASSIGN)){
return false;
}
}

Time : 19/09/02 20:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.GETPROP){
JSDocInfo jsDoc=getFunctionJsDocInfo(n);
if(jsDoc!=null&&(jsDoc.isConstructor()||jsDoc.hasThisType())){
return false;
}
int pType=n.getFirstChild().getType();
if(!(pType==Token.BLOCK||pType==Token.SCRIPT||pType==Token.NAME||pType==Token.ASSIGN)){
return false;
}
}

Time : 19/09/02 20:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.GETPROP){
JSDocInfo jsDoc=getFunctionJsDocInfo(n);
if(jsDoc!=null&&(jsDoc.isConstructor()||jsDoc.hasThisType())){
return false;
}
int pType=n.getType();
if(!(pType==Token.BLOCK||pType==Token.SCRIPT||pType==Token.NAME||pType==Token.ASSIGN)){
return false;
}
}

Time : 19/09/02 20:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.GETPROP){
JSDocInfo jsDoc=getFunctionJsDocInfo(n);
if(jsDoc!=null&&(jsDoc.isConstructor()||jsDoc.hasThisType())){
return true;
}
int pType=n.getFirstChild().getType();
if(!(pType==Token.BLOCK||pType==Token.SCRIPT||pType==Token.NAME||pType==Token.ASSIGN)){
return false;
}
}

Time : 19/09/02 20:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.GETPROP){
JSDocInfo jsDoc=getFunctionJsDocInfo(n);
if(jsDoc!=null&&(jsDoc.isConstructor()||jsDoc.hasThisType())){
return true;
}
int pType=n.getType();
if(!(pType==Token.BLOCK||pType==Token.SCRIPT||pType==Token.NAME||pType==Token.ASSIGN)){
return false;
}
}

Time : 19/09/02 20:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS){
JSDocInfo jsDoc=getFunctionJsDocInfo(n);
if(jsDoc!=null&&(jsDoc.isConstructor()||jsDoc.hasThisType())){
return false;
}
int pType=parent.getType();
if(!(pType==Token.BLOCK||pType==Token.SCRIPT||pType==Token.NAME||pType==Token.ASSIGN)){
return false;
}
}

Time : 19/09/02 20:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getParent().getType()==Token.FUNCTION){
JSDocInfo jsDoc=getFunctionJsDocInfo(n);
if(jsDoc!=null&&(jsDoc.isConstructor()||jsDoc.hasThisType())){
return false;
}
int pType=parent.getType();
if(!(pType==Token.BLOCK||pType==Token.SCRIPT||pType==Token.NAME||pType==Token.ASSIGN)){
return false;
}
}

Time : 19/09/02 20:25
----------------------------------------
Mon Sep 02 20:33:22 EDT 2019 com.google.javascript.jscomp.CheckGlobalThis,103
Mon Sep 02 20:33:22 EDT 2019 com.google.javascript.jscomp.JSError,187
Mon Sep 02 20:33:25 EDT 2019 com.google.javascript.jscomp.CheckGlobalThis,140

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.LP&&shouldReportThis(n,parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 20:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&NodeUtil.isAssignmentOp(parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 20:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.OBJECTLIT&&shouldReportThis(n,parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 20:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&NodeUtil.isExpressionNode(parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 20:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.ASSIGN&&shouldReportThis(n,parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 20:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getJSType()!=null&&shouldReportThis(n,parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 20:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&t.inGlobalScope()){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 20:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.DEC&&shouldReportThis(n,parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 20:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&parent.hasOneChild()){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 20:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.INSTANCEOF&&shouldReportThis(n,parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 20:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&NodeUtil.isVar(parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 20:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.COMMA&&shouldReportThis(n,parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 20:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&n.getNext().getString().equals("call")){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 20:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&n.hasChildren()){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 20:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&NodeUtil.isLhs(n,parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 20:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&NodeUtil.isFunctionExpression(n)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 20:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&NodeUtil.isFunction(n)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 20:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&NodeUtil.isGetProp(n)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 20:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.VAR&&shouldReportThis(n,parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 20:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&NodeUtil.isStatementBlock(n)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 20:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getJSDocInfo()!=null&&n.getJSDocInfo().isExterns()){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 20:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getJSDocInfo()!=null&&shouldReportThis(n,parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 20:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getJSDocInfo()!=null&&n.getJSDocInfo().isExterns()){
assignLhsChild.addChildToBack(n);
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 21:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getJSDocInfo()!=null&&shouldReportThis(n,parent)){
assignLhsChild.addChildToBack(n);
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 21:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n==null&&shouldReportThis(n,parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 21:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&NodeUtil.isControlStructure(n)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 21:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.BLOCK&&shouldReportThis(n,parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 21:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&n.isSyntheticBlock()){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 21:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&NodeUtil.isPrototypeProperty(parent.getFirstChild())){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 21:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&NodeUtil.isName(n)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 21:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent==null&&shouldReportThis(n,parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 21:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&compiler.hasHaltingErrors()){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 21:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent==null&&compiler.hasHaltingErrors()){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 21:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.THIS&&NodeUtil.isFunctionExpression(parent)){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 21:11
----------------------------------------
Mon Sep 02 21:12:38 EDT 2019 com.google.javascript.jscomp.NodeTraversal,640
Mon Sep 02 21:13:30 EDT 2019 com.google.javascript.jscomp.parsing.IRFactory,458
Mon Sep 02 21:13:33 EDT 2019 com.google.javascript.jscomp.parsing.TypeSafeDispatcher,232
Mon Sep 02 21:16:21 EDT 2019 com.google.javascript.jscomp.PrepareAst,173
Timeout time : 19/09/02 21:36
Current failed test : com.google.javascript.jscomp.CheckGlobalThisTest::testPropertyOfMethod | 19/09/02 21:36
Mon Sep 02 21:37:05 EDT 2019 com.google.javascript.rhino.JSDocInfo,276
Mon Sep 02 21:38:33 EDT 2019 Mon Sep 02 21:38:33 EDT 2019 : com.google.javascript.rhino.JSDocInfo,277=>Find no block
Mon Sep 02 21:38:33 EDT 2019 com.google.javascript.rhino.JSDocInfoBuilder,677
Mon Sep 02 21:39:55 EDT 2019 com.google.javascript.rhino.JSDocInfoBuilder,679
Mon Sep 02 21:39:56 EDT 2019 com.google.javascript.rhino.JSDocInfoBuilder,680
Mon Sep 02 21:39:56 EDT 2019 com.google.javascript.rhino.JSDocInfoBuilder,681
Mon Sep 02 21:39:57 EDT 2019 com.google.javascript.jscomp.parsing.JsDocInfoParser,228
Mon Sep 02 21:41:06 EDT 2019 com.google.javascript.jscomp.parsing.JsDocInfoParser,237
Mon Sep 02 21:42:50 EDT 2019 com.google.javascript.jscomp.parsing.JsDocInfoParser,238
Mon Sep 02 21:45:01 EDT 2019 com.google.javascript.jscomp.parsing.IRFactory,913
Mon Sep 02 21:45:07 EDT 2019 com.google.javascript.rhino.JSDocInfo,365
Mon Sep 02 21:46:34 EDT 2019 com.google.javascript.jscomp.parsing.TypeSafeDispatcher,145
Mon Sep 02 21:48:37 EDT 2019 com.google.javascript.jscomp.CheckGlobalThis,102
Mon Sep 02 22:03:11 EDT 2019 com.google.javascript.jscomp.CheckGlobalThis,103
Mon Sep 02 22:03:12 EDT 2019 com.google.javascript.jscomp.JSError,187
Mon Sep 02 22:03:14 EDT 2019 com.google.javascript.jscomp.CheckGlobalThis,140

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()==Token.BLOCK&&n.isSyntheticBlock()){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 22:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent==null||compiler.hasHaltingErrors()){
compiler.report(t.makeError(n,level,GLOBAL_THIS));
}

Time : 19/09/02 22:14
----------------------------------------
Mon Sep 02 22:16:19 EDT 2019 com.google.javascript.jscomp.NodeTraversal,640
Mon Sep 02 22:17:10 EDT 2019 com.google.javascript.jscomp.parsing.IRFactory,458
Mon Sep 02 22:17:13 EDT 2019 com.google.javascript.jscomp.parsing.TypeSafeDispatcher,232
Mon Sep 02 22:20:00 EDT 2019 com.google.javascript.jscomp.PrepareAst,173
Mon Sep 02 22:57:51 EDT 2019 com.google.javascript.jscomp.CheckGlobalThis,89
Mon Sep 02 22:57:52 EDT 2019 com.google.javascript.jscomp.CheckGlobalThis,90
Mon Sep 02 22:57:52 EDT 2019 com.google.javascript.jscomp.CheckGlobalThis,168
Timeout time : 19/09/02 23:17
