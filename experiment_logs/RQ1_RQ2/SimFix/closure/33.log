=================================================
Project : closure_33	start : 19/09/02 16:00
Current failed test : com.google.javascript.jscomp.TypeCheckTest::testIssue700 | 19/09/02 16:01
Mon Sep 02 16:19:35 EDT 2019 com.google.javascript.rhino.jstype.RecordType,261

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!propB.restrictByNotNullOrUndefined().isSubtype(propB)){
return false;
}

Time : 19/09/02 16:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!propB.isSubtype(propB)){
return false;
}

Time : 19/09/02 16:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!propA.isSubtype(propB)){
return true;
}

Time : 19/09/02 16:35
----------------------------------------
Mon Sep 02 16:40:33 EDT 2019 com.google.javascript.rhino.jstype.PrototypeObjectType,573
Mon Sep 02 16:41:09 EDT 2019 Mon Sep 02 16:41:09 EDT 2019 : com.google.javascript.rhino.jstype.RecordType,116=>Find no block
Mon Sep 02 16:41:14 EDT 2019 com.google.javascript.rhino.jstype.RecordType,117
Mon Sep 02 16:47:59 EDT 2019 com.google.javascript.rhino.jstype.PrototypeObjectType,568

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!isPropertyTypeDeclared(prop)){
JSType typeToInfer=propType;
if(!hasProperty(prop)){
typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);
}
defineInferredProperty(prop,propType,null);
}

Time : 19/09/02 16:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(String prop : constraintObj.getOwnPropertyNames()){
JSType propType=implicitPrototypeFallback.toObjectType().getPropertyType(prop);
if(!isPropertyTypeDeclared(prop)){
JSType typeToInfer=propType;
if(!hasProperty(prop)){
typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);
}
defineInferredProperty(prop,typeToInfer,null);
}
}

Time : 19/09/02 16:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(String prop : constraintObj.getOwnPropertyNames()){
JSType propType=implicitPrototypeFallback.getPropertyType(prop);
if(!isPropertyTypeDeclared(prop)){
JSType typeToInfer=propType;
if(!hasProperty(prop)){
typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);
}
defineInferredProperty(prop,typeToInfer,null);
}
}

Time : 19/09/02 17:00
----------------------------------------
Mon Sep 02 17:08:38 EDT 2019 com.google.javascript.rhino.jstype.PrototypeObjectType,569
Mon Sep 02 17:08:43 EDT 2019 com.google.javascript.rhino.jstype.PrototypeObjectType,570
Mon Sep 02 17:08:48 EDT 2019 com.google.javascript.rhino.jstype.PrototypeObjectType,571
Mon Sep 02 17:08:54 EDT 2019 com.google.javascript.rhino.jstype.PrototypeObjectType,572
Mon Sep 02 17:08:58 EDT 2019 com.google.javascript.rhino.jstype.PrototypeObjectType,576
Mon Sep 02 17:09:02 EDT 2019 Mon Sep 02 17:09:02 EDT 2019 : com.google.javascript.rhino.jstype.PrototypeObjectType,578=>Find no block
Mon Sep 02 17:09:07 EDT 2019 com.google.javascript.rhino.jstype.RecordType,112
Mon Sep 02 17:09:12 EDT 2019 com.google.javascript.rhino.jstype.RecordType,113
Mon Sep 02 17:09:17 EDT 2019 com.google.javascript.rhino.jstype.RecordType,215
Mon Sep 02 17:11:44 EDT 2019 com.google.javascript.jscomp.parsing.JsDocInfoParser,2107
Mon Sep 02 17:24:54 EDT 2019 com.google.javascript.jscomp.parsing.JsDocInfoParser,2110

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
next();
fieldTypeList=parseTypeExpression(token);
skipEOLs();
token=next();

Time : 19/09/02 17:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
next();
fieldTypeList=parseTypeExpression(token);
if(fieldTypeList==null){
return null;
}
skipEOLs();
token=next();

Time : 19/09/02 17:44
----------------------------------------
Mon Sep 02 17:51:01 EDT 2019 com.google.javascript.jscomp.parsing.JsDocInfoParser,2111
Mon Sep 02 17:51:05 EDT 2019 com.google.javascript.jscomp.parsing.JsDocInfoParser,2112

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldType.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

Time : 19/09/02 18:47
----------------------------------------
Mon Sep 02 19:22:13 EDT 2019 com.google.javascript.rhino.jstype.RecordType,260
Mon Sep 02 19:22:19 EDT 2019 com.google.javascript.rhino.jstype.RecordType,107
Mon Sep 02 19:27:37 EDT 2019 com.google.javascript.rhino.jstype.RecordType,108
Mon Sep 02 19:33:06 EDT 2019 com.google.javascript.rhino.jstype.RecordType,109
Mon Sep 02 19:35:39 EDT 2019 com.google.javascript.rhino.jstype.RecordType,209
Mon Sep 02 19:35:54 EDT 2019 com.google.javascript.rhino.jstype.PrototypeObjectType,375
Mon Sep 02 19:49:35 EDT 2019 com.google.javascript.jscomp.TypeCheck,405
Mon Sep 02 19:49:47 EDT 2019 com.google.javascript.jscomp.TypeCheck,406
Mon Sep 02 19:49:52 EDT 2019 com.google.javascript.jscomp.TypeCheck,408
Mon Sep 02 19:49:55 EDT 2019 com.google.javascript.jscomp.TypeInference,723
Timeout time : 19/09/02 21:19
