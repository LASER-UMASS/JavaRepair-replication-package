=================================================
Project : closure_17	start : 19/09/02 16:00
Current failed test : com.google.javascript.jscomp.TypeCheckTest::testIssue688 | 19/09/02 16:01
Mon Sep 02 16:19:45 EDT 2019 com.google.javascript.rhino.jstype.PrototypeObjectType,375
Mon Sep 02 16:36:30 EDT 2019 com.google.javascript.jscomp.BasicErrorManager,161
Mon Sep 02 16:49:04 EDT 2019 com.google.javascript.jscomp.TypedScopeCreator,1295

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(rValue.getType()==Token.EQ||rValue.getType()==Token.NE){
return rValue.getJSType();
}else if(rValue.isOr()){
Node firstClause=rValue.getFirstChild();
Node secondClause=firstClause.getNext();
boolean namesMatch=firstClause.isName()&&lValue.isName();
if(namesMatch&&secondClause.getJSType()!=null&&!secondClause.getJSType().isUnknownType()){
return secondClause.getJSType();
}
}

Time : 19/09/02 18:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(rValue.getJSType()==null&&!rValue.getJSType().isUnknownType()){
return rValue.getJSType();
}else if(rValue.isOr()){
Node firstClause=rValue.getFirstChild();
Node secondClause=firstClause.getNext();
boolean namesMatch=firstClause.isName()&&lValue.isName();
if(namesMatch&&secondClause.getJSType()!=null&&!secondClause.getJSType().isUnknownType()){
return secondClause.getJSType();
}
}

Time : 19/09/02 18:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(rValue.getType()==Token.EQ&&!rValue.getJSType().isUnknownType()){
return rValue.getJSType();
}else if(rValue.isOr()){
Node firstClause=rValue.getFirstChild();
Node secondClause=firstClause.getNext();
boolean namesMatch=firstClause.isName()&&lValue.isName();
if(namesMatch&&secondClause.getJSType()!=null&&!secondClause.getJSType().isUnknownType()){
return secondClause.getJSType();
}
}

Time : 19/09/02 18:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(rValue.getJSType()!=null&&rValue.getType()==Token.NE){
return rValue.getJSType();
}else if(rValue.isOr()){
Node firstClause=rValue.getFirstChild();
Node secondClause=firstClause.getNext();
boolean namesMatch=firstClause.isName()&&lValue.isName();
if(namesMatch&&secondClause.getJSType()!=null&&!secondClause.getJSType().isUnknownType()){
return secondClause.getJSType();
}
}

Time : 19/09/02 18:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(rValue.getJSType()==null&&rValue.getType()==Token.NE){
return rValue.getJSType();
}else if(rValue.isOr()){
Node firstClause=rValue.getFirstChild();
Node secondClause=firstClause.getNext();
boolean namesMatch=firstClause.isName()&&lValue.isName();
if(namesMatch&&secondClause.getJSType()!=null&&!secondClause.getJSType().isUnknownType()){
return secondClause.getJSType();
}
}

Time : 19/09/02 19:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(rValue.getType()==Token.EQ&&rValue.getType()==Token.NE){
return rValue.getJSType();
}else if(rValue.isOr()){
Node firstClause=rValue.getFirstChild();
Node secondClause=firstClause.getNext();
boolean namesMatch=firstClause.isName()&&lValue.isName();
if(namesMatch&&secondClause.getJSType()!=null&&!secondClause.getJSType().isUnknownType()){
return secondClause.getJSType();
}
}

Time : 19/09/02 19:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(rValue.getNext()!=null&&rValue.getNext().getNext()!=null){
return rValue.getJSType();
}else if(rValue.isOr()){
Node firstClause=rValue.getFirstChild();
Node secondClause=firstClause.getNext();
boolean namesMatch=firstClause.isName()&&lValue.isName();
if(namesMatch&&secondClause.getJSType()!=null&&!secondClause.getJSType().isUnknownType()){
return secondClause.getJSType();
}
}

Time : 19/09/02 19:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(rValue.getNext()!=null&&!rValue.getJSType().isUnknownType()){
return rValue.getJSType();
}else if(rValue.isOr()){
Node firstClause=rValue.getFirstChild();
Node secondClause=firstClause.getNext();
boolean namesMatch=firstClause.isName()&&lValue.isName();
if(namesMatch&&secondClause.getJSType()!=null&&!secondClause.getJSType().isUnknownType()){
return secondClause.getJSType();
}
}

Time : 19/09/02 19:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(rValue.getJSType()!=null&&rValue.getNext()!=null){
return rValue.getJSType();
}else if(rValue.isOr()){
Node firstClause=rValue.getFirstChild();
Node secondClause=firstClause.getNext();
boolean namesMatch=firstClause.isName()&&lValue.isName();
if(namesMatch&&secondClause.getJSType()!=null&&!secondClause.getJSType().isUnknownType()){
return secondClause.getJSType();
}
}

Time : 19/09/02 19:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(rValue.getJSType()!=null&&!rValue.hasChildren()){
return rValue.getJSType();
}else if(rValue.isOr()){
Node firstClause=rValue.getFirstChild();
Node secondClause=firstClause.getNext();
boolean namesMatch=firstClause.isName()&&lValue.isName();
if(namesMatch&&secondClause.getJSType()!=null&&!secondClause.getJSType().isUnknownType()){
return secondClause.getJSType();
}
}

Time : 19/09/02 19:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(rValue.getJSType()!=null&&!scope.isGlobal()){
return rValue.getJSType();
}else if(rValue.isOr()){
Node firstClause=rValue.getFirstChild();
Node secondClause=firstClause.getNext();
boolean namesMatch=firstClause.isName()&&lValue.isName();
if(namesMatch&&secondClause.getJSType()!=null&&!secondClause.getJSType().isUnknownType()){
return secondClause.getJSType();
}
}

Time : 19/09/02 19:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(rValue.getJSType()!=null&&rValue.getFirstChild()==lValue){
return rValue.getJSType();
}else if(rValue.isOr()){
Node firstClause=rValue.getFirstChild();
Node secondClause=firstClause.getNext();
boolean namesMatch=firstClause.isName()&&lValue.isName();
if(namesMatch&&secondClause.getJSType()!=null&&!secondClause.getJSType().isUnknownType()){
return secondClause.getJSType();
}
}

Time : 19/09/02 19:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(rValue.getType()==Token.THIS||rValue.getType()==Token.NEW){
return rValue.getJSType();
}else if(rValue.isOr()){
Node firstClause=rValue.getFirstChild();
Node secondClause=firstClause.getNext();
boolean namesMatch=firstClause.isName()&&lValue.isName();
if(namesMatch&&secondClause.getJSType()!=null&&!secondClause.getJSType().isUnknownType()){
return secondClause.getJSType();
}
}

Time : 19/09/02 20:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(rValue.getType()==Token.THIS&&!rValue.getJSType().isUnknownType()){
return rValue.getJSType();
}else if(rValue.isOr()){
Node firstClause=rValue.getFirstChild();
Node secondClause=firstClause.getNext();
boolean namesMatch=firstClause.isName()&&lValue.isName();
if(namesMatch&&secondClause.getJSType()!=null&&!secondClause.getJSType().isUnknownType()){
return secondClause.getJSType();
}
}

Time : 19/09/02 20:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(rValue.getJSType()!=null&&rValue.getType()==Token.NEW){
return rValue.getJSType();
}else if(rValue.isOr()){
Node firstClause=rValue.getFirstChild();
Node secondClause=firstClause.getNext();
boolean namesMatch=firstClause.isName()&&lValue.isName();
if(namesMatch&&secondClause.getJSType()!=null&&!secondClause.getJSType().isUnknownType()){
return secondClause.getJSType();
}
}

Time : 19/09/02 20:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(rValue.getJSType()==null&&rValue.getType()==Token.NEW){
return rValue.getJSType();
}else if(rValue.isOr()){
Node firstClause=rValue.getFirstChild();
Node secondClause=firstClause.getNext();
boolean namesMatch=firstClause.isName()&&lValue.isName();
if(namesMatch&&secondClause.getJSType()!=null&&!secondClause.getJSType().isUnknownType()){
return secondClause.getJSType();
}
}

Time : 19/09/02 20:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(rValue.getType()==Token.THIS&&rValue.getType()==Token.NEW){
return rValue.getJSType();
}else if(rValue.isOr()){
Node firstClause=rValue.getFirstChild();
Node secondClause=firstClause.getNext();
boolean namesMatch=firstClause.isName()&&lValue.isName();
if(namesMatch&&secondClause.getJSType()!=null&&!secondClause.getJSType().isUnknownType()){
return secondClause.getJSType();
}
}

Time : 19/09/02 20:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(rValue==null||rValue.getParent()==null){
return rValue.getJSType();
}else if(rValue.isOr()){
Node firstClause=rValue.getFirstChild();
Node secondClause=firstClause.getNext();
boolean namesMatch=firstClause.isName()&&lValue.isName();
if(namesMatch&&secondClause.getJSType()!=null&&!secondClause.getJSType().isUnknownType()){
return secondClause.getJSType();
}
}

Time : 19/09/02 20:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(rValue==null&&!rValue.getJSType().isUnknownType()){
return rValue.getJSType();
}else if(rValue.isOr()){
Node firstClause=rValue.getFirstChild();
Node secondClause=firstClause.getNext();
boolean namesMatch=firstClause.isName()&&lValue.isName();
if(namesMatch&&secondClause.getJSType()!=null&&!secondClause.getJSType().isUnknownType()){
return secondClause.getJSType();
}
}

Time : 19/09/02 20:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(rValue.getJSType()!=null&&rValue.getParent()==null){
return rValue.getJSType();
}else if(rValue.isOr()){
Node firstClause=rValue.getFirstChild();
Node secondClause=firstClause.getNext();
boolean namesMatch=firstClause.isName()&&lValue.isName();
if(namesMatch&&secondClause.getJSType()!=null&&!secondClause.getJSType().isUnknownType()){
return secondClause.getJSType();
}
}

Time : 19/09/02 20:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(rValue.getJSType()==null&&rValue.getParent()==null){
return rValue.getJSType();
}else if(rValue.isOr()){
Node firstClause=rValue.getFirstChild();
Node secondClause=firstClause.getNext();
boolean namesMatch=firstClause.isName()&&lValue.isName();
if(namesMatch&&secondClause.getJSType()!=null&&!secondClause.getJSType().isUnknownType()){
return secondClause.getJSType();
}
}

Time : 19/09/02 20:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(rValue==null&&rValue.getParent()==null){
return rValue.getJSType();
}else if(rValue.isOr()){
Node firstClause=rValue.getFirstChild();
Node secondClause=firstClause.getNext();
boolean namesMatch=firstClause.isName()&&lValue.isName();
if(namesMatch&&secondClause.getJSType()!=null&&!secondClause.getJSType().isUnknownType()){
return secondClause.getJSType();
}
}

Time : 19/09/02 20:50
----------------------------------------
Mon Sep 02 20:55:26 EDT 2019 com.google.javascript.jscomp.TypedScopeCreator,1291
Mon Sep 02 20:55:33 EDT 2019 com.google.javascript.rhino.jstype.PrototypeObjectType,374
Mon Sep 02 20:55:37 EDT 2019 com.google.javascript.rhino.jstype.PrototypeObjectType,378
Mon Sep 02 21:18:16 EDT 2019 com.google.javascript.rhino.jstype.PrototypeObjectType,379
Timeout time : 19/09/02 21:19
