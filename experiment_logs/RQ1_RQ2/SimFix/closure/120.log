=================================================
Project : closure_120	start : 19/09/02 18:48
Current failed test : com.google.javascript.jscomp.InlineVariablesTest::testExternalIssue1053 | 19/09/02 18:49
Mon Sep 02 19:09:19 EDT 2019 com.google.javascript.rhino.Node,1430
Mon Sep 02 19:09:30 EDT 2019 com.google.javascript.rhino.Node,1446
Mon Sep 02 19:09:38 EDT 2019 com.google.javascript.rhino.Node,1459
Mon Sep 02 19:09:47 EDT 2019 Mon Sep 02 19:09:47 EDT 2019 : com.google.javascript.rhino.Node,2194=>Find no block
Mon Sep 02 19:09:49 EDT 2019 com.google.javascript.rhino.Node,2195
Mon Sep 02 19:09:58 EDT 2019 com.google.javascript.rhino.Node,2196
Mon Sep 02 19:10:00 EDT 2019 Mon Sep 02 19:10:00 EDT 2019 : com.google.javascript.rhino.Node,2197=>Find no block
Mon Sep 02 19:10:02 EDT 2019 com.google.javascript.jscomp.InlineVariables,312

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(inlineAllStrings&&!isVarInlineForbidden(candidate.alias)){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}

Time : 19/09/02 19:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(declaration.getBasicBlock()!=declaration.getBasicBlock()&&!isVarInlineForbidden(candidate.alias)){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}

Time : 19/09/02 19:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!staleVars.contains(candidate.alias)&&declaration.getBasicBlock()!=declaration.getBasicBlock()){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}

Time : 19/09/02 19:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(declaration.getBasicBlock()!=declaration.getBasicBlock()&&declaration.getBasicBlock()!=declaration.getBasicBlock()){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}

Time : 19/09/02 19:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nameNode.getJSDocInfo()!=null&&!isVarInlineForbidden(candidate.alias)){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}

Time : 19/09/02 19:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nameNode==null){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}

Time : 19/09/02 19:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nameNode==null&&!isVarInlineForbidden(candidate.alias)){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}

Time : 19/09/02 19:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!staleVars.contains(candidate.alias)&&nameNode.getBooleanProp(Node.FREE_CALL)&&NodeUtil.isGet(nameNode)){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}

Time : 19/09/02 19:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(maybeModifiedArguments){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}

Time : 19/09/02 19:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(maybeModifiedArguments&&!isVarInlineForbidden(candidate.alias)){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}

Time : 19/09/02 19:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((nameNode.getJSType()!=null)&&!nameNode.getJSType().isUnknownType()){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}

Time : 19/09/02 19:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((nameNode.getJSType()!=null)&&!isVarInlineForbidden(candidate.alias)){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}

Time : 19/09/02 20:02
----------------------------------------
Mon Sep 02 20:08:41 EDT 2019 com.google.javascript.jscomp.InlineVariables,313
Mon Sep 02 20:08:44 EDT 2019 com.google.javascript.jscomp.InlineVariables,314
Mon Sep 02 20:08:45 EDT 2019 com.google.javascript.jscomp.InlineVariables,315
Mon Sep 02 20:08:47 EDT 2019 com.google.javascript.jscomp.InlineVariables,318
Mon Sep 02 20:08:49 EDT 2019 com.google.javascript.jscomp.InlineVariables,308

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(aliasCandidates.containsKey(nameNode.getQualifiedName())){
AliasCandidate candidate=aliasCandidates.get(nameNode);
if(!staleVars.contains(candidate.alias)&&!isVarInlineForbidden(candidate.alias)){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}
}

Time : 19/09/02 20:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Preconditions.checkNotNull(nameNode.getQualifiedName());
if(aliasCandidates.containsKey(nameNode.getQualifiedName())){
AliasCandidate candidate=aliasCandidates.get(nameNode);
if(!staleVars.contains(candidate.alias)&&!isVarInlineForbidden(candidate.alias)){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}
}

Time : 19/09/02 20:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(aliasCandidates.containsKey(v)){
AliasCandidate candidate=aliasCandidates.get(nameNode);
if(!staleVars.contains(candidate.alias)&&!isVarInlineForbidden(candidate.alias)){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}
}

Time : 19/09/02 20:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(aliasCandidates.containsKey(refCount)){
AliasCandidate candidate=aliasCandidates.get(nameNode);
if(!staleVars.contains(candidate.alias)&&!isVarInlineForbidden(candidate.alias)){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}
}

Time : 19/09/02 20:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!nameNode.isThis()){
return ;
}
if(aliasCandidates.containsKey(nameNode)){
AliasCandidate candidate=aliasCandidates.get(nameNode);
if(!staleVars.contains(candidate.alias)&&!isVarInlineForbidden(candidate.alias)){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}
}

Time : 19/09/02 20:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!nameNode.isCall()){
return ;
}
if(aliasCandidates.containsKey(nameNode)){
AliasCandidate candidate=aliasCandidates.get(nameNode);
if(!staleVars.contains(candidate.alias)&&!isVarInlineForbidden(candidate.alias)){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}
}

Time : 19/09/02 20:44
----------------------------------------
Mon Sep 02 20:48:11 EDT 2019 com.google.javascript.jscomp.InlineVariables,309
Mon Sep 02 20:48:12 EDT 2019 com.google.javascript.jscomp.InlineVariables,651
Mon Sep 02 21:07:16 EDT 2019 com.google.javascript.jscomp.InlineVariables,652
Mon Sep 02 21:07:17 EDT 2019 com.google.javascript.jscomp.InlineVariables,696
Mon Sep 02 21:17:11 EDT 2019 com.google.javascript.jscomp.InlineVariables,697
Mon Sep 02 21:17:11 EDT 2019 com.google.javascript.jscomp.NodeIterators,283
Mon Sep 02 21:24:44 EDT 2019 com.google.javascript.jscomp.NodeIterators,284
Mon Sep 02 21:24:45 EDT 2019 com.google.javascript.jscomp.ReferenceCollectingCallback,711
Mon Sep 02 21:24:48 EDT 2019 com.google.javascript.jscomp.InlineVariables,701
Mon Sep 02 21:24:52 EDT 2019 com.google.javascript.jscomp.ReferenceCollectingCallback,399

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isInitializingDeclarationAt(1)){
return references.get(1);
}

Time : 19/09/02 21:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isInitializingAssignmentAt(1)){
return references.get(0);
}

Time : 19/09/02 21:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isInitializingDeclarationAt(1)){
return references.get(0);
}

Time : 19/09/02 21:30
----------------------------------------
Mon Sep 02 21:33:06 EDT 2019 com.google.javascript.jscomp.ReferenceCollectingCallback,381
Mon Sep 02 21:33:22 EDT 2019 com.google.javascript.jscomp.InlineVariables,625
Mon Sep 02 21:50:17 EDT 2019 com.google.javascript.jscomp.ReferenceCollectingCallback,328
Mon Sep 02 21:51:16 EDT 2019 com.google.javascript.jscomp.NodeUtil,2185
Mon Sep 02 21:51:25 EDT 2019 com.google.javascript.jscomp.InlineVariables,659
Mon Sep 02 22:08:03 EDT 2019 com.google.javascript.jscomp.InlineVariables,535
Mon Sep 02 22:10:16 EDT 2019 com.google.javascript.jscomp.ReferenceCollectingCallback,609
Mon Sep 02 22:19:52 EDT 2019 com.google.javascript.jscomp.InlineVariables,601
Mon Sep 02 22:39:16 EDT 2019 com.google.javascript.jscomp.InlineVariables,383
Mon Sep 02 23:00:14 EDT 2019 com.google.javascript.jscomp.InlineVariables,384

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(v==null||!v.isGlobal()){
return ;
}
for(int i=1;i<refSet.size();i++){
inlineValue(v,refSet.get(i),value.cloneTree());
}

Time : 19/09/02 23:09
----------------------------------------
Mon Sep 02 23:12:14 EDT 2019 com.google.javascript.jscomp.InlineVariables,385
Mon Sep 02 23:12:14 EDT 2019 com.google.javascript.jscomp.InlineVariables,387
Mon Sep 02 23:12:15 EDT 2019 Mon Sep 02 23:12:15 EDT 2019 : com.google.javascript.jscomp.InlineVariables,388=>Find no block
Mon Sep 02 23:12:16 EDT 2019 com.google.javascript.jscomp.NodeUtil,1607
Timeout time : 19/09/03 00:09
