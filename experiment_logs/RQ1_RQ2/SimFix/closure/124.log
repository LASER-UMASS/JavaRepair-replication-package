=================================================
Project : closure_124	start : 19/09/02 18:47
Current failed test : com.google.javascript.jscomp.ExploitAssignsTest::testIssue1017 | 19/09/02 18:47
Mon Sep 02 18:48:56 EDT 2019 com.google.javascript.rhino.Node,1428
Mon Sep 02 18:49:01 EDT 2019 com.google.javascript.rhino.Node,1444
Mon Sep 02 18:49:05 EDT 2019 com.google.javascript.rhino.Node,1457
Mon Sep 02 18:49:09 EDT 2019 Mon Sep 02 18:49:09 EDT 2019 : com.google.javascript.rhino.Node,2192=>Find no block
Mon Sep 02 18:49:09 EDT 2019 com.google.javascript.rhino.Node,2193
Mon Sep 02 18:49:13 EDT 2019 com.google.javascript.rhino.Node,2194
Mon Sep 02 18:49:14 EDT 2019 Mon Sep 02 18:49:14 EDT 2019 : com.google.javascript.rhino.Node,2195=>Find no block
Mon Sep 02 18:49:15 EDT 2019 com.google.javascript.jscomp.ExploitAssigns,155

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.equals("ECMASCRIPT5_STRICT")||value.equals("ES5_STRICT")){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 18:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.equals("ECMASCRIPT5_STRICT")&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 18:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isQualifiedName()&&value.equals("ES5_STRICT")){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 18:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.equals("ECMASCRIPT5_STRICT")&&value.equals("ES5_STRICT")){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 18:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.equals("ECMASCRIPT5")||value.equals("ES5")){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 19:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.equals("ECMASCRIPT5")&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 19:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isQualifiedName()&&value.equals("ES5")){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 19:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.equals("ECMASCRIPT5")&&value.equals("ES5")){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 19:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isName()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 19:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isName()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
parent.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 19:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(next.isComma()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 19:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(next.isComma()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
parent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 19:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(next.isComma()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(next);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 19:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(next.isComma()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
parent.removeChild(next);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 19:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 19:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(next.isVar()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 19:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(next.isVar()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
parent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 19:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isQualifiedName()&&nextName.equals("parseFloat")){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 19:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isQualifiedName()&&nextName.equals("call")){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 19:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isNumber()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 19:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isFunction()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 19:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isExprResult()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 19:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isName()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return false;
}

Time : 19/09/02 19:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isQualifiedName()&&mayHaveSideEffects(value)){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 19:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isGetterDef()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 19:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
assign.putBooleanProp(Node.FREE_CALL,true);
if(value.isGetterDef()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 20:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isAssign()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 20:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(exprParent.isName()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 20:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!NodeUtil.isExprAssign(next)){
return false;
}
if(value.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 20:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!NodeUtil.isExprAssign(next)){
return false;
}
if(value.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return false;
}

Time : 19/09/02 20:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isCall()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 20:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isName()&&nextName.equals(value.getString())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 20:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isQualifiedName()&&nextName.equals(parent.getSourceFileName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 20:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
parent.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 20:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 20:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
value.getParent().replaceChild(next,assign);
return true;
}

Time : 19/09/02 20:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
value.replaceChild(next,assign);
return true;
}

Time : 19/09/02 20:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
exprParent.copyInformationFrom(parent);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 20:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
reportCodeChange();
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 20:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
exprParent.copyInformationFrom(parent);
reportCodeChange();

if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 20:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
parent.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 20:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
value.getParent().replaceChild(next,assign);
return true;
}

Time : 19/09/02 20:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
value.replaceChild(next,assign);
return true;
}

Time : 19/09/02 20:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
exprParent.copyInformationFrom(parent);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 20:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
reportCodeChange();
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 21:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
exprParent.copyInformationFrom(parent);
reportCodeChange();

if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 21:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
parent.removeChild(assign);
value.getParent().replaceChild(next,assign);
return true;
}

Time : 19/09/02 21:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
parent.removeChild(assign);
value.replaceChild(next,assign);
return true;
}

Time : 19/09/02 21:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
parent.removeChild(assign);
exprParent.copyInformationFrom(parent);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 21:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
reportCodeChange();
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
parent.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 21:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
exprParent.copyInformationFrom(parent);
reportCodeChange();

if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
parent.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 21:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
exprParent.copyInformationFrom(parent);
value.getParent().replaceChild(next,assign);
return true;
}

Time : 19/09/02 21:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
reportCodeChange();
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
value.getParent().replaceChild(next,assign);
return true;
}

Time : 19/09/02 21:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
exprParent.copyInformationFrom(parent);
reportCodeChange();

if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
value.getParent().replaceChild(next,assign);
return true;
}

Time : 19/09/02 21:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
exprParent.copyInformationFrom(parent);
value.replaceChild(next,assign);
return true;
}

Time : 19/09/02 21:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
reportCodeChange();
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
value.replaceChild(next,assign);
return true;
}

Time : 19/09/02 21:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
exprParent.copyInformationFrom(parent);
reportCodeChange();

if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
value.replaceChild(next,assign);
return true;
}

Time : 19/09/02 21:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
reportCodeChange();
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
exprParent.copyInformationFrom(parent);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 21:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
exprParent.copyInformationFrom(parent);
reportCodeChange();

if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
exprParent.copyInformationFrom(parent);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 21:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
reportCodeChange();
exprParent.copyInformationFrom(parent);
reportCodeChange();

if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 21:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
parent.removeChild(assign);
value.getParent().replaceChild(next,assign);
return true;
}

Time : 19/09/02 21:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
parent.removeChild(assign);
value.replaceChild(next,assign);
return true;
}

Time : 19/09/02 21:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
parent.removeChild(assign);
exprParent.copyInformationFrom(parent);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 21:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
reportCodeChange();
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
parent.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 21:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
exprParent.copyInformationFrom(parent);
reportCodeChange();

if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
parent.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 21:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
exprParent.copyInformationFrom(parent);
value.getParent().replaceChild(next,assign);
return true;
}

Time : 19/09/02 21:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
reportCodeChange();
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
value.getParent().replaceChild(next,assign);
return true;
}

Time : 19/09/02 21:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
exprParent.copyInformationFrom(parent);
reportCodeChange();

if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
value.getParent().replaceChild(next,assign);
return true;
}

Time : 19/09/02 21:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
exprParent.copyInformationFrom(parent);
value.replaceChild(next,assign);
return true;
}

Time : 19/09/02 22:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
reportCodeChange();
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
value.replaceChild(next,assign);
return true;
}

Time : 19/09/02 22:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
exprParent.copyInformationFrom(parent);
reportCodeChange();

if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
value.replaceChild(next,assign);
return true;
}

Time : 19/09/02 22:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
reportCodeChange();
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
exprParent.copyInformationFrom(parent);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 22:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
exprParent.copyInformationFrom(parent);
reportCodeChange();

if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
exprParent.copyInformationFrom(parent);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 22:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
reportCodeChange();
exprParent.copyInformationFrom(parent);
reportCodeChange();

if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 22:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
parent.removeChild(assign);
exprParent.copyInformationFrom(parent);
value.getParent().replaceChild(next,assign);
return true;
}

Time : 19/09/02 22:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
reportCodeChange();
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
parent.removeChild(assign);
value.getParent().replaceChild(next,assign);
return true;
}

Time : 19/09/02 22:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
exprParent.copyInformationFrom(parent);
reportCodeChange();

if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
parent.removeChild(assign);
value.getParent().replaceChild(next,assign);
return true;
}

Time : 19/09/02 22:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
parent.removeChild(assign);
exprParent.copyInformationFrom(parent);
value.replaceChild(next,assign);
return true;
}

Time : 19/09/02 22:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
reportCodeChange();
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
parent.removeChild(assign);
value.replaceChild(next,assign);
return true;
}

Time : 19/09/02 22:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
exprParent.copyInformationFrom(parent);
reportCodeChange();

if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
parent.removeChild(assign);
value.replaceChild(next,assign);
return true;
}

Time : 19/09/02 22:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
reportCodeChange();
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
parent.removeChild(assign);
exprParent.copyInformationFrom(parent);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 22:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
exprParent.copyInformationFrom(parent);
reportCodeChange();

if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
parent.removeChild(assign);
exprParent.copyInformationFrom(parent);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 22:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
reportCodeChange();
exprParent.copyInformationFrom(parent);
reportCodeChange();

if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
parent.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 22:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
reportCodeChange();
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
exprParent.copyInformationFrom(parent);
value.getParent().replaceChild(next,assign);
return true;
}

Time : 19/09/02 22:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
exprParent.copyInformationFrom(parent);
reportCodeChange();

if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
exprParent.copyInformationFrom(parent);
value.getParent().replaceChild(next,assign);
return true;
}

Time : 19/09/02 22:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
reportCodeChange();
exprParent.copyInformationFrom(parent);
reportCodeChange();

if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
value.getParent().replaceChild(next,assign);
return true;
}

Time : 19/09/02 22:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
reportCodeChange();
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
exprParent.copyInformationFrom(parent);
value.replaceChild(next,assign);
return true;
}

Time : 19/09/02 22:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
exprParent.copyInformationFrom(parent);
reportCodeChange();

if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
exprParent.copyInformationFrom(parent);
value.replaceChild(next,assign);
return true;
}

Time : 19/09/02 22:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
reportCodeChange();
exprParent.copyInformationFrom(parent);
reportCodeChange();

if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
value.replaceChild(next,assign);
return true;
}

Time : 19/09/02 22:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.isQualifiedName()&&nextName.equals(value.getQualifiedName())){
reportCodeChange();
exprParent.copyInformationFrom(parent);
reportCodeChange();

if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
exprParent.copyInformationFrom(parent);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 22:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
parent.removeChild(assign);
exprParent.copyInformationFrom(parent);
value.getParent().replaceChild(next,assign);
return true;
}

Time : 19/09/02 22:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
reportCodeChange();
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
parent.removeChild(assign);
value.getParent().replaceChild(next,assign);
return true;
}

Time : 19/09/02 23:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
exprParent.copyInformationFrom(parent);
reportCodeChange();

if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
parent.removeChild(assign);
value.getParent().replaceChild(next,assign);
return true;
}

Time : 19/09/02 23:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
parent.removeChild(assign);
exprParent.copyInformationFrom(parent);
value.replaceChild(next,assign);
return true;
}

Time : 19/09/02 23:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
reportCodeChange();
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
parent.removeChild(assign);
value.replaceChild(next,assign);
return true;
}

Time : 19/09/02 23:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
exprParent.copyInformationFrom(parent);
reportCodeChange();

if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
parent.removeChild(assign);
value.replaceChild(next,assign);
return true;
}

Time : 19/09/02 23:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
reportCodeChange();
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
parent.removeChild(assign);
exprParent.copyInformationFrom(parent);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 23:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
exprParent.copyInformationFrom(parent);
reportCodeChange();

if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
parent.removeChild(assign);
exprParent.copyInformationFrom(parent);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 23:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
reportCodeChange();
exprParent.copyInformationFrom(parent);
reportCodeChange();

if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
parent.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 23:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
reportCodeChange();
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
exprParent.copyInformationFrom(parent);
value.getParent().replaceChild(next,assign);
return true;
}

Time : 19/09/02 23:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
exprParent.copyInformationFrom(parent);
reportCodeChange();

if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
exprParent.copyInformationFrom(parent);
value.getParent().replaceChild(next,assign);
return true;
}

Time : 19/09/02 23:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
reportCodeChange();
exprParent.copyInformationFrom(parent);
reportCodeChange();

if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
value.getParent().replaceChild(next,assign);
return true;
}

Time : 19/09/02 23:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
reportCodeChange();
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
exprParent.copyInformationFrom(parent);
value.replaceChild(next,assign);
return true;
}

Time : 19/09/02 23:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
exprParent.copyInformationFrom(parent);
reportCodeChange();

if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
exprParent.copyInformationFrom(parent);
value.replaceChild(next,assign);
return true;
}

Time : 19/09/02 23:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
reportCodeChange();
exprParent.copyInformationFrom(parent);
reportCodeChange();

if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
value.replaceChild(next,assign);
return true;
}

Time : 19/09/02 23:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isExprResult()&&nextName.equals(value.getQualifiedName())){
reportCodeChange();
exprParent.copyInformationFrom(parent);
reportCodeChange();

if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
exprParent.copyInformationFrom(parent);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 23:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isQualifiedName()&&nextName.equals("goog.events.removeAll")){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 23:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
next=value.getNext();
if(value.isGetterDef()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 23:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.isVar()&&nextName.equals(value.getQualifiedName())){
if(!isSafeReplacement(next,assign)){
return false;
}
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next,assign);
return true;
}

Time : 19/09/02 23:48
----------------------------------------
Timeout time : 19/09/02 23:51
