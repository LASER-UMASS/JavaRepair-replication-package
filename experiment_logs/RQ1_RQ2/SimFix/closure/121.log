=================================================
Project : closure_121	start : 19/09/02 18:46
Current failed test : com.google.javascript.jscomp.InlineVariablesTest::testExternalIssue1053 | 19/09/02 18:47
Mon Sep 02 18:49:08 EDT 2019 com.google.javascript.rhino.Node,1430
Mon Sep 02 18:49:15 EDT 2019 com.google.javascript.rhino.Node,1446
Mon Sep 02 18:49:21 EDT 2019 com.google.javascript.rhino.Node,1459
Mon Sep 02 18:49:26 EDT 2019 Mon Sep 02 18:49:26 EDT 2019 : com.google.javascript.rhino.Node,2194=>Find no block
Mon Sep 02 18:49:27 EDT 2019 com.google.javascript.rhino.Node,2195
Mon Sep 02 18:49:32 EDT 2019 com.google.javascript.rhino.Node,2196
Mon Sep 02 18:49:33 EDT 2019 Mon Sep 02 18:49:33 EDT 2019 : com.google.javascript.rhino.Node,2197=>Find no block
Mon Sep 02 18:49:34 EDT 2019 com.google.javascript.jscomp.NodeUtil,2185
Mon Sep 02 18:49:45 EDT 2019 com.google.javascript.jscomp.parsing.IRFactory,1397
Mon Sep 02 18:49:56 EDT 2019 com.google.javascript.jscomp.NodeUtil,1223
Mon Sep 02 18:50:09 EDT 2019 com.google.javascript.jscomp.InlineVariables,316

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(inlineAllStrings&&!isVarInlineForbidden(candidate.alias)){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}

Time : 19/09/02 18:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(declaration.getBasicBlock()!=declaration.getBasicBlock()&&!isVarInlineForbidden(candidate.alias)){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}

Time : 19/09/02 18:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!staleVars.contains(candidate.alias)&&declaration.getBasicBlock()!=declaration.getBasicBlock()){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}

Time : 19/09/02 18:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(declaration.getBasicBlock()!=declaration.getBasicBlock()&&declaration.getBasicBlock()!=declaration.getBasicBlock()){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}

Time : 19/09/02 19:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nameNode.getJSDocInfo()!=null&&!isVarInlineForbidden(candidate.alias)){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}

Time : 19/09/02 19:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nameNode==null){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}

Time : 19/09/02 19:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nameNode==null&&!isVarInlineForbidden(candidate.alias)){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}

Time : 19/09/02 19:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!staleVars.contains(candidate.alias)&&nameNode.getBooleanProp(Node.FREE_CALL)&&NodeUtil.isGet(nameNode)){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}

Time : 19/09/02 19:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(maybeModifiedArguments){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}

Time : 19/09/02 19:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(maybeModifiedArguments&&!isVarInlineForbidden(candidate.alias)){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}

Time : 19/09/02 19:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((nameNode.getJSType()!=null)&&!nameNode.getJSType().isUnknownType()){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}

Time : 19/09/02 19:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((nameNode.getJSType()!=null)&&!isVarInlineForbidden(candidate.alias)){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}

Time : 19/09/02 19:30
----------------------------------------
Mon Sep 02 19:35:52 EDT 2019 com.google.javascript.jscomp.InlineVariables,317
Mon Sep 02 19:35:53 EDT 2019 com.google.javascript.jscomp.InlineVariables,318
Mon Sep 02 19:35:54 EDT 2019 com.google.javascript.jscomp.InlineVariables,319
Mon Sep 02 19:35:55 EDT 2019 com.google.javascript.jscomp.InlineVariables,322
Mon Sep 02 19:35:56 EDT 2019 com.google.javascript.jscomp.InlineVariables,312

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(aliasCandidates.containsKey(nameNode.getQualifiedName())){
AliasCandidate candidate=aliasCandidates.get(nameNode);
if(!staleVars.contains(candidate.alias)&&!isVarInlineForbidden(candidate.alias)){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}
}

Time : 19/09/02 19:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Preconditions.checkNotNull(nameNode.getQualifiedName());
if(aliasCandidates.containsKey(nameNode.getQualifiedName())){
AliasCandidate candidate=aliasCandidates.get(nameNode);
if(!staleVars.contains(candidate.alias)&&!isVarInlineForbidden(candidate.alias)){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}
}

Time : 19/09/02 19:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(aliasCandidates.containsKey(v)){
AliasCandidate candidate=aliasCandidates.get(nameNode);
if(!staleVars.contains(candidate.alias)&&!isVarInlineForbidden(candidate.alias)){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}
}

Time : 19/09/02 19:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(aliasCandidates.containsKey(refCount)){
AliasCandidate candidate=aliasCandidates.get(nameNode);
if(!staleVars.contains(candidate.alias)&&!isVarInlineForbidden(candidate.alias)){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}
}

Time : 19/09/02 19:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!nameNode.isThis()){
return ;
}
if(aliasCandidates.containsKey(nameNode)){
AliasCandidate candidate=aliasCandidates.get(nameNode);
if(!staleVars.contains(candidate.alias)&&!isVarInlineForbidden(candidate.alias)){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}
}

Time : 19/09/02 20:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!nameNode.isCall()){
return ;
}
if(aliasCandidates.containsKey(nameNode)){
AliasCandidate candidate=aliasCandidates.get(nameNode);
if(!staleVars.contains(candidate.alias)&&!isVarInlineForbidden(candidate.alias)){
Reference aliasInit;
aliasInit=candidate.refInfo.getInitializingReference();
Node value=aliasInit.getAssignedValue();
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
staleVars.add(candidate.alias);
}
}

Time : 19/09/02 20:10
----------------------------------------
Mon Sep 02 20:14:24 EDT 2019 com.google.javascript.jscomp.InlineVariables,313
Mon Sep 02 20:14:26 EDT 2019 Mon Sep 02 20:14:26 EDT 2019 : com.google.javascript.jscomp.InlineVariables,127=>Find no block
Mon Sep 02 20:14:27 EDT 2019 com.google.javascript.jscomp.NodeIterators,283
Mon Sep 02 20:23:12 EDT 2019 com.google.javascript.jscomp.NodeIterators,284
Mon Sep 02 20:23:14 EDT 2019 com.google.javascript.jscomp.InlineVariables,655
Mon Sep 02 20:44:19 EDT 2019 com.google.javascript.jscomp.InlineVariables,656
Mon Sep 02 20:44:20 EDT 2019 com.google.javascript.jscomp.InlineVariables,700
Mon Sep 02 20:55:25 EDT 2019 com.google.javascript.jscomp.InlineVariables,701
Mon Sep 02 20:55:26 EDT 2019 com.google.javascript.jscomp.ReferenceCollectingCallback,734
Mon Sep 02 20:55:29 EDT 2019 com.google.javascript.jscomp.ReferenceCollectingCallback,399

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isInitializingDeclarationAt(1)){
return references.get(1);
}

Time : 19/09/02 20:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isInitializingAssignmentAt(1)){
return references.get(0);
}

Time : 19/09/02 20:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isInitializingDeclarationAt(1)){
return references.get(0);
}

Time : 19/09/02 21:02
----------------------------------------
Mon Sep 02 21:05:18 EDT 2019 com.google.javascript.jscomp.ReferenceCollectingCallback,381
Mon Sep 02 21:05:35 EDT 2019 com.google.javascript.jscomp.NodeUtil,1607
Mon Sep 02 22:33:31 EDT 2019 com.google.javascript.jscomp.InlineVariables,705
Mon Sep 02 22:33:35 EDT 2019 com.google.javascript.jscomp.ReferenceCollectingCallback,328
Mon Sep 02 22:34:49 EDT 2019 com.google.javascript.jscomp.InlineVariables,629
Mon Sep 02 22:54:50 EDT 2019 com.google.javascript.jscomp.InlineVariables,663
Mon Sep 02 23:14:30 EDT 2019 com.google.javascript.jscomp.InlineVariables,539
Mon Sep 02 23:17:09 EDT 2019 com.google.javascript.jscomp.AstValidator,204
Mon Sep 02 23:40:30 EDT 2019 com.google.javascript.jscomp.AstValidator,205
Timeout time : 19/09/02 23:49
