=================================================
Project : closure_128	start : 19/09/02 18:47
Current failed test : com.google.javascript.jscomp.CodePrinterTest::testIssue942 | 19/09/02 18:47
Mon Sep 02 18:56:39 EDT 2019 com.google.javascript.jscomp.parsing.IRFactory,542
Mon Sep 02 18:56:44 EDT 2019 com.google.javascript.jscomp.parsing.IRFactory,543
Mon Sep 02 18:56:44 EDT 2019 com.google.javascript.jscomp.parsing.IRFactory,409
Mon Sep 02 19:07:04 EDT 2019 com.google.javascript.jscomp.parsing.IRFactory,410
Mon Sep 02 19:07:05 EDT 2019 com.google.javascript.jscomp.parsing.IRFactory,411
Mon Sep 02 19:07:05 EDT 2019 com.google.javascript.jscomp.parsing.IRFactory,414
Mon Sep 02 19:07:06 EDT 2019 com.google.javascript.jscomp.parsing.IRFactory,415
Mon Sep 02 19:07:07 EDT 2019 com.google.javascript.jscomp.parsing.IRFactory,419
Mon Sep 02 19:10:11 EDT 2019 com.google.javascript.jscomp.parsing.IRFactory,422
Mon Sep 02 19:12:57 EDT 2019 com.google.javascript.jscomp.parsing.IRFactory,423
Mon Sep 02 19:12:58 EDT 2019 com.google.javascript.jscomp.CodeGenerator,791

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int index=0;index<len;index++){
if(Character.isUpperCase(s.charAt(index))||!Character.isLetter(s.charAt(index))){
return true;
}
char c=s.charAt(index);
if(c<'0'||c>'9'){
return false;
}
}

Time : 19/09/02 19:16
----------------------------------------
Mon Sep 02 19:31:16 EDT 2019 com.google.javascript.jscomp.CodeGenerator,650
Mon Sep 02 19:51:26 EDT 2019 com.google.javascript.jscomp.CodeGenerator,652
Mon Sep 02 20:20:09 EDT 2019 com.google.javascript.jscomp.CodeGenerator,653
Mon Sep 02 20:36:29 EDT 2019 com.google.javascript.jscomp.CodeGenerator,698
Mon Sep 02 20:36:32 EDT 2019 com.google.javascript.jscomp.CodeGenerator,805
Mon Sep 02 20:38:22 EDT 2019 com.google.javascript.jscomp.CodeGenerator,694

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!n.isQuotedString()&&!TokenStream.isKeyword(key)){
add(key);
}else {
double d=getSimpleNumber(key);
if(!Double.isNaN(d)){
cc.addNumber(d);
}else {
addExpr(c,1,Context.OTHER);
}
}

Time : 19/09/02 20:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!GT_ESCAPED.equals(key)){
add(key);
}else {
double d=getSimpleNumber(key);
if(!Double.isNaN(d)){
cc.addNumber(d);
}else {
addExpr(c,1,Context.OTHER);
}
}

Time : 19/09/02 21:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!GT_ESCAPED.equals(key)||(childCount-childCount)>Byte.MAX_VALUE&&!TokenStream.isKeyword(key)){
add(key);
}else {
double d=getSimpleNumber(key);
if(!Double.isNaN(d)){
cc.addNumber(d);
}else {
addExpr(c,1,Context.OTHER);
}
}

Time : 19/09/02 21:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
childCount=childCount;
if(!GT_ESCAPED.equals(key)){
add(key);
}else {
double d=getSimpleNumber(key);
if(!Double.isNaN(d)){
cc.addNumber(d);
}else {
addExpr(c,1,Context.OTHER);
}
}

Time : 19/09/02 21:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!GT_ESCAPED.equals(key)||(childCount-childCount)>Byte.MAX_VALUE&&(childCount-childCount)<Byte.MIN_VALUE){
add(key);
}else {
double d=getSimpleNumber(key);
if(!Double.isNaN(d)){
cc.addNumber(d);
}else {
addExpr(c,1,Context.OTHER);
}
}

Time : 19/09/02 21:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
childCount=childCount;
if(!GT_ESCAPED.equals(key)||(childCount-childCount)>Byte.MAX_VALUE&&!TokenStream.isKeyword(key)){
add(key);
}else {
double d=getSimpleNumber(key);
if(!Double.isNaN(d)){
cc.addNumber(d);
}else {
addExpr(c,1,Context.OTHER);
}
}

Time : 19/09/02 21:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
childCount=childCount;
if(!GT_ESCAPED.equals(key)||(childCount-childCount)>Byte.MAX_VALUE&&(childCount-childCount)<Byte.MIN_VALUE){
add(key);
}else {
double d=getSimpleNumber(key);
if(!Double.isNaN(d)){
cc.addNumber(d);
}else {
addExpr(c,1,Context.OTHER);
}
}

Time : 19/09/02 21:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!ControlFlowGraph.isEnteringNewCfgNode(c)&&!TokenStream.isKeyword(key)){
add(key);
}else {
double d=getSimpleNumber(key);
if(!Double.isNaN(d)){
cc.addNumber(d);
}else {
addExpr(c,1,Context.OTHER);
}
}

Time : 19/09/02 21:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!c.isExprResult()&&!TokenStream.isKeyword(key)){
add(key);
}else {
double d=getSimpleNumber(key);
if(!Double.isNaN(d)){
cc.addNumber(d);
}else {
addExpr(c,1,Context.OTHER);
}
}

Time : 19/09/02 21:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((!c.isNumber()||c.getDouble()!=0)){
add(key);
}else {
double d=getSimpleNumber(key);
if(!Double.isNaN(d)){
cc.addNumber(d);
}else {
addExpr(c,1,Context.OTHER);
}
}

Time : 19/09/02 21:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c!=null)&&!TokenStream.isKeyword(key)){
add(key);
}else {
double d=getSimpleNumber(key);
if(!Double.isNaN(d)){
cc.addNumber(d);
}else {
addExpr(c,1,Context.OTHER);
}
}

Time : 19/09/02 21:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!c.isThis()&&!TokenStream.isKeyword(key)){
add(key);
}else {
double d=getSimpleNumber(key);
if(!Double.isNaN(d)){
cc.addNumber(d);
}else {
addExpr(c,1,Context.OTHER);
}
}

Time : 19/09/02 21:39
----------------------------------------
Mon Sep 02 21:44:11 EDT 2019 com.google.javascript.jscomp.CodeGenerator,695
Mon Sep 02 21:44:11 EDT 2019 com.google.javascript.jscomp.CompilerOptions,1978
Mon Sep 02 21:44:28 EDT 2019 Mon Sep 02 21:44:28 EDT 2019 : com.google.javascript.jscomp.CompilerOptions,1979=>Find no block
Mon Sep 02 21:44:28 EDT 2019 com.google.javascript.jscomp.CodeGenerator,786
Mon Sep 02 21:44:29 EDT 2019 com.google.javascript.jscomp.CodeGenerator,787
Mon Sep 02 21:44:29 EDT 2019 com.google.javascript.jscomp.CodeGenerator,784
Mon Sep 02 21:44:30 EDT 2019 com.google.javascript.jscomp.CodeGenerator,785
Mon Sep 02 21:44:31 EDT 2019 com.google.javascript.jscomp.CodeGenerator,795
Mon Sep 02 21:44:31 EDT 2019 com.google.javascript.jscomp.CompilerOptions,2010
Mon Sep 02 21:45:48 EDT 2019 Mon Sep 02 21:45:48 EDT 2019 : com.google.javascript.jscomp.CompilerOptions,2011=>Find no block
Mon Sep 02 21:45:48 EDT 2019 com.google.javascript.jscomp.parsing.IRFactory,541
Mon Sep 02 21:45:49 EDT 2019 com.google.javascript.jscomp.CompilerOptions,740
Mon Sep 02 21:47:02 EDT 2019 Mon Sep 02 21:47:02 EDT 2019 : com.google.javascript.jscomp.CompilerOptions,741=>Find no block
Mon Sep 02 21:47:03 EDT 2019 com.google.javascript.jscomp.Compiler,1609
Mon Sep 02 21:47:05 EDT 2019 com.google.javascript.jscomp.Compiler,1605
Mon Sep 02 21:50:43 EDT 2019 com.google.javascript.jscomp.Compiler,1606
Mon Sep 02 21:50:43 EDT 2019 com.google.javascript.jscomp.Compiler,1608
Mon Sep 02 21:50:44 EDT 2019 com.google.javascript.jscomp.Compiler,1611
Mon Sep 02 21:50:44 EDT 2019 com.google.javascript.jscomp.Compiler,1612
Mon Sep 02 21:50:45 EDT 2019 com.google.javascript.jscomp.CodeGenerator,681

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Preconditions.checkState(c.isStringKey());
String key=c.getString();
if(!n.isQuotedString()&&!TokenStream.isKeyword(key)){
add(key);
}else {
double d=getSimpleNumber(key);
if(!Double.isNaN(d)){
cc.addNumber(d);
}else {
addExpr(c,1,Context.OTHER);
}
}

Time : 19/09/02 21:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Preconditions.checkState(c.isStringKey());
String key=c.getString();
if(!ControlFlowGraph.isEnteringNewCfgNode(c)&&!TokenStream.isKeyword(key)){
add(key);
}else {
double d=getSimpleNumber(key);
if(!Double.isNaN(d)){
cc.addNumber(d);
}else {
addExpr(c,1,Context.OTHER);
}
}

Time : 19/09/02 22:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Preconditions.checkState(c.isStringKey());
String key=c.getString();
if(!c.isExprResult()&&!TokenStream.isKeyword(key)){
add(key);
}else {
double d=getSimpleNumber(key);
if(!Double.isNaN(d)){
cc.addNumber(d);
}else {
addExpr(c,1,Context.OTHER);
}
}

Time : 19/09/02 22:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Preconditions.checkState(c.isStringKey());
String key=c.getString();
if(!NodeUtil.isFunctionExpression(c)&&!NodeUtil.isHoistedFunctionDeclaration(c)){
add(key);
}else {
double d=getSimpleNumber(key);
if(!Double.isNaN(d)){
cc.addNumber(d);
}else {
addExpr(c,1,Context.OTHER);
}
}

Time : 19/09/02 23:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Preconditions.checkState(c.isStringKey());
String key=c.getString();
if(!NodeUtil.isFunctionExpression(c)&&!TokenStream.isKeyword(key)){
add(key);
}else {
double d=getSimpleNumber(key);
if(!Double.isNaN(d)){
cc.addNumber(d);
}else {
addExpr(c,1,Context.OTHER);
}
}

Time : 19/09/02 23:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Preconditions.checkState(c.isStringKey());
String key=c.getString();
if((!c.isString())||(!c.getNext().isString())){
add(key);
}else {
double d=getSimpleNumber(key);
if(!Double.isNaN(d)){
cc.addNumber(d);
}else {
addExpr(c,1,Context.OTHER);
}
}

Time : 19/09/02 23:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Preconditions.checkState(c.isStringKey());
String key=c.getString();
if((!c.isString())&&!TokenStream.isKeyword(key)){
add(key);
}else {
double d=getSimpleNumber(key);
if(!Double.isNaN(d)){
cc.addNumber(d);
}else {
addExpr(c,1,Context.OTHER);
}
}

Time : 19/09/02 23:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Preconditions.checkState(c.isStringKey());
String key=c.getString();
if(c!=null&&!TokenStream.isKeyword(key)){
add(key);
}else {
double d=getSimpleNumber(key);
if(!Double.isNaN(d)){
cc.addNumber(d);
}else {
addExpr(c,1,Context.OTHER);
}
}

Time : 19/09/02 23:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Preconditions.checkState(c.isStringKey());
String key=c.getString();
if(c.getJSDocInfo()==null&&!TokenStream.isKeyword(key)){
add(key);
}else {
double d=getSimpleNumber(key);
if(!Double.isNaN(d)){
cc.addNumber(d);
}else {
addExpr(c,1,Context.OTHER);
}
}

Time : 19/09/02 23:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Preconditions.checkState(c.isStringKey());
String key=c.getString();
if(!c.isCall()||!c.getFirstChild().isName()){
add(key);
}else {
double d=getSimpleNumber(key);
if(!Double.isNaN(d)){
cc.addNumber(d);
}else {
addExpr(c,1,Context.OTHER);
}
}

Time : 19/09/02 23:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Preconditions.checkState(c.isStringKey());
String key=c.getString();
if(!c.isCall()&&!TokenStream.isKeyword(key)){
add(key);
}else {
double d=getSimpleNumber(key);
if(!Double.isNaN(d)){
cc.addNumber(d);
}else {
addExpr(c,1,Context.OTHER);
}
}

Time : 19/09/02 23:54
----------------------------------------
Timeout time : 19/09/02 23:57
