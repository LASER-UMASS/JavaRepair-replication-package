=================================================
Project : closure_125	start : 19/09/02 18:47
Current failed test : com.google.javascript.jscomp.TypeCheckTest::testIssue1002 | 19/09/02 18:47
Mon Sep 02 19:03:37 EDT 2019 com.google.javascript.rhino.jstype.JSType,958
Mon Sep 02 19:03:42 EDT 2019 com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter,202

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(outcome){
return caseEquality(condition,blindScope,EQ);
}else {
return caseEquality(condition,blindScope,SHNE);
}

Time : 19/09/02 19:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(outcome){
return caseEquality(condition,blindScope,EQ);
}else {
return caseEquality(condition,blindScope,NE);
}

Time : 19/09/02 19:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(outcome){
return caseEquality(condition,blindScope,NE);
}else {
return caseEquality(condition,blindScope,SHNE);
}

Time : 19/09/02 19:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(outcome){
return caseEquality(condition,blindScope,NE);
}else {
return caseEquality(condition,blindScope,EQ);
}

Time : 19/09/02 19:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(outcome){
return caseEquality(condition,blindScope,SHNE);
}else {
return caseEquality(condition,blindScope,SHEQ);
}

Time : 19/09/02 19:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(outcome){
return caseEquality(condition,blindScope,ineq);
}else {
return caseEquality(condition,blindScope,SHNE);
}

Time : 19/09/02 19:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(outcome){
return caseIn(condition.getLastChild(),condition.getFirstChild().getString(),blindScope);
}else {
return caseEquality(condition,blindScope,SHNE);
}

Time : 19/09/02 19:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(outcome){
return caseAndOrNotShortCircuiting(condition.getFirstChild(),condition.getLastChild(),blindScope,true);
}else {
return caseEquality(condition,blindScope,SHNE);
}

Time : 19/09/02 19:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(outcome){
return caseAndOrNotShortCircuiting(condition.getFirstChild(),condition.getLastChild(),blindScope,true);
}else {
return caseAndOrMaybeShortCircuiting(condition.getFirstChild(),condition.getLastChild(),blindScope,true);
}

Time : 19/09/02 19:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(outcome){
return caseAndOrNotShortCircuiting(condition.getFirstChild(),condition.getLastChild(),blindScope,false);
}else {
return caseEquality(condition,blindScope,SHNE);
}

Time : 19/09/02 19:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(outcome){
return caseAndOrNotShortCircuiting(condition.getFirstChild(),condition.getLastChild(),blindScope,false);
}else {
return caseAndOrMaybeShortCircuiting(condition.getFirstChild(),condition.getLastChild(),blindScope,false);
}

Time : 19/09/02 19:33
----------------------------------------
Mon Sep 02 19:36:33 EDT 2019 com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter,203
Mon Sep 02 19:36:34 EDT 2019 com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter,205
Mon Sep 02 19:36:34 EDT 2019 com.google.javascript.jscomp.TypeCheck,678
Mon Sep 02 19:41:13 EDT 2019 com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter,423
Mon Sep 02 19:42:34 EDT 2019 com.google.javascript.rhino.jstype.JSType,877
Mon Sep 02 20:15:29 EDT 2019 com.google.javascript.rhino.jstype.JSType,878
Mon Sep 02 20:15:29 EDT 2019 com.google.javascript.rhino.jstype.FunctionType,901

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isConstructor()){
if(toMaybeFunctionType().getSource()!=null){
return true;
}
if(that.isConstructor()){
return this==that;
}
return false;
}

Time : 19/09/02 20:18
----------------------------------------
Mon Sep 02 20:22:33 EDT 2019 com.google.javascript.rhino.jstype.JSType,873
Mon Sep 02 20:43:27 EDT 2019 com.google.javascript.rhino.jstype.JSType,1164
Mon Sep 02 20:44:59 EDT 2019 com.google.javascript.rhino.jstype.JSType,1165
Mon Sep 02 20:45:00 EDT 2019 Mon Sep 02 20:45:00 EDT 2019 : com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter,83=>Find no block
Mon Sep 02 20:45:01 EDT 2019 com.google.javascript.rhino.jstype.JSType,1179
Mon Sep 02 20:48:46 EDT 2019 com.google.javascript.rhino.jstype.JSType,1187
Mon Sep 02 20:49:57 EDT 2019 com.google.javascript.rhino.jstype.JSType,1191
Mon Sep 02 20:49:58 EDT 2019 Mon Sep 02 20:49:58 EDT 2019 : com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter,98=>Find no block
Mon Sep 02 20:49:58 EDT 2019 Mon Sep 02 20:49:58 EDT 2019 : com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter,80=>Find no block
Mon Sep 02 20:49:59 EDT 2019 Mon Sep 02 20:49:59 EDT 2019 : com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter,95=>Find no block
Mon Sep 02 20:50:00 EDT 2019 com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter,287

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(rightType==null){
rightIsRefineable=true;
}else {
rightIsRefineable=false;
rightType=right.getJSType();
}

Time : 19/09/02 20:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(rightType!=null){
leftType=rightType.getRestrictedTypeGivenToBooleanOutcome(!leftIsRefineable);
rightIsRefineable=true;
}else {
rightIsRefineable=false;
rightType=right.getJSType();
}

Time : 19/09/02 20:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(leftType!=null){
leftType=rightType.getRestrictedTypeGivenToBooleanOutcome(!leftIsRefineable);
rightIsRefineable=true;
}else {
rightIsRefineable=false;
rightType=right.getJSType();
}

Time : 19/09/02 21:02
----------------------------------------
Mon Sep 02 21:05:47 EDT 2019 com.google.javascript.jscomp.parsing.IRFactory,1360
Mon Sep 02 21:05:54 EDT 2019 com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter,420
Mon Sep 02 21:07:51 EDT 2019 com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter,418
Mon Sep 02 21:09:28 EDT 2019 com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter,419
Mon Sep 02 21:09:29 EDT 2019 com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter,422
Mon Sep 02 21:09:30 EDT 2019 com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter,425
Mon Sep 02 21:09:30 EDT 2019 com.google.javascript.rhino.jstype.FunctionType,790

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionInstance.isSubtype(this)){
return leastSuper?this:that;
}

Time : 19/09/02 21:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionInstance.isSubtype(that)){
return leastSuper?that:this;
}else if(functionInstance.isEquivalentTo(this)){
return leastSuper?this:that;
}

Time : 19/09/02 21:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionInstance.isEquivalentTo(that)){
return leastSuper?that:this;
}else if(functionInstance.isSubtype(this)){
return leastSuper?this:that;
}

Time : 19/09/02 21:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionInstance.isEquivalentTo(typeOfThis)){
return leastSuper?that:this;
}else if(functionInstance.isSubtype(this)){
return leastSuper?this:that;
}

Time : 19/09/02 21:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionInstance.isEquivalentTo(that)){
return leastSuper?that:this;
}else if(functionInstance.isSubtype(this)){
return leastSuper?this:that;
}
FunctionType greatestFn=registry.getNativeFunctionType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
FunctionType leastFn=registry.getNativeFunctionType(JSTypeNative.LEAST_FUNCTION_TYPE);

Time : 19/09/02 21:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionInstance.isEquivalentTo(typeOfThis)){
return leastSuper?that:this;
}else if(functionInstance.isSubtype(this)){
return leastSuper?this:that;
}
FunctionType greatestFn=registry.getNativeFunctionType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
FunctionType leastFn=registry.getNativeFunctionType(JSTypeNative.LEAST_FUNCTION_TYPE);

Time : 19/09/02 21:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionInstance.isSubtype(that)){
return leastSuper?that:this;
}else if(functionInstance.isEquivalentTo(this)){
return leastSuper?this:that;
}
FunctionType greatestFn=registry.getNativeFunctionType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
FunctionType leastFn=registry.getNativeFunctionType(JSTypeNative.LEAST_FUNCTION_TYPE);

Time : 19/09/02 21:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(that.isEquivalentTo(that)){
return leastSuper?that:this;
}else if(functionInstance.isEquivalentTo(this)){
return leastSuper?this:that;
}
FunctionType greatestFn=registry.getNativeFunctionType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
FunctionType leastFn=registry.getNativeFunctionType(JSTypeNative.LEAST_FUNCTION_TYPE);

Time : 19/09/02 21:37
----------------------------------------
Mon Sep 02 21:41:33 EDT 2019 com.google.javascript.rhino.jstype.FunctionType,792

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
FunctionType greatestFn=registry.getNativeFunctionType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
FunctionType leastFn=registry.getNativeFunctionType(JSTypeNative.LEAST_FUNCTION_TYPE);
return leastSuper?that:that;

Time : 19/09/02 21:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
FunctionType greatestFn=registry.getNativeFunctionType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
FunctionType leastFn=registry.getNativeFunctionType(JSTypeNative.LEAST_FUNCTION_TYPE);
return leastSuper?that:this;

Time : 19/09/02 21:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
FunctionType greatestFn=registry.getNativeFunctionType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
FunctionType leastFn=registry.getNativeFunctionType(JSTypeNative.LEAST_FUNCTION_TYPE);
return leastSuper?this:that;

Time : 19/09/02 21:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
FunctionType greatestFn=registry.getNativeFunctionType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
FunctionType leastFn=registry.getNativeFunctionType(JSTypeNative.LEAST_FUNCTION_TYPE);
return leastSuper?greatestFn:that;

Time : 19/09/02 21:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
FunctionType greatestFn=registry.getNativeFunctionType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
FunctionType leastFn=registry.getNativeFunctionType(JSTypeNative.LEAST_FUNCTION_TYPE);
leastSuper=true;
return leastSuper?greatestFn:leastFn;

Time : 19/09/02 21:53
----------------------------------------
Mon Sep 02 21:56:40 EDT 2019 com.google.javascript.rhino.jstype.FunctionType,794
Mon Sep 02 21:56:41 EDT 2019 com.google.javascript.rhino.jstype.FunctionType,780
Mon Sep 02 21:56:41 EDT 2019 com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter,427
Mon Sep 02 22:00:09 EDT 2019 com.google.javascript.rhino.jstype.FunctionType,776

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
JSType functionInstance=registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE);
if(functionInstance.isSubtype(that)){
return leastSuper?that:this;
}else if(functionInstance.isEquivalentTo(this)){
return leastSuper?this:that;
}

Time : 19/09/02 22:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
JSType functionInstance=registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE);
if(that.isEquivalentTo(that)){
return leastSuper?that:this;
}else if(functionInstance.isEquivalentTo(this)){
return leastSuper?this:that;
}

Time : 19/09/02 22:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
JSType functionInstance=registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE);
if(that.isSubtype(that)){
return leastSuper?that:this;
}else if(functionInstance.isEquivalentTo(this)){
return leastSuper?this:that;
}

Time : 19/09/02 22:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
JSType functionInstance=registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE);
if(functionInstance.isEquivalentTo(that)){
return leastSuper?that:this;
}else if(functionInstance.isSubtype(this)){
return leastSuper?this:that;
}

Time : 19/09/02 22:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
JSType functionInstance=registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE);
if(functionInstance.isEquivalentTo(typeOfThis)){
return leastSuper?that:this;
}else if(functionInstance.isSubtype(this)){
return leastSuper?this:that;
}

Time : 19/09/02 22:16
----------------------------------------
Mon Sep 02 22:23:06 EDT 2019 com.google.javascript.rhino.jstype.FunctionType,778
Mon Sep 02 22:23:07 EDT 2019 com.google.javascript.rhino.jstype.FunctionType,320
Mon Sep 02 23:08:43 EDT 2019 com.google.javascript.rhino.jstype.FunctionType,753
Mon Sep 02 23:18:08 EDT 2019 com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter,149
Mon Sep 02 23:32:29 EDT 2019 com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter,277
Mon Sep 02 23:38:26 EDT 2019 com.google.javascript.rhino.jstype.UnionTypeBuilder,151
Mon Sep 02 23:45:18 EDT 2019 com.google.javascript.rhino.jstype.UnionTypeBuilder,153
Mon Sep 02 23:45:19 EDT 2019 com.google.javascript.rhino.jstype.UnionTypeBuilder,155
Mon Sep 02 23:45:20 EDT 2019 com.google.javascript.rhino.jstype.UnionTypeBuilder,156
Mon Sep 02 23:45:20 EDT 2019 com.google.javascript.rhino.jstype.UnionTypeBuilder,157
Mon Sep 02 23:45:21 EDT 2019 com.google.javascript.rhino.jstype.FunctionType,743
Mon Sep 02 23:59:15 EDT 2019 com.google.javascript.rhino.jstype.FunctionType,745
Tue Sep 03 00:02:56 EDT 2019 com.google.javascript.jscomp.TypeCheck,651
Timeout time : 19/09/03 00:03
