=================================================
Project : time_2	start : 19/09/02 15:31
Current failed test : org.joda.time.TestPartial_Basics::testWith_baseAndArgHaveNoRange_purify_1 | 19/09/02 15:32
Mon Sep 02 15:34:38 EDT 2019 org.joda.time.Partial,224

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(loopType.getRangeDurationType()!=null){
throw new IllegalArgumentException("Types array must not contain duplicate: "+types[i-1].getName());
}

Time : 19/09/02 15:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(loopType.getRangeDurationType()!=null){
throw new ClassCastException("ReadablePartial objects must have matching field types");
}

Time : 19/09/02 15:37
----------------------------------------
Mon Sep 02 15:38:38 EDT 2019 org.joda.time.field.UnsupportedDurationField,227
Mon Sep 02 15:38:40 EDT 2019 Mon Sep 02 15:38:40 EDT 2019 : org.joda.time.field.UnsupportedDurationField,32=>Find no block
Mon Sep 02 15:38:40 EDT 2019 org.joda.time.Partial,223
Mon Sep 02 15:38:41 EDT 2019 org.joda.time.DurationFieldType,286

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
case ERAS :
return chronology.months();


Time : 19/09/02 15:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
case ERAS :
return chronology.days();


Time : 19/09/02 15:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
case ERAS :
return chronology.hours();


Time : 19/09/02 15:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
case ERAS :
return chronology.seconds();


Time : 19/09/02 15:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
case ERAS :
return chronology.months();

case CENTURIES :


Time : 19/09/02 15:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
case ERAS :
return chronology.days();

case CENTURIES :


Time : 19/09/02 15:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
case ERAS :
return chronology.hours();

case CENTURIES :


Time : 19/09/02 15:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
case ERAS :
return chronology.seconds();

case CENTURIES :


Time : 19/09/02 15:46
----------------------------------------
Mon Sep 02 15:47:06 EDT 2019 org.joda.time.Partial,222
Mon Sep 02 16:05:21 EDT 2019 Mon Sep 02 16:05:21 EDT 2019 : org.joda.time.Partial,140=>Find no block
Mon Sep 02 16:05:21 EDT 2019 Mon Sep 02 16:05:21 EDT 2019 : org.joda.time.Partial,162=>Find no block
Mon Sep 02 16:05:21 EDT 2019 org.joda.time.Partial,139
Mon Sep 02 16:05:23 EDT 2019 org.joda.time.Partial,159
Mon Sep 02 16:13:37 EDT 2019 org.joda.time.Partial,160
Mon Sep 02 16:13:37 EDT 2019 org.joda.time.Partial,161
Mon Sep 02 16:13:38 EDT 2019 org.joda.time.Partial,153
Mon Sep 02 16:13:38 EDT 2019 org.joda.time.Partial,154
Mon Sep 02 16:13:39 EDT 2019 org.joda.time.Partial,155
Mon Sep 02 16:13:39 EDT 2019 org.joda.time.Partial,156
Mon Sep 02 16:13:40 EDT 2019 org.joda.time.Partial,434
Mon Sep 02 16:14:48 EDT 2019 org.joda.time.Partial,435
Mon Sep 02 16:14:48 EDT 2019 org.joda.time.Partial,438
Mon Sep 02 16:20:31 EDT 2019 org.joda.time.Partial,439
Mon Sep 02 16:20:32 EDT 2019 org.joda.time.Partial,440
Mon Sep 02 16:35:47 EDT 2019 org.joda.time.Partial,458
Mon Sep 02 16:43:50 EDT 2019 org.joda.time.Partial,459
Mon Sep 02 16:43:51 EDT 2019 org.joda.time.Partial,460
Mon Sep 02 16:50:52 EDT 2019 org.joda.time.Partial,461
Mon Sep 02 16:56:20 EDT 2019 org.joda.time.Partial,462
Mon Sep 02 17:01:44 EDT 2019 org.joda.time.Partial,463
Mon Sep 02 17:06:51 EDT 2019 org.joda.time.Partial,466
Mon Sep 02 17:09:55 EDT 2019 org.joda.time.Partial,432
Mon Sep 02 17:12:31 EDT 2019 org.joda.time.Partial,433
Timeout time : 19/09/02 17:14
Current failed test : org.joda.time.TestPartial_Basics::testWith_baseAndArgHaveNoRange_purify_2 | 19/09/02 17:14
Mon Sep 02 17:16:42 EDT 2019 org.joda.time.Partial,224

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(loopType.getRangeDurationType()!=null){
throw new IllegalArgumentException("Types array must not contain duplicate: "+types[i-1].getName());
}

Time : 19/09/02 17:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(loopType.getRangeDurationType()!=null){
throw new ClassCastException("ReadablePartial objects must have matching field types");
}

Time : 19/09/02 17:19
----------------------------------------
Mon Sep 02 17:20:40 EDT 2019 org.joda.time.field.UnsupportedDurationField,227
Mon Sep 02 17:20:41 EDT 2019 Mon Sep 02 17:20:41 EDT 2019 : org.joda.time.field.UnsupportedDurationField,32=>Find no block
Mon Sep 02 17:20:41 EDT 2019 org.joda.time.Partial,223
Mon Sep 02 17:20:42 EDT 2019 org.joda.time.DurationFieldType,286
Mon Sep 02 17:24:42 EDT 2019 org.joda.time.Partial,222
Mon Sep 02 17:36:47 EDT 2019 Mon Sep 02 17:36:47 EDT 2019 : org.joda.time.Partial,140=>Find no block
Mon Sep 02 17:36:47 EDT 2019 Mon Sep 02 17:36:47 EDT 2019 : org.joda.time.Partial,162=>Find no block
Mon Sep 02 17:36:48 EDT 2019 org.joda.time.Partial,139
Mon Sep 02 17:36:50 EDT 2019 org.joda.time.Partial,159
Mon Sep 02 17:45:24 EDT 2019 org.joda.time.Partial,160
Mon Sep 02 17:45:24 EDT 2019 org.joda.time.Partial,161
Mon Sep 02 17:45:24 EDT 2019 org.joda.time.Partial,153
Mon Sep 02 17:45:25 EDT 2019 org.joda.time.Partial,154
Mon Sep 02 17:45:26 EDT 2019 org.joda.time.Partial,155
Mon Sep 02 17:45:26 EDT 2019 org.joda.time.Partial,156
Mon Sep 02 17:45:27 EDT 2019 org.joda.time.Partial,434
Mon Sep 02 17:46:39 EDT 2019 org.joda.time.Partial,435
Mon Sep 02 17:46:40 EDT 2019 org.joda.time.Partial,438
Mon Sep 02 17:52:27 EDT 2019 org.joda.time.Partial,439
Mon Sep 02 17:52:28 EDT 2019 org.joda.time.Partial,440
Mon Sep 02 18:08:11 EDT 2019 org.joda.time.Partial,458
Mon Sep 02 18:15:41 EDT 2019 org.joda.time.Partial,459
Mon Sep 02 18:15:41 EDT 2019 org.joda.time.Partial,460
Mon Sep 02 18:22:21 EDT 2019 org.joda.time.Partial,461
Mon Sep 02 18:27:32 EDT 2019 org.joda.time.Partial,462
Mon Sep 02 18:32:49 EDT 2019 org.joda.time.Partial,463
Mon Sep 02 18:37:39 EDT 2019 org.joda.time.Partial,466
Mon Sep 02 18:40:41 EDT 2019 org.joda.time.Partial,432
Mon Sep 02 18:43:13 EDT 2019 org.joda.time.Partial,433
Mon Sep 02 18:47:27 EDT 2019 org.joda.time.Partial,429
Mon Sep 02 18:48:45 EDT 2019 org.joda.time.DateTimeFieldType,457
Mon Sep 02 18:48:47 EDT 2019 org.joda.time.base.AbstractPartial,175

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(getFieldType(i)!=type){
return i;
}

Time : 19/09/02 18:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0,isize=size();i<isize;i++){
if(getFieldType(i)!=type){
return i;
}
}

Time : 19/09/02 18:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0,isize=size();i<isize;i++){
if(getFieldType(i)!=type){
return i;
}
}
return -1;

Time : 19/09/02 18:53
----------------------------------------
Mon Sep 02 18:54:50 EDT 2019 org.joda.time.Partial,217

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(compare!=0){
if(types[i-1].getRangeDurationType()==null){
if(loopType.getRangeDurationType()==null){
throw new IllegalArgumentException("Types array must not contain duplicate: "+types[i-1].getName());
}
}else {
if(loopType.getRangeDurationType()==null){
throw new IllegalArgumentException("Types array must be in order largest-smallest: "+types[i-1].getName());
}
DurationField lastRangeField=types[i-1].getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(lastRangeField.compareTo(loopRangeField)<0){
throw new IllegalArgumentException("Types array must be in order largest-smallest: "+types[i-1].getName());
}
if(lastRangeField.compareTo(loopRangeField)==0){
throw new IllegalArgumentException("Types array must not contain duplicate: "+types[i-1].getName());
}
}
}

Time : 19/09/02 18:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(i==0){
if(types[i-1].getRangeDurationType()==null){
if(loopType.getRangeDurationType()==null){
throw new IllegalArgumentException("Types array must not contain duplicate: "+types[i-1].getName());
}
}else {
if(loopType.getRangeDurationType()==null){
throw new IllegalArgumentException("Types array must be in order largest-smallest: "+types[i-1].getName());
}
DurationField lastRangeField=types[i-1].getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(lastRangeField.compareTo(loopRangeField)<0){
throw new IllegalArgumentException("Types array must be in order largest-smallest: "+types[i-1].getName());
}
if(lastRangeField.compareTo(loopRangeField)==0){
throw new IllegalArgumentException("Types array must not contain duplicate: "+types[i-1].getName());
}
}
}

Time : 19/09/02 18:56
----------------------------------------
Timeout time : 19/09/02 18:56
Current failed test : org.joda.time.TestPartial_Basics::testWith_baseAndArgHaveNoRange_purify_3 | 19/09/02 18:56
Mon Sep 02 18:58:48 EDT 2019 org.joda.time.Partial,224

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(loopType.getRangeDurationType()!=null){
throw new IllegalArgumentException("Types array must not contain duplicate: "+types[i-1].getName());
}

Time : 19/09/02 19:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(loopType.getRangeDurationType()!=null){
throw new ClassCastException("ReadablePartial objects must have matching field types");
}

Time : 19/09/02 19:01
----------------------------------------
Mon Sep 02 19:02:39 EDT 2019 org.joda.time.field.UnsupportedDurationField,227
Mon Sep 02 19:02:41 EDT 2019 Mon Sep 02 19:02:41 EDT 2019 : org.joda.time.field.UnsupportedDurationField,32=>Find no block
Mon Sep 02 19:02:41 EDT 2019 org.joda.time.Partial,223
Mon Sep 02 19:02:41 EDT 2019 org.joda.time.DurationFieldType,286
Mon Sep 02 19:06:30 EDT 2019 org.joda.time.Partial,222
Mon Sep 02 19:18:07 EDT 2019 Mon Sep 02 19:18:07 EDT 2019 : org.joda.time.Partial,140=>Find no block
Mon Sep 02 19:18:07 EDT 2019 Mon Sep 02 19:18:07 EDT 2019 : org.joda.time.Partial,162=>Find no block
Mon Sep 02 19:18:08 EDT 2019 org.joda.time.Partial,139
Mon Sep 02 19:18:10 EDT 2019 org.joda.time.Partial,159
Mon Sep 02 19:26:25 EDT 2019 org.joda.time.Partial,160
Mon Sep 02 19:26:26 EDT 2019 org.joda.time.Partial,161
Mon Sep 02 19:26:26 EDT 2019 org.joda.time.Partial,153
Mon Sep 02 19:26:27 EDT 2019 org.joda.time.Partial,154
Mon Sep 02 19:26:27 EDT 2019 org.joda.time.Partial,155
Mon Sep 02 19:26:28 EDT 2019 org.joda.time.Partial,156
Mon Sep 02 19:26:28 EDT 2019 org.joda.time.Partial,434
Mon Sep 02 19:27:37 EDT 2019 org.joda.time.Partial,435
Mon Sep 02 19:27:38 EDT 2019 org.joda.time.Partial,438
Mon Sep 02 19:33:19 EDT 2019 org.joda.time.Partial,439
Mon Sep 02 19:33:19 EDT 2019 org.joda.time.Partial,440
Mon Sep 02 19:48:27 EDT 2019 org.joda.time.Partial,458
Mon Sep 02 19:55:57 EDT 2019 org.joda.time.Partial,459
Mon Sep 02 19:55:58 EDT 2019 org.joda.time.Partial,460
Mon Sep 02 20:02:44 EDT 2019 org.joda.time.Partial,461
Mon Sep 02 20:07:54 EDT 2019 org.joda.time.Partial,462
Mon Sep 02 20:13:15 EDT 2019 org.joda.time.Partial,463
Mon Sep 02 20:18:16 EDT 2019 org.joda.time.Partial,466
Mon Sep 02 20:21:20 EDT 2019 org.joda.time.Partial,432
Mon Sep 02 20:24:00 EDT 2019 org.joda.time.Partial,433
Mon Sep 02 20:28:13 EDT 2019 org.joda.time.Partial,429
Mon Sep 02 20:29:30 EDT 2019 org.joda.time.DateTimeFieldType,457
Mon Sep 02 20:29:32 EDT 2019 org.joda.time.base.AbstractPartial,175
Mon Sep 02 20:34:32 EDT 2019 org.joda.time.Partial,217

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(compare!=0){
if(types[i-1].getRangeDurationType()==null){
if(loopType.getRangeDurationType()==null){
throw new IllegalArgumentException("Types array must not contain duplicate: "+types[i-1].getName());
}
}else {
if(loopType.getRangeDurationType()==null){
throw new IllegalArgumentException("Types array must be in order largest-smallest: "+types[i-1].getName());
}
DurationField lastRangeField=types[i-1].getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(lastRangeField.compareTo(loopRangeField)<0){
throw new IllegalArgumentException("Types array must be in order largest-smallest: "+types[i-1].getName());
}
if(lastRangeField.compareTo(loopRangeField)==0){
throw new IllegalArgumentException("Types array must not contain duplicate: "+types[i-1].getName());
}
}
}

Time : 19/09/02 20:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(i==0){
if(types[i-1].getRangeDurationType()==null){
if(loopType.getRangeDurationType()==null){
throw new IllegalArgumentException("Types array must not contain duplicate: "+types[i-1].getName());
}
}else {
if(loopType.getRangeDurationType()==null){
throw new IllegalArgumentException("Types array must be in order largest-smallest: "+types[i-1].getName());
}
DurationField lastRangeField=types[i-1].getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(lastRangeField.compareTo(loopRangeField)<0){
throw new IllegalArgumentException("Types array must be in order largest-smallest: "+types[i-1].getName());
}
if(lastRangeField.compareTo(loopRangeField)==0){
throw new IllegalArgumentException("Types array must not contain duplicate: "+types[i-1].getName());
}
}
}

Time : 19/09/02 20:35
----------------------------------------
Mon Sep 02 20:37:02 EDT 2019 org.joda.time.Partial,218
Timeout time : 19/09/02 20:39
