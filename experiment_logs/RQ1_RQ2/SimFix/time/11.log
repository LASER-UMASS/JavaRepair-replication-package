=================================================
Project : time_11	start : 19/09/02 15:32
Current failed test : org.joda.time.tz.TestCompiler::testDateTimeZoneBuilder | 19/09/02 15:32
Mon Sep 02 15:33:37 EDT 2019 org.joda.time.tz.DateTimeZoneBuilder,1460
Mon Sep 02 15:34:52 EDT 2019 org.joda.time.tz.DateTimeZoneBuilder,1464
Mon Sep 02 15:35:09 EDT 2019 org.joda.time.tz.DateTimeZoneBuilder,1465
Mon Sep 02 15:35:10 EDT 2019 org.joda.time.tz.DateTimeZoneBuilder,800
Mon Sep 02 15:35:14 EDT 2019 org.joda.time.tz.DateTimeZoneBuilder,804
Mon Sep 02 15:35:18 EDT 2019 org.joda.time.PeriodType,674
Mon Sep 02 15:35:39 EDT 2019 org.joda.time.PeriodType,675
Mon Sep 02 15:35:45 EDT 2019 org.joda.time.base.BasePeriod,329
Mon Sep 02 15:35:49 EDT 2019 org.joda.time.Period,704
Mon Sep 02 15:39:29 EDT 2019 org.joda.time.Period,713
Mon Sep 02 15:42:53 EDT 2019 org.joda.time.chrono.BaseChronology,255
Mon Sep 02 16:16:18 EDT 2019 org.joda.time.chrono.BaseChronology,256
Mon Sep 02 16:16:20 EDT 2019 org.joda.time.chrono.BaseChronology,257
Mon Sep 02 16:16:22 EDT 2019 org.joda.time.chrono.BaseChronology,258
Mon Sep 02 16:16:24 EDT 2019 org.joda.time.chrono.BaseChronology,259
Mon Sep 02 16:16:26 EDT 2019 org.joda.time.chrono.BaseChronology,260
Mon Sep 02 16:16:29 EDT 2019 org.joda.time.chrono.BaseChronology,261
Mon Sep 02 16:16:31 EDT 2019 org.joda.time.chrono.BaseChronology,262
Mon Sep 02 16:16:33 EDT 2019 org.joda.time.chrono.BaseChronology,265
Mon Sep 02 16:16:36 EDT 2019 org.joda.time.chrono.BaseChronology,276
Mon Sep 02 16:47:23 EDT 2019 org.joda.time.chrono.BaseChronology,277
Mon Sep 02 16:47:27 EDT 2019 org.joda.time.chrono.BaseChronology,278
Mon Sep 02 16:47:28 EDT 2019 org.joda.time.chrono.BaseChronology,289
Mon Sep 02 16:57:15 EDT 2019 Mon Sep 02 16:57:15 EDT 2019 : org.joda.time.tz.DateTimeZoneBuilder,225=>Find no block
Mon Sep 02 16:57:18 EDT 2019 org.joda.time.tz.DateTimeZoneBuilder,226
Mon Sep 02 16:57:25 EDT 2019 Mon Sep 02 16:57:25 EDT 2019 : org.joda.time.tz.DateTimeZoneBuilder,227=>Find no block
Mon Sep 02 16:57:27 EDT 2019 org.joda.time.tz.DateTimeZoneBuilder,252
Mon Sep 02 16:58:10 EDT 2019 org.joda.time.tz.DateTimeZoneBuilder,258
Mon Sep 02 17:01:41 EDT 2019 org.joda.time.tz.DateTimeZoneBuilder,259
Mon Sep 02 17:01:44 EDT 2019 org.joda.time.tz.DateTimeZoneBuilder,268
Mon Sep 02 17:01:49 EDT 2019 org.joda.time.tz.DateTimeZoneBuilder,269
Mon Sep 02 17:01:51 EDT 2019 org.joda.time.tz.DateTimeZoneBuilder,309

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(toYear<Integer.MAX_VALUE){
OfYear ofYear=new OfYear(mode,monthOfYear,dayOfMonth,dayOfWeek,advanceDayOfWeek,millisOfDay);
Recurrence recurrence=new Recurrence(ofYear,nameKey,saveMillis);
Rule rule=new Rule(recurrence,fromYear,toYear);
getLastRuleSet().addRule(rule);
}

Time : 19/09/02 17:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(fromYear<=dayOfMonth){
OfYear ofYear=new OfYear(mode,monthOfYear,dayOfMonth,dayOfWeek,advanceDayOfWeek,millisOfDay);
Recurrence recurrence=new Recurrence(ofYear,nameKey,saveMillis);
Rule rule=new Rule(recurrence,fromYear,toYear);
getLastRuleSet().addRule(rule);
}

Time : 19/09/02 17:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(monthOfYear<=dayOfMonth){
OfYear ofYear=new OfYear(mode,monthOfYear,dayOfMonth,dayOfWeek,advanceDayOfWeek,millisOfDay);
Recurrence recurrence=new Recurrence(ofYear,nameKey,saveMillis);
Rule rule=new Rule(recurrence,fromYear,toYear);
getLastRuleSet().addRule(rule);
}

Time : 19/09/02 17:12
----------------------------------------
Mon Sep 02 17:13:33 EDT 2019 org.joda.time.tz.DateTimeZoneBuilder,310
Mon Sep 02 17:13:35 EDT 2019 org.joda.time.tz.DateTimeZoneBuilder,312
Mon Sep 02 17:13:38 EDT 2019 org.joda.time.tz.DateTimeZoneBuilder,313
Mon Sep 02 17:13:40 EDT 2019 org.joda.time.tz.DateTimeZoneBuilder,314
Mon Sep 02 17:13:42 EDT 2019 org.joda.time.tz.DateTimeZoneBuilder,316

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(toYear<Integer.MAX_VALUE){
OfYear ofYear=new OfYear(mode,monthOfYear,dayOfMonth,dayOfWeek,advanceDayOfWeek,millisOfDay);
Recurrence recurrence=new Recurrence(ofYear,nameKey,saveMillis);
Rule rule=new Rule(recurrence,fromYear,toYear);
getLastRuleSet().addRule(rule);
}
return this;

Time : 19/09/02 17:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(fromYear<=dayOfMonth){
OfYear ofYear=new OfYear(mode,monthOfYear,dayOfMonth,dayOfWeek,advanceDayOfWeek,millisOfDay);
Recurrence recurrence=new Recurrence(ofYear,nameKey,saveMillis);
Rule rule=new Rule(recurrence,fromYear,toYear);
getLastRuleSet().addRule(rule);
}
return this;

Time : 19/09/02 17:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(monthOfYear<=dayOfMonth){
OfYear ofYear=new OfYear(mode,monthOfYear,dayOfMonth,dayOfWeek,advanceDayOfWeek,millisOfDay);
Recurrence recurrence=new Recurrence(ofYear,nameKey,saveMillis);
Rule rule=new Rule(recurrence,fromYear,toYear);
getLastRuleSet().addRule(rule);
}
return this;

Time : 19/09/02 17:25
----------------------------------------
Mon Sep 02 17:26:58 EDT 2019 org.joda.time.tz.DateTimeZoneBuilder,320
Mon Sep 02 17:27:05 EDT 2019 org.joda.time.tz.DateTimeZoneBuilder,323
Mon Sep 02 17:27:54 EDT 2019 org.joda.time.tz.DateTimeZoneBuilder,333
Mon Sep 02 17:30:46 EDT 2019 org.joda.time.tz.DateTimeZoneBuilder,339
Mon Sep 02 17:33:44 EDT 2019 org.joda.time.tz.DateTimeZoneBuilder,343
Mon Sep 02 17:37:23 EDT 2019 org.joda.time.tz.DateTimeZoneBuilder,345
Mon Sep 02 17:41:33 EDT 2019 org.joda.time.tz.DateTimeZoneBuilder,346
Mon Sep 02 17:47:50 EDT 2019 org.joda.time.tz.DateTimeZoneBuilder,348
Mon Sep 02 17:47:53 EDT 2019 org.joda.time.tz.DateTimeZoneBuilder,349

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(next!=null){
continue;
}

Time : 19/09/02 17:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(transitions.size()==1&&i==ruleSetCount-1){
tailZone=rs.buildTailZone(id);
}

Time : 19/09/02 17:53
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.1804208251748152 : [/home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ1/time/time_11_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java=>0,0]
if(transitions.size()==1&&tailZone==null){
Transition tr=transitions.get(0);
return buildFixedZone(id,tr.getNameKey(),tr.getWallOffset(),tr.getStandardOffset());
}
PrecalculatedZone zone=PrecalculatedZone.create(id,outputID,transitions,tailZone);
if(zone.isCachable()){
return CachedDateTimeZone.forZone(zone);
}

Time : 19/09/02 17:54
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ1/time/time_11_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java=>371,376]
if(tailZone==null&&i==ruleSetCount-1){
tailZone=rs.buildTailZone(id);
}

Time : 19/09/02 17:54
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ1/time/time_11_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java=>371,376]
if(transitions.size()==1&&i==ruleSetCount-1){
tailZone=rs.buildTailZone(id);
}

Time : 19/09/02 17:54
----------------------------------------
Success time : 19/09/02 17:54
