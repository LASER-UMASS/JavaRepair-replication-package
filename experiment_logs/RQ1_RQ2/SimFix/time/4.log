=================================================
Project : time_4	start : 19/09/02 15:32
Current failed test : org.joda.time.TestPartial_Basics::testWith3 | 19/09/02 15:33
Mon Sep 02 15:34:19 EDT 2019 org.joda.time.field.ZeroIsMaxDateTimeField,111
Mon Sep 02 15:34:23 EDT 2019 org.joda.time.field.ZeroIsMaxDateTimeField,138
Mon Sep 02 15:34:24 EDT 2019 org.joda.time.field.ZeroIsMaxDateTimeField,178
Mon Sep 02 15:35:23 EDT 2019 org.joda.time.field.ZeroIsMaxDateTimeField,148
Mon Sep 02 15:35:27 EDT 2019 org.joda.time.DateTimeFieldType,514

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
case CLOCKHOUR_OF_DAY :
return chronology.era();


Time : 19/09/02 15:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
case CLOCKHOUR_OF_DAY :
return chronology.halfdayOfDay();


Time : 19/09/02 15:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
case CLOCKHOUR_OF_DAY :
return chronology.era();

case HOUR_OF_DAY :


Time : 19/09/02 15:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
case CLOCKHOUR_OF_DAY :
return chronology.halfdayOfDay();

case HOUR_OF_DAY :


Time : 19/09/02 15:51
----------------------------------------
Mon Sep 02 15:58:27 EDT 2019 org.joda.time.Partial,447

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(index<2){
throw new IllegalArgumentException("The divisor must be at least 2");
}
if(rangeField.compareTo(loopRangeField)>0){
break;
}

Time : 19/09/02 15:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}

Time : 19/09/02 16:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(fieldType==null){
throw new IllegalArgumentException("Field must not be null");
}
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}

Time : 19/09/02 16:09
----------------------------------------
Mon Sep 02 16:19:51 EDT 2019 org.joda.time.Partial,448
Mon Sep 02 16:19:52 EDT 2019 org.joda.time.Partial,449
Mon Sep 02 16:19:53 EDT 2019 org.joda.time.Partial,445

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(compare>0){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}

Time : 19/09/02 16:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(fieldType==null){
throw new IllegalArgumentException("Field must not be null");
}
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(compare>0){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}

Time : 19/09/02 16:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(index<0||compare<=0){
throw new IllegalArgumentException();
}
if(compare>0){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}

Time : 19/09/02 16:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(index<0||compare<=0){
throw new IllegalArgumentException();
}
if(compare>index){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}

Time : 19/09/02 16:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(fieldType==null){
throw new IllegalArgumentException("Field type must not be null");
}
if(index<0||compare<=0){
throw new IllegalArgumentException();
}
if(compare>0){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}

Time : 19/09/02 16:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(fieldType==null){
throw new IllegalArgumentException("Field type must not be null");
}
if(index<0||compare<=0){
throw new IllegalArgumentException();
}
if(compare>index){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}

Time : 19/09/02 16:35
----------------------------------------
Mon Sep 02 16:38:11 EDT 2019 org.joda.time.field.BaseDurationField,150
Mon Sep 02 16:38:14 EDT 2019 org.joda.time.DateTimeFieldType,457
Mon Sep 02 16:38:19 EDT 2019 Mon Sep 02 16:38:19 EDT 2019 : org.joda.time.Partial,446=>Find no block
Mon Sep 02 16:38:20 EDT 2019 org.joda.time.Partial,443
Mon Sep 02 16:40:19 EDT 2019 org.joda.time.Partial,444
Mon Sep 02 16:40:20 EDT 2019 org.joda.time.Partial,439

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
for(;i<iTypes.length;i++){
DateTimeFieldType loopType=iTypes[i];
DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
if(loopUnitField.isSupported()){
int compare=unitField.compareTo(loopUnitField);
if(compare>0){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}
}
}

Time : 19/09/02 16:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(index==0){
return this;
}
for(;i<iTypes.length;i++){
DateTimeFieldType loopType=iTypes[i];
DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
if(loopUnitField.isSupported()){
int compare=unitField.compareTo(loopUnitField);
if(compare>0){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}
}
}

Time : 19/09/02 16:46
----------------------------------------
Mon Sep 02 16:53:00 EDT 2019 org.joda.time.Partial,440
Mon Sep 02 16:53:20 EDT 2019 org.joda.time.Partial,441
Mon Sep 02 16:53:22 EDT 2019 org.joda.time.Partial,442
Mon Sep 02 16:53:22 EDT 2019 org.joda.time.Partial,432
Mon Sep 02 16:55:09 EDT 2019 org.joda.time.Partial,433
Mon Sep 02 16:55:11 EDT 2019 org.joda.time.Partial,436

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int[] newValues=new int[newTypes.length];
int i=0;
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
DurationField unitField=fieldType.getDurationType().getField(iChronology);

Time : 19/09/02 16:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int[] newValues=new int[newTypes.length];
int i=0;
if(fieldType==null){
throw new IllegalArgumentException("Field must not be null");
}
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
DurationField unitField=fieldType.getDurationType().getField(iChronology);

Time : 19/09/02 16:58
----------------------------------------
Mon Sep 02 17:07:59 EDT 2019 org.joda.time.Partial,437
Mon Sep 02 17:08:01 EDT 2019 org.joda.time.Partial,438
Mon Sep 02 17:10:19 EDT 2019 org.joda.time.Partial,456
Mon Sep 02 17:27:36 EDT 2019 org.joda.time.Partial,457
Mon Sep 02 17:27:38 EDT 2019 org.joda.time.Partial,458

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
value=newValues[0];
System.arraycopy(iValues,0,newValues,0,i);
newTypes[i]=fieldType;
newValues[i]=value;

Time : 19/09/02 17:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
value-='0';
System.arraycopy(iValues,0,newValues,0,i);
newTypes[i]=fieldType;
newValues[i]=value;

Time : 19/09/02 17:42
----------------------------------------
Mon Sep 02 17:43:58 EDT 2019 org.joda.time.Partial,459
Mon Sep 02 17:55:58 EDT 2019 org.joda.time.Partial,460

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
iChronology.validate(new Partial(iChronology,newTypes,newValues),newValues);
newValues[i]=value;
System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i);
System.arraycopy(iValues,i,newValues,i+1,newValues.length-i);

Time : 19/09/02 17:58
----------------------------------------
Mon Sep 02 18:07:23 EDT 2019 org.joda.time.Partial,461
Mon Sep 02 18:16:27 EDT 2019 org.joda.time.Partial,464
Mon Sep 02 18:21:28 EDT 2019 org.joda.time.Partial,465

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Partial newPartial=new Partial(iChronology,newTypes,newValues);
iChronology.validate(new YearMonth(this,iChronology),newValues);
return newPartial;

Time : 19/09/02 18:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Partial newPartial=new Partial(iChronology,newTypes,newValues);
iChronology.validate(new TimeOfDay(this,iChronology),newValues);
return newPartial;

Time : 19/09/02 18:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Partial newPartial=new Partial(iChronology,newTypes,newValues);
iChronology.validate(new YearMonthDay(this,iChronology),newValues);
return newPartial;

Time : 19/09/02 18:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Partial newPartial=new Partial(iChronology,newTypes,newValues);
iChronology.validate(new MonthDay(this,iChronology),newValues);
return newPartial;

Time : 19/09/02 18:30
----------------------------------------
Mon Sep 02 18:31:58 EDT 2019 org.joda.time.Partial,466
Mon Sep 02 18:31:59 EDT 2019 org.joda.time.Partial,430

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(fieldType==null){
throw new IllegalArgumentException("The field type must not be null");
}
int index=indexOf(fieldType);

Time : 19/09/02 18:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(fieldType==null){
throw new IllegalArgumentException("The DateTimeFieldType must not be null");
}
int index=indexOf(fieldType);

Time : 19/09/02 18:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(fieldType==null){
throw new IllegalArgumentException("Field must not be null");
}
int index=indexOf(fieldType);

Time : 19/09/02 18:37
----------------------------------------
Mon Sep 02 18:39:18 EDT 2019 org.joda.time.Partial,431

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(index==-1){
DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
int[] newValues=new int[newTypes.length];
int i=0;
DurationField unitField=fieldType.getDurationType().getField(iChronology);
if(unitField.isSupported()){
for(;i<iTypes.length;i++){
DateTimeFieldType loopType=iTypes[i];
DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
if(loopUnitField.isSupported()){
int compare=unitField.compareTo(loopUnitField);
if(compare>0){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}
}
}
}
System.arraycopy(iTypes,0,newTypes,0,i);
System.arraycopy(iValues,0,newValues,0,i);
newTypes[i]=fieldType;
newValues[i]=value;
System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i);
System.arraycopy(iValues,i,newValues,i+1,newValues.length-i);
Partial newPartial=new Partial(iChronology,newTypes,newValues);
iChronology.validate(newPartial,newValues);
return newPartial;
}

Time : 19/09/02 18:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(fieldType==null){
throw new IllegalArgumentException("Field must not be null");
}
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(index==-1){
DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
int[] newValues=new int[newTypes.length];
int i=0;
DurationField unitField=fieldType.getDurationType().getField(iChronology);
if(unitField.isSupported()){
for(;i<iTypes.length;i++){
DateTimeFieldType loopType=iTypes[i];
DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
if(loopUnitField.isSupported()){
int compare=unitField.compareTo(loopUnitField);
if(compare>0){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}
}
}
}
System.arraycopy(iTypes,0,newTypes,0,i);
System.arraycopy(iValues,0,newValues,0,i);
newTypes[i]=fieldType;
newValues[i]=value;
System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i);
System.arraycopy(iValues,i,newValues,i+1,newValues.length-i);
Partial newPartial=new Partial(iChronology,newTypes,newValues);
iChronology.validate(newPartial,newValues);
return newPartial;
}

Time : 19/09/02 18:44
----------------------------------------
Mon Sep 02 18:48:02 EDT 2019 org.joda.time.Partial,427
Mon Sep 02 18:50:28 EDT 2019 org.joda.time.Partial,296
Mon Sep 02 18:54:19 EDT 2019 org.joda.time.Partial,297
Mon Sep 02 18:54:20 EDT 2019 org.joda.time.Partial,298
Mon Sep 02 18:54:21 EDT 2019 org.joda.time.Partial,299
Mon Sep 02 18:54:22 EDT 2019 Mon Sep 02 18:54:22 EDT 2019 : org.joda.time.Partial,300=>Find no block
Mon Sep 02 18:54:23 EDT 2019 org.joda.time.base.AbstractPartial,175
Mon Sep 02 19:01:41 EDT 2019 org.joda.time.Partial,217
Mon Sep 02 19:20:24 EDT 2019 org.joda.time.Partial,218
Mon Sep 02 19:30:42 EDT 2019 org.joda.time.Partial,221
Mon Sep 02 19:30:43 EDT 2019 org.joda.time.DurationFieldType,298
Mon Sep 02 19:36:47 EDT 2019 org.joda.time.field.BaseDurationField,155
Mon Sep 02 19:36:51 EDT 2019 org.joda.time.Partial,248
Mon Sep 02 19:40:39 EDT 2019 Mon Sep 02 19:40:39 EDT 2019 : org.joda.time.Partial,249=>Find no block
Mon Sep 02 19:40:40 EDT 2019 org.joda.time.Partial,246
Mon Sep 02 19:40:41 EDT 2019 org.joda.time.Partial,247
Mon Sep 02 19:40:42 EDT 2019 org.joda.time.Partial,212
Mon Sep 02 19:54:33 EDT 2019 org.joda.time.Partial,213
Mon Sep 02 19:59:36 EDT 2019 org.joda.time.Partial,214
Mon Sep 02 19:59:40 EDT 2019 org.joda.time.Partial,215
Mon Sep 02 19:59:41 EDT 2019 org.joda.time.Partial,216
Mon Sep 02 19:59:41 EDT 2019 org.joda.time.Partial,243
Mon Sep 02 20:02:49 EDT 2019 org.joda.time.Partial,207
Mon Sep 02 20:02:49 EDT 2019 org.joda.time.Partial,208
Mon Sep 02 20:02:50 EDT 2019 org.joda.time.Partial,202
Mon Sep 02 20:05:23 EDT 2019 org.joda.time.Partial,199
Mon Sep 02 20:11:41 EDT 2019 org.joda.time.Partial,196
Mon Sep 02 20:11:51 EDT 2019 org.joda.time.field.BaseDurationField,146
Mon Sep 02 20:13:08 EDT 2019 org.joda.time.field.BaseDurationField,147
Mon Sep 02 20:13:09 EDT 2019 org.joda.time.field.BaseDurationField,149
Mon Sep 02 20:13:10 EDT 2019 org.joda.time.field.BaseDurationField,152
Mon Sep 02 20:13:10 EDT 2019 Mon Sep 02 20:13:10 EDT 2019 : org.joda.time.field.BaseDurationField,38=>Find no block
Mon Sep 02 20:13:11 EDT 2019 org.joda.time.Partial,190
Mon Sep 02 20:15:52 EDT 2019 org.joda.time.Partial,191
Mon Sep 02 20:15:52 EDT 2019 org.joda.time.Partial,192
Mon Sep 02 20:18:08 EDT 2019 org.joda.time.Partial,193
Mon Sep 02 20:18:18 EDT 2019 org.joda.time.Partial,344
Mon Sep 02 20:18:27 EDT 2019 org.joda.time.Partial,333
Mon Sep 02 20:22:19 EDT 2019 org.joda.time.Partial,321
Mon Sep 02 20:22:21 EDT 2019 org.joda.time.Partial,309
Mon Sep 02 20:22:34 EDT 2019 org.joda.time.DurationFieldType,304
Mon Sep 02 20:28:55 EDT 2019 org.joda.time.DateTimeFieldType,520
Mon Sep 02 20:31:35 EDT 2019 org.joda.time.base.AbstractPartial,170
Mon Sep 02 20:31:36 EDT 2019 org.joda.time.base.AbstractPartial,171
Mon Sep 02 20:31:36 EDT 2019 org.joda.time.DateTimeFieldType,516
Timeout time : 19/09/02 20:34
