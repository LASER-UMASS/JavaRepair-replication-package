=================================================
Project : time_3	start : 19/09/02 15:32
Current failed test : org.joda.time.TestMutableDateTime_Adds::testAddWeeks_int_dstOverlapWinter_addZero_purify_1 | 19/09/02 15:35
Mon Sep 02 15:36:55 EDT 2019 org.joda.time.MutableDateTime,785
Mon Sep 02 15:38:15 EDT 2019 Mon Sep 02 15:38:15 EDT 2019 : org.joda.time.MutableDateTime,786=>Find no block
Mon Sep 02 15:38:16 EDT 2019 org.joda.time.DateTimeZone,931

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(instantAdjusted-prev<=prev){
return offsetPrev;
}

Time : 19/09/02 15:39
----------------------------------------
Mon Sep 02 15:40:56 EDT 2019 org.joda.time.chrono.BasicYearDateTimeField,60

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(instant==0){
return instant;
}

Time : 19/09/02 15:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(serialVersionUID==0||years==0){
return instant;
}

Time : 19/09/02 15:43
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.348683298050514 : [/home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ1/time/time_3_buggy/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java=>0,0]
if(duration==0||scalar==0){
return instant;
}

Time : 19/09/02 15:44
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ1/time/time_3_buggy/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java=>59,61]
if(years==0){
return instant;
}

Time : 19/09/02 15:44
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ1/time/time_3_buggy/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java=>59,61]
if(serialVersionUID==0||years==0){
return instant;
}

Time : 19/09/02 15:44
----------------------------------------
Success time : 19/09/02 15:44
Current failed test : org.joda.time.TestMutableDateTime_Adds::testAddWeeks_int_dstOverlapWinter_addZero_purify_2 | 19/09/02 15:44
Mon Sep 02 15:48:12 EDT 2019 org.joda.time.MutableDateTime,785
Mon Sep 02 15:50:08 EDT 2019 Mon Sep 02 15:50:08 EDT 2019 : org.joda.time.MutableDateTime,786=>Find no block
Mon Sep 02 15:50:09 EDT 2019 org.joda.time.DateTimeZone,931
Mon Sep 02 15:53:00 EDT 2019 org.joda.time.chrono.BasicYearDateTimeField,60
Mon Sep 02 15:59:54 EDT 2019 org.joda.time.chrono.ZonedChronology,351

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=this.iZone.getOffset(instant);
long diff=instant-offset;
if((instant^diff)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return offset;

Time : 19/09/02 16:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=this.iZone.getOffset(instant);
long diff=instant-offset;
if((instant^diff)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return offset;

Time : 19/09/02 16:24
----------------------------------------
Timeout time : 19/09/02 16:38
Current failed test : org.joda.time.TestMutableDateTime_Adds::testAdd_DurationFieldType_int_dstOverlapWinter_addZero_purify_2 | 19/09/02 16:38
Mon Sep 02 16:39:34 EDT 2019 org.joda.time.MutableDateTime,785
Mon Sep 02 16:40:37 EDT 2019 Mon Sep 02 16:40:37 EDT 2019 : org.joda.time.MutableDateTime,786=>Find no block
Mon Sep 02 16:40:38 EDT 2019 org.joda.time.DateTimeZone,931
Mon Sep 02 16:42:31 EDT 2019 org.joda.time.chrono.BasicYearDateTimeField,60
Mon Sep 02 16:46:39 EDT 2019 org.joda.time.chrono.ZonedChronology,351

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=this.iZone.getOffset(instant);
long diff=instant-offset;
if((instant^diff)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return offset;

Time : 19/09/02 17:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=this.iZone.getOffset(instant);
long diff=instant-offset;
if((instant^diff)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return offset;

Time : 19/09/02 17:17
----------------------------------------
Timeout time : 19/09/02 17:29
Current failed test : org.joda.time.TestMutableDateTime_Adds::testAddMonths_int_dstOverlapWinter_addZero_purify_2 | 19/09/02 17:29
Mon Sep 02 17:31:22 EDT 2019 org.joda.time.MutableDateTime,785
Mon Sep 02 17:32:41 EDT 2019 Mon Sep 02 17:32:41 EDT 2019 : org.joda.time.MutableDateTime,786=>Find no block
Mon Sep 02 17:32:42 EDT 2019 org.joda.time.DateTimeZone,931
Mon Sep 02 17:34:31 EDT 2019 org.joda.time.chrono.BasicYearDateTimeField,60
Mon Sep 02 17:38:54 EDT 2019 org.joda.time.chrono.ZonedChronology,351

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=this.iZone.getOffset(instant);
long diff=instant-offset;
if((instant^diff)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return offset;

Time : 19/09/02 18:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=this.iZone.getOffset(instant);
long diff=instant-offset;
if((instant^diff)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return offset;

Time : 19/09/02 18:08
----------------------------------------
Timeout time : 19/09/02 18:21
Current failed test : org.joda.time.TestMutableDateTime_Adds::testAddYears_int_dstOverlapWinter_addZero_purify_2 | 19/09/02 18:21
Mon Sep 02 18:22:47 EDT 2019 org.joda.time.MutableDateTime,785
Mon Sep 02 18:24:16 EDT 2019 Mon Sep 02 18:24:16 EDT 2019 : org.joda.time.MutableDateTime,786=>Find no block
Mon Sep 02 18:24:17 EDT 2019 org.joda.time.DateTimeZone,931
Mon Sep 02 18:26:37 EDT 2019 org.joda.time.chrono.BasicYearDateTimeField,60
Mon Sep 02 18:31:13 EDT 2019 org.joda.time.chrono.ZonedChronology,351

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=this.iZone.getOffset(instant);
long diff=instant-offset;
if((instant^diff)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return offset;

Time : 19/09/02 19:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=this.iZone.getOffset(instant);
long diff=instant-offset;
if((instant^diff)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return offset;

Time : 19/09/02 19:04
----------------------------------------
Timeout time : 19/09/02 19:13
Current failed test : org.joda.time.TestMutableDateTime_Adds::testAddDays_int_dstOverlapWinter_addZero_purify_2 | 19/09/02 19:13
Mon Sep 02 19:14:40 EDT 2019 org.joda.time.MutableDateTime,785
Mon Sep 02 19:15:59 EDT 2019 Mon Sep 02 19:15:59 EDT 2019 : org.joda.time.MutableDateTime,786=>Find no block
Mon Sep 02 19:16:00 EDT 2019 org.joda.time.DateTimeZone,931
Mon Sep 02 19:18:03 EDT 2019 org.joda.time.chrono.BasicYearDateTimeField,60
Mon Sep 02 19:22:29 EDT 2019 org.joda.time.chrono.ZonedChronology,351

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=this.iZone.getOffset(instant);
long diff=instant-offset;
if((instant^diff)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return offset;

Time : 19/09/02 19:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=this.iZone.getOffset(instant);
long diff=instant-offset;
if((instant^diff)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return offset;

Time : 19/09/02 19:47
----------------------------------------
Timeout time : 19/09/02 20:04
