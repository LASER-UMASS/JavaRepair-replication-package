=================================================
Project : math_66	start : 19/09/02 13:43
Current failed test : org.apache.commons.math.optimization.univariate.BrentOptimizerTest::testQuinticMinStatistics_purify_1 | 19/09/02 13:45
Mon Sep 02 13:45:51 EDT 2019 org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer,152
Mon Sep 02 13:45:56 EDT 2019 org.apache.commons.math.ConvergingAlgorithmImpl,82
Mon Sep 02 13:46:09 EDT 2019 org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer,105
Mon Sep 02 13:48:20 EDT 2019 org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer,113
Timeout time : 19/09/02 14:18
Current failed test : org.apache.commons.math.optimization.univariate.BrentOptimizerTest::testSinMin_purify_3 | 19/09/02 14:18
Mon Sep 02 14:19:26 EDT 2019 org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer,152
Mon Sep 02 14:19:29 EDT 2019 org.apache.commons.math.ConvergingAlgorithmImpl,82
Mon Sep 02 14:19:41 EDT 2019 org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer,105
Mon Sep 02 14:21:49 EDT 2019 org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer,113
Timeout time : 19/09/02 14:52
Current failed test : org.apache.commons.math.optimization.univariate.BrentOptimizerTest::testSinMin_purify_5 | 19/09/02 14:52
Mon Sep 02 14:53:04 EDT 2019 org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer,152
Mon Sep 02 14:53:07 EDT 2019 org.apache.commons.math.ConvergingAlgorithmImpl,82
Mon Sep 02 14:53:18 EDT 2019 org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer,105
Mon Sep 02 14:55:25 EDT 2019 org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer,113
Timeout time : 19/09/02 15:26
Current failed test : org.apache.commons.math.optimization.univariate.BrentOptimizerTest::testSinMin_purify_8 | 19/09/02 15:26
Mon Sep 02 15:27:00 EDT 2019 org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer,152
Mon Sep 02 15:27:03 EDT 2019 org.apache.commons.math.ConvergingAlgorithmImpl,82
Mon Sep 02 15:27:16 EDT 2019 org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer,105
Mon Sep 02 15:29:26 EDT 2019 org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer,113
Timeout time : 19/09/02 16:00
Current failed test : org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest::testSinMin_purify_3 | 19/09/02 16:00
Mon Sep 02 16:00:40 EDT 2019 org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer,152
Mon Sep 02 16:00:44 EDT 2019 org.apache.commons.math.ConvergingAlgorithmImpl,82
Mon Sep 02 16:00:56 EDT 2019 org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer,105
Mon Sep 02 16:03:08 EDT 2019 org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer,113

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
evaluations=0;
return functionValue;

Time : 19/09/02 16:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
evaluations=0;
return result;

Time : 19/09/02 16:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.min=min;
evaluations=0;
return functionValue;

Time : 19/09/02 16:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.max=max;
evaluations=0;
return functionValue;

Time : 19/09/02 16:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.startValue=startValue;
evaluations=0;
return functionValue;

Time : 19/09/02 16:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.goal=goal;
evaluations=0;
return functionValue;

Time : 19/09/02 16:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.function=function;
evaluations=0;
return functionValue;

Time : 19/09/02 16:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
functionValue=Double.NaN;
evaluations=0;
return functionValue;

Time : 19/09/02 16:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
evaluations=0;
resetIterationsCounter();
return functionValue;

Time : 19/09/02 16:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.min=min;
evaluations=0;
return result;

Time : 19/09/02 16:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.max=max;
evaluations=0;
return result;

Time : 19/09/02 16:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.startValue=startValue;
evaluations=0;
return result;

Time : 19/09/02 16:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.goal=goal;
evaluations=0;
return result;

Time : 19/09/02 16:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.function=function;
evaluations=0;
return result;

Time : 19/09/02 16:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
functionValue=Double.NaN;
evaluations=0;
return result;

Time : 19/09/02 16:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
evaluations=0;
resetIterationsCounter();
return result;

Time : 19/09/02 16:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.min=min;
this.max=max;
evaluations=0;
return functionValue;

Time : 19/09/02 16:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.min=min;
this.startValue=startValue;
evaluations=0;
return functionValue;

Time : 19/09/02 16:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.min=min;
this.goal=goal;
evaluations=0;
return functionValue;

Time : 19/09/02 16:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.min=min;
this.function=function;
evaluations=0;
return functionValue;

Time : 19/09/02 16:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.min=min;
functionValue=Double.NaN;
evaluations=0;
return functionValue;

Time : 19/09/02 16:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.min=min;
evaluations=0;
resetIterationsCounter();
return functionValue;

Time : 19/09/02 16:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.max=max;
this.startValue=startValue;
evaluations=0;
return functionValue;

Time : 19/09/02 16:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.max=max;
this.goal=goal;
evaluations=0;
return functionValue;

Time : 19/09/02 16:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.max=max;
this.function=function;
evaluations=0;
return functionValue;

Time : 19/09/02 16:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.max=max;
functionValue=Double.NaN;
evaluations=0;
return functionValue;

Time : 19/09/02 16:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.max=max;
evaluations=0;
resetIterationsCounter();
return functionValue;

Time : 19/09/02 16:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.startValue=startValue;
this.goal=goal;
evaluations=0;
return functionValue;

Time : 19/09/02 16:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.startValue=startValue;
this.function=function;
evaluations=0;
return functionValue;

Time : 19/09/02 16:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.startValue=startValue;
functionValue=Double.NaN;
evaluations=0;
return functionValue;

Time : 19/09/02 16:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.startValue=startValue;
evaluations=0;
resetIterationsCounter();
return functionValue;

Time : 19/09/02 16:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.goal=goal;
this.function=function;
evaluations=0;
return functionValue;

Time : 19/09/02 16:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.goal=goal;
functionValue=Double.NaN;
evaluations=0;
return functionValue;

Time : 19/09/02 16:33
----------------------------------------
Timeout time : 19/09/02 16:34
Current failed test : org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest::testQuinticMin_purify_3 | 19/09/02 16:34
Mon Sep 02 16:34:44 EDT 2019 org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer,152
Mon Sep 02 16:34:47 EDT 2019 org.apache.commons.math.ConvergingAlgorithmImpl,82
Mon Sep 02 16:34:59 EDT 2019 org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer,105
Mon Sep 02 16:37:09 EDT 2019 org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer,113
Timeout time : 19/09/02 17:07
Current failed test : org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest::testQuinticMin_purify_4 | 19/09/02 17:07
Mon Sep 02 17:08:21 EDT 2019 org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer,152
Mon Sep 02 17:08:24 EDT 2019 org.apache.commons.math.ConvergingAlgorithmImpl,82
Mon Sep 02 17:08:36 EDT 2019 org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer,105
Mon Sep 02 17:10:45 EDT 2019 org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer,113

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
evaluations=0;
return functionValue;

Time : 19/09/02 17:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
evaluations=0;
return result;

Time : 19/09/02 17:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.min=min;
evaluations=0;
return functionValue;

Time : 19/09/02 17:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.max=max;
evaluations=0;
return functionValue;

Time : 19/09/02 17:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.startValue=startValue;
evaluations=0;
return functionValue;

Time : 19/09/02 17:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.goal=goal;
evaluations=0;
return functionValue;

Time : 19/09/02 17:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.function=function;
evaluations=0;
return functionValue;

Time : 19/09/02 17:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
functionValue=Double.NaN;
evaluations=0;
return functionValue;

Time : 19/09/02 17:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
evaluations=0;
resetIterationsCounter();
return functionValue;

Time : 19/09/02 17:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.min=min;
evaluations=0;
return result;

Time : 19/09/02 17:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.max=max;
evaluations=0;
return result;

Time : 19/09/02 17:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.startValue=startValue;
evaluations=0;
return result;

Time : 19/09/02 17:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.goal=goal;
evaluations=0;
return result;

Time : 19/09/02 17:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.function=function;
evaluations=0;
return result;

Time : 19/09/02 17:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
functionValue=Double.NaN;
evaluations=0;
return result;

Time : 19/09/02 17:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
evaluations=0;
resetIterationsCounter();
return result;

Time : 19/09/02 17:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.min=min;
this.max=max;
evaluations=0;
return functionValue;

Time : 19/09/02 17:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.min=min;
this.startValue=startValue;
evaluations=0;
return functionValue;

Time : 19/09/02 17:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.min=min;
this.goal=goal;
evaluations=0;
return functionValue;

Time : 19/09/02 17:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.min=min;
this.function=function;
evaluations=0;
return functionValue;

Time : 19/09/02 17:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.min=min;
functionValue=Double.NaN;
evaluations=0;
return functionValue;

Time : 19/09/02 17:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.min=min;
evaluations=0;
resetIterationsCounter();
return functionValue;

Time : 19/09/02 17:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.max=max;
this.startValue=startValue;
evaluations=0;
return functionValue;

Time : 19/09/02 17:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.max=max;
this.goal=goal;
evaluations=0;
return functionValue;

Time : 19/09/02 17:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.max=max;
this.function=function;
evaluations=0;
return functionValue;

Time : 19/09/02 17:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.max=max;
functionValue=Double.NaN;
evaluations=0;
return functionValue;

Time : 19/09/02 17:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.max=max;
evaluations=0;
resetIterationsCounter();
return functionValue;

Time : 19/09/02 17:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.startValue=startValue;
this.goal=goal;
evaluations=0;
return functionValue;

Time : 19/09/02 17:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.startValue=startValue;
this.function=function;
evaluations=0;
return functionValue;

Time : 19/09/02 17:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.startValue=startValue;
functionValue=Double.NaN;
evaluations=0;
return functionValue;

Time : 19/09/02 17:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.startValue=startValue;
evaluations=0;
resetIterationsCounter();
return functionValue;

Time : 19/09/02 17:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.goal=goal;
this.function=function;
evaluations=0;
return functionValue;

Time : 19/09/02 17:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(functionValue==Double.NaN){
 final double opt=getResult();
try{
functionValue=function.value(opt);
}catch (FunctionEvaluationException e) {
  throw new RuntimeException(e);
}

}
this.goal=goal;
functionValue=Double.NaN;
evaluations=0;
return functionValue;

Time : 19/09/02 17:41
----------------------------------------
Timeout time : 19/09/02 17:41
Current failed test : org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest::testQuinticMin_purify_8 | 19/09/02 17:41
Mon Sep 02 17:42:14 EDT 2019 org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer,152
Mon Sep 02 17:42:17 EDT 2019 org.apache.commons.math.ConvergingAlgorithmImpl,82
Mon Sep 02 17:42:28 EDT 2019 org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer,105
Mon Sep 02 17:44:37 EDT 2019 org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer,113
Timeout time : 19/09/02 18:15
Current failed test : org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest::testQuinticMin_purify_9 | 19/09/02 18:15
Mon Sep 02 18:15:52 EDT 2019 org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer,152
Mon Sep 02 18:15:55 EDT 2019 org.apache.commons.math.ConvergingAlgorithmImpl,82
Mon Sep 02 18:16:07 EDT 2019 org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer,105
Mon Sep 02 18:18:14 EDT 2019 org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer,113
Timeout time : 19/09/02 18:48
