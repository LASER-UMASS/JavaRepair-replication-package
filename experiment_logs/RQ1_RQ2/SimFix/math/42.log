=================================================
Project : math_42	start : 19/09/02 13:43
Current failed test : org.apache.commons.math.optimization.linear.SimplexSolverTest::testMath713NegativeVariable | 19/09/02 13:44
Mon Sep 02 13:45:04 EDT 2019 org.apache.commons.math.optimization.RealPointValuePair,68
Mon Sep 02 13:45:57 EDT 2019 Mon Sep 02 13:45:57 EDT 2019 : org.apache.commons.math.optimization.linear.SimplexSolver,181=>Find no block
Mon Sep 02 13:45:58 EDT 2019 org.apache.commons.math.optimization.linear.SimplexTableau,347

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(getBasicRow(col)!=null){
columnsToDrop.add(col);
}

Time : 19/09/02 13:46
----------------------------------------
Mon Sep 02 13:47:52 EDT 2019 Mon Sep 02 13:47:52 EDT 2019 : org.apache.commons.math.linear.Array2DRowRealMatrix,73=>Find no block
Mon Sep 02 13:47:53 EDT 2019 org.apache.commons.math.linear.Array2DRowRealMatrix,74
Mon Sep 02 13:47:58 EDT 2019 Mon Sep 02 13:47:58 EDT 2019 : org.apache.commons.math.linear.Array2DRowRealMatrix,75=>Find no block
Mon Sep 02 13:47:59 EDT 2019 org.apache.commons.math.linear.Array2DRowRealMatrix,261

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
i++;
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

Time : 19/09/02 14:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 14:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(subMatrix[i].length!=column){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 14:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=nCols;i<data.length;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 14:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=nCols;i<row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 14:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<data.length;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,column);
}

Time : 19/09/02 14:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(nCols,subMatrix[i].length);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 14:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
MatrixUtils.checkRowIndex(this,row);
for(int i=0;i<row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 14:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
MatrixUtils.checkColumnIndex(this,column);
for(int i=0;i<row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 14:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
MatrixUtils.checkRowIndex(this,row);
for(int i=0;i<row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(nCols,subMatrix[i].length);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 14:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
MatrixUtils.checkColumnIndex(this,column);
for(int i=0;i<row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(nCols,subMatrix[i].length);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 14:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
MatrixUtils.checkRowIndex(this,row);
MatrixUtils.checkColumnIndex(this,column);
for(int i=0;i<row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 14:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
MatrixUtils.checkRowIndex(this,row);
MatrixUtils.checkColumnIndex(this,column);
for(int i=0;i<row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(nCols,subMatrix[i].length);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 14:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<column;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 14:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(subMatrix[i].length!=i){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 14:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(i!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 14:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<column+row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 14:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=column;i<column+row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 14:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(subMatrix[i].length==nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 14:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(nCols==-1){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 14:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(subMatrix[i].length!=-1){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 14:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(subMatrix[i].length!=nCols){
throw new IllegalArgumentException("originalData and permutedData must contain the same objects.");
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 14:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(subMatrix[i].length==-1){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 14:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(subMatrix[i].length==nCols){
throw new IllegalArgumentException("originalData and permutedData must contain the same objects.");
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 14:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(nCols==-1){
throw new IllegalArgumentException("originalData and permutedData must contain the same objects.");
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 14:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(subMatrix[i].length!=-1){
throw new IllegalArgumentException("originalData and permutedData must contain the same objects.");
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 14:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(subMatrix[i].length==-1){
throw new IllegalArgumentException("originalData and permutedData must contain the same objects.");
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 14:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=column;i<row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 14:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(((i>>column)&1)!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 14:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(((i>>column)&1)==nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 14:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(data==null){
if(row>0){
throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET,row);
}
if(column>0){
throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET,column);
}
MathUtils.checkNotNull(subMatrix);
 final int nRows=subMatrix.length;
if(nRows==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
 final int nCols=subMatrix[0].length;
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=nCols;i<data.length;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}
}else {
super.setSubMatrix(subMatrix,row,column);
}

Time : 19/09/02 15:05
----------------------------------------
Mon Sep 02 15:09:41 EDT 2019 org.apache.commons.math.linear.Array2DRowRealMatrix,262
Mon Sep 02 15:09:42 EDT 2019 org.apache.commons.math.linear.Array2DRowRealMatrix,265
Mon Sep 02 15:09:44 EDT 2019 org.apache.commons.math.linear.Array2DRowRealMatrix,268
Mon Sep 02 15:25:48 EDT 2019 org.apache.commons.math.linear.Array2DRowRealMatrix,269
Mon Sep 02 15:39:44 EDT 2019 org.apache.commons.math.linear.Array2DRowRealMatrix,270
Mon Sep 02 15:39:45 EDT 2019 org.apache.commons.math.linear.Array2DRowRealMatrix,274
Mon Sep 02 16:01:13 EDT 2019 org.apache.commons.math.linear.Array2DRowRealMatrix,275
Mon Sep 02 16:01:15 EDT 2019 org.apache.commons.math.linear.Array2DRowRealMatrix,278

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=0;i<row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 16:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=0;i<column;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 16:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=nRows;i<data.length;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 16:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=0;i<row;++i){
if(subMatrix[i].length!=i){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 16:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=0;i<data.length;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,column);
}

Time : 19/09/02 16:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=0;i<row;++i){
if(i!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 16:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=0;i<row;++i){
if(subMatrix[i].length!=column){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 16:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=0;i<row;++i){
if(i!=column){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 16:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=column;i<row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 16:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=0;i<column+row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 16:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=column;i<column+row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 16:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=column;i<column;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 16:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=0;i<column;++i){
if(subMatrix[i].length==nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 16:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=column;i<column;++i){
if(subMatrix[i].length==nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 16:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=0;i<row;++i){
if(subMatrix[i].length==nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 16:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=0;i<row;++i){
if(((i>>column)&1)!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 16:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=0;i<row;++i){
if(((i>>column)&1)==nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 16:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=nRows;i<column;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 19/09/02 16:50
----------------------------------------
Mon Sep 02 16:56:00 EDT 2019 org.apache.commons.math.linear.Array2DRowRealMatrix,279
Mon Sep 02 16:56:01 EDT 2019 org.apache.commons.math.linear.Array2DRowRealMatrix,280
Mon Sep 02 16:56:02 EDT 2019 org.apache.commons.math.linear.Array2DRowRealMatrix,283
Mon Sep 02 16:56:03 EDT 2019 Mon Sep 02 16:56:03 EDT 2019 : org.apache.commons.math.linear.Array2DRowRealMatrix,285=>Find no block
Mon Sep 02 16:56:05 EDT 2019 Mon Sep 02 16:56:05 EDT 2019 : org.apache.commons.math.linear.Array2DRowRealMatrix,289=>Find no block
Mon Sep 02 16:56:06 EDT 2019 org.apache.commons.math.linear.Array2DRowRealMatrix,525
Mon Sep 02 16:56:10 EDT 2019 Mon Sep 02 16:56:10 EDT 2019 : org.apache.commons.math.linear.Array2DRowRealMatrix,526=>Find no block
Mon Sep 02 16:56:11 EDT 2019 org.apache.commons.math.optimization.linear.SimplexTableau,332
Mon Sep 02 16:57:21 EDT 2019 org.apache.commons.math.optimization.linear.SimplexTableau,333

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i+1);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

Time : 19/09/02 16:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
numArtificialVariables++;
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

Time : 19/09/02 17:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i+1);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

Time : 19/09/02 17:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
numArtificialVariables++;
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

Time : 19/09/02 17:07
----------------------------------------
Mon Sep 02 17:09:30 EDT 2019 org.apache.commons.math.optimization.linear.SimplexTableau,336
Mon Sep 02 17:09:31 EDT 2019 org.apache.commons.math.optimization.linear.SimplexTableau,337
Mon Sep 02 17:09:32 EDT 2019 org.apache.commons.math.optimization.linear.SimplexTableau,338
Mon Sep 02 17:09:34 EDT 2019 org.apache.commons.math.optimization.linear.SimplexTableau,344

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=numArtificialVariables;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

Time : 19/09/02 17:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)!=null){
columnsToDrop.add(col);
}
}

Time : 19/09/02 17:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<NEGATIVE_VAR_COLUMN_LABEL.length();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

Time : 19/09/02 17:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<=getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

Time : 19/09/02 17:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
numArtificialVariables++;
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

Time : 19/09/02 17:16
----------------------------------------
Mon Sep 02 17:17:41 EDT 2019 org.apache.commons.math.optimization.linear.SimplexTableau,345
Mon Sep 02 17:17:42 EDT 2019 org.apache.commons.math.optimization.linear.SimplexTableau,346
Mon Sep 02 17:17:44 EDT 2019 org.apache.commons.math.optimization.linear.SimplexTableau,351

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
i++;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

Time : 19/09/02 17:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=0;j<getArtificialVariableOffset();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

Time : 19/09/02 17:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=0;j<NEGATIVE_VAR_COLUMN_LABEL.length();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

Time : 19/09/02 17:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=1;i<getHeight();i++){
if(i>=numArtificialVariables-1){
break;
}
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

Time : 19/09/02 17:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=1;i<getHeight();i++){
if(i>=numArtificialVariables){
break;
}
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

Time : 19/09/02 17:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=1;i<getHeight();i++){
i++;
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

Time : 19/09/02 17:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getNumArtificialVariables();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

Time : 19/09/02 17:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<=getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

Time : 19/09/02 17:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=numArtificialVariables;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

Time : 19/09/02 17:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)!=null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

Time : 19/09/02 17:41
----------------------------------------
Mon Sep 02 17:44:27 EDT 2019 org.apache.commons.math.optimization.linear.SimplexTableau,352
Mon Sep 02 17:44:28 EDT 2019 org.apache.commons.math.optimization.linear.SimplexTableau,353
Mon Sep 02 17:44:29 EDT 2019 org.apache.commons.math.optimization.linear.SimplexTableau,354
Mon Sep 02 17:44:30 EDT 2019 org.apache.commons.math.optimization.linear.SimplexTableau,355
Mon Sep 02 17:44:31 EDT 2019 org.apache.commons.math.optimization.linear.SimplexTableau,356
Mon Sep 02 17:44:32 EDT 2019 org.apache.commons.math.optimization.linear.SimplexTableau,361
Mon Sep 02 17:50:01 EDT 2019 org.apache.commons.math.optimization.linear.SimplexTableau,362
Mon Sep 02 17:50:02 EDT 2019 org.apache.commons.math.optimization.linear.SimplexTableau,365
Mon Sep 02 17:57:33 EDT 2019 org.apache.commons.math.optimization.linear.SimplexTableau,366
Mon Sep 02 17:57:34 EDT 2019 Mon Sep 02 17:57:34 EDT 2019 : org.apache.commons.math.optimization.linear.SimplexTableau,367=>Find no block
Mon Sep 02 17:57:35 EDT 2019 org.apache.commons.math.util.MathUtils,330
Mon Sep 02 17:58:10 EDT 2019 Mon Sep 02 17:58:10 EDT 2019 : org.apache.commons.math.util.MathUtils,333=>Find no block
Mon Sep 02 17:58:11 EDT 2019 Mon Sep 02 17:58:11 EDT 2019 : org.apache.commons.math.linear.AbstractRealMatrix,44=>Find no block
Mon Sep 02 17:58:12 EDT 2019 org.apache.commons.math.optimization.linear.SimplexSolver,174
Mon Sep 02 17:58:16 EDT 2019 org.apache.commons.math.linear.ArrayRealVector,447

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<data.length;i++){
v.setEntry(i,dot);
dot+=data[i]*vData[i];
}

Time : 19/09/02 18:06
----------------------------------------
Mon Sep 02 18:11:42 EDT 2019 org.apache.commons.math.linear.ArrayRealVector,448
Mon Sep 02 18:15:05 EDT 2019 org.apache.commons.math.linear.ArrayRealVector,449
Mon Sep 02 18:15:06 EDT 2019 org.apache.commons.math.linear.ArrayRealVector,450
Mon Sep 02 18:24:38 EDT 2019 org.apache.commons.math.linear.ArrayRealVector,451
Mon Sep 02 18:24:39 EDT 2019 org.apache.commons.math.linear.ArrayRealVector,452
Mon Sep 02 18:24:41 EDT 2019 org.apache.commons.math.linear.ArrayRealVector,454
Mon Sep 02 18:32:18 EDT 2019 org.apache.commons.math.optimization.linear.SimplexSolver,173
Mon Sep 02 18:32:19 EDT 2019 org.apache.commons.math.optimization.linear.SimplexSolver,178
Mon Sep 02 18:32:55 EDT 2019 org.apache.commons.math.optimization.linear.SimplexSolver,197
Mon Sep 02 18:34:05 EDT 2019 Mon Sep 02 18:34:05 EDT 2019 : org.apache.commons.math.optimization.RealPointValuePair,44=>Find no block
Mon Sep 02 18:34:06 EDT 2019 org.apache.commons.math.optimization.RealPointValuePair,45
Mon Sep 02 18:35:36 EDT 2019 org.apache.commons.math.optimization.RealPointValuePair,46
Mon Sep 02 18:35:37 EDT 2019 Mon Sep 02 18:35:37 EDT 2019 : org.apache.commons.math.optimization.RealPointValuePair,47=>Find no block
Mon Sep 02 18:35:38 EDT 2019 org.apache.commons.math.optimization.linear.LinearObjectiveFunction,92
Mon Sep 02 18:36:48 EDT 2019 org.apache.commons.math.optimization.linear.SimplexTableau,317
Mon Sep 02 18:37:23 EDT 2019 org.apache.commons.math.optimization.linear.SimplexTableau,320

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isInfinite(entry)&&(row==null)){
row=i;
}else if(!Precision.equals(entry,0.0,maxUlps)){
return null;
}

Time : 19/09/02 18:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<getHeight();i++){
 final double entry=getEntry(i,i);
if(Precision.equals(entry,1.0,maxUlps)&&(row==null)){
row=i;
}else if(!Precision.equals(entry,0.0,maxUlps)){
return null;
}
}

Time : 19/09/02 18:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=col;i<getHeight();i++){
 final double entry=getEntry(i,col);
if(Precision.equals(entry,1.0,maxUlps)&&(row==null)){
row=i;
}else if(!Precision.equals(entry,0.0,maxUlps)){
return null;
}
}

Time : 19/09/02 18:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<getHeight();i++){
 final double entry=getEntry(i,col);
if(Double.isInfinite(entry)&&(row==null)){
row=i;
}else if(!Precision.equals(entry,0.0,maxUlps)){
return null;
}
}

Time : 19/09/02 18:43
----------------------------------------
Timeout time : 19/09/02 18:45
