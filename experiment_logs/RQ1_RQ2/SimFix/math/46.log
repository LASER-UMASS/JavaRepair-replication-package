=================================================
Project : math_46	start : 19/09/02 13:45
Current failed test : org.apache.commons.math.complex.ComplexTest::testAtanI | 19/09/02 13:46
Mon Sep 02 13:47:00 EDT 2019 org.apache.commons.math.complex.Complex,260
Mon Sep 02 13:47:08 EDT 2019 org.apache.commons.math.complex.Complex,1183
Mon Sep 02 13:47:44 EDT 2019 org.apache.commons.math.complex.Complex,587
Mon Sep 02 13:51:09 EDT 2019 org.apache.commons.math.complex.Complex,258
Mon Sep 02 13:51:10 EDT 2019 org.apache.commons.math.complex.Complex,583
Mon Sep 02 13:51:15 EDT 2019 org.apache.commons.math.util.FastMath,1284
Mon Sep 02 13:52:29 EDT 2019 org.apache.commons.math.util.FastMath,1288

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==Double.POSITIVE_INFINITY){
if(hiPrec!=null){
hiPrec[0]=Double.POSITIVE_INFINITY;
}
return Double.NaN;
}

Time : 19/09/02 13:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==Double.POSITIVE_INFINITY){
if(E>=TWO_POWER_52||E<=-TWO_POWER_52){
return pow(-x,E);
}
if(hiPrec!=null){
hiPrec[0]=Double.POSITIVE_INFINITY;
}
return Double.NaN;
}

Time : 19/09/02 13:59
----------------------------------------
Mon Sep 02 14:01:36 EDT 2019 org.apache.commons.math.complex.Complex,253
Mon Sep 02 14:02:34 EDT 2019 org.apache.commons.math.complex.Complex,254
Mon Sep 02 14:03:23 EDT 2019 org.apache.commons.math.util.FastMath,3004
Mon Sep 02 14:04:38 EDT 2019 org.apache.commons.math.util.FastMath,3005
Mon Sep 02 14:04:39 EDT 2019 org.apache.commons.math.complex.Complex,329
Mon Sep 02 14:05:12 EDT 2019 org.apache.commons.math.complex.Complex,430

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isNaN(real)||Double.isInfinite(imaginary)){
return INF;
}

Time : 19/09/02 14:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isInfinite(real)&&Double.isInfinite(imaginary)){
return INF;
}

Time : 19/09/02 14:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isInfinite(imaginary)||Double.isNaN(imaginary)){
return INF;
}

Time : 19/09/02 14:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isInfinite(imaginary)||Double.isInfinite(imaginary)){
return INF;
}

Time : 19/09/02 14:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return NaN;
}

Time : 19/09/02 14:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isInfinite(real)||Double.isNaN(real)){
return NaN;
}

Time : 19/09/02 14:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isInfinite(real)||Double.isNaN(imaginary)){
return NaN;
}

Time : 19/09/02 14:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isNaN(imaginary)||Double.isInfinite(imaginary)){
return INF;
}

Time : 19/09/02 14:21
----------------------------------------
Mon Sep 02 14:23:17 EDT 2019 org.apache.commons.math.complex.Complex,276

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(d)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 14:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 14:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 14:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 14:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 14:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 14:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 14:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 14:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 14:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 14:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(d)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 14:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(d)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 14:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 14:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(d)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 14:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(c)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 14:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 14:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 14:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 15:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(d)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 15:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(c)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 15:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 15:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 15:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 15:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(d)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 15:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 15:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(d)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 15:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(c)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 15:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 15:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(d)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 15:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(c)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 15:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 15:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(d)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 15:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(c)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 15:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(real)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 15:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<=FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 15:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.ulp(1.0)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 15:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.ulp(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 15:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.log(real)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 15:51
----------------------------------------
Mon Sep 02 15:56:24 EDT 2019 org.apache.commons.math.complex.Complex,277
Mon Sep 02 15:56:33 EDT 2019 org.apache.commons.math.complex.Complex,278
Mon Sep 02 15:56:44 EDT 2019 org.apache.commons.math.complex.Complex,122

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isInfinite()){
return Double.NEGATIVE_INFINITY;
}

Time : 19/09/02 15:58
----------------------------------------
Mon Sep 02 16:00:27 EDT 2019 org.apache.commons.math.complex.Complex,263
Mon Sep 02 16:00:31 EDT 2019 org.apache.commons.math.complex.Complex,267
Mon Sep 02 16:01:08 EDT 2019 org.apache.commons.math.complex.Complex,268

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(c)<FastMath.abs(d)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 16:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(d)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 16:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 16:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 16:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 16:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 16:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double c=divisor.getReal();
 final double d=divisor.getImaginary();
if(FastMath.abs(d)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 19/09/02 16:15
----------------------------------------
Timeout time : 19/09/02 16:17
Current failed test : org.apache.commons.math.complex.ComplexTest::testDivideZero | 19/09/02 16:17
Mon Sep 02 16:18:18 EDT 2019 org.apache.commons.math.complex.Complex,260
Mon Sep 02 16:18:23 EDT 2019 org.apache.commons.math.complex.Complex,1183
Mon Sep 02 16:18:53 EDT 2019 org.apache.commons.math.complex.Complex,587
Mon Sep 02 16:22:04 EDT 2019 org.apache.commons.math.complex.Complex,258
Mon Sep 02 16:22:05 EDT 2019 org.apache.commons.math.complex.Complex,583
Mon Sep 02 16:22:09 EDT 2019 org.apache.commons.math.util.FastMath,1284
Mon Sep 02 16:23:18 EDT 2019 org.apache.commons.math.util.FastMath,1288
Mon Sep 02 16:28:15 EDT 2019 org.apache.commons.math.complex.Complex,253
Mon Sep 02 16:29:13 EDT 2019 org.apache.commons.math.complex.Complex,254
Mon Sep 02 16:30:02 EDT 2019 org.apache.commons.math.util.FastMath,3004
Mon Sep 02 16:31:13 EDT 2019 org.apache.commons.math.util.FastMath,3005
Mon Sep 02 16:31:14 EDT 2019 org.apache.commons.math.complex.Complex,329
Mon Sep 02 16:31:45 EDT 2019 org.apache.commons.math.complex.Complex,430
Mon Sep 02 16:33:42 EDT 2019 org.apache.commons.math.complex.Complex,276
Mon Sep 02 16:46:16 EDT 2019 org.apache.commons.math.complex.Complex,277
Mon Sep 02 16:46:17 EDT 2019 org.apache.commons.math.complex.Complex,278
Mon Sep 02 16:46:18 EDT 2019 org.apache.commons.math.complex.Complex,122
Mon Sep 02 16:46:51 EDT 2019 org.apache.commons.math.complex.Complex,263
Mon Sep 02 16:46:55 EDT 2019 org.apache.commons.math.complex.Complex,267
Mon Sep 02 16:47:30 EDT 2019 org.apache.commons.math.complex.Complex,268
Mon Sep 02 16:57:55 EDT 2019 org.apache.commons.math.complex.Complex,270
Mon Sep 02 16:57:56 EDT 2019 org.apache.commons.math.complex.Complex,754
Mon Sep 02 17:01:07 EDT 2019 org.apache.commons.math.util.FastMath,1256
Mon Sep 02 17:03:32 EDT 2019 Mon Sep 02 17:03:32 EDT 2019 : org.apache.commons.math.util.MathUtils,2337=>Find no block
Mon Sep 02 17:03:33 EDT 2019 org.apache.commons.math.util.MathUtils,2334
Mon Sep 02 17:04:10 EDT 2019 org.apache.commons.math.util.FastMath,1269
Mon Sep 02 17:20:55 EDT 2019 org.apache.commons.math.util.FastMath,1272
Mon Sep 02 17:20:56 EDT 2019 org.apache.commons.math.util.FastMath,1283
Mon Sep 02 17:20:57 EDT 2019 org.apache.commons.math.complex.Complex,164
Mon Sep 02 17:24:42 EDT 2019 org.apache.commons.math.util.FastMath,1266
Mon Sep 02 17:24:43 EDT 2019 org.apache.commons.math.util.FastMath,3003
Mon Sep 02 17:27:49 EDT 2019 Mon Sep 02 17:27:49 EDT 2019 : org.apache.commons.math.util.MathUtils,85=>Find no block
Mon Sep 02 17:27:51 EDT 2019 org.apache.commons.math.complex.Complex,379
Mon Sep 02 17:28:31 EDT 2019 org.apache.commons.math.complex.Complex,750
Mon Sep 02 17:28:32 EDT 2019 org.apache.commons.math.util.FastMath,2977
Mon Sep 02 18:07:47 EDT 2019 org.apache.commons.math.complex.Complex,497
Mon Sep 02 18:11:29 EDT 2019 org.apache.commons.math.util.FastMath,2973
Mon Sep 02 18:19:11 EDT 2019 org.apache.commons.math.complex.Complex,159
Mon Sep 02 18:19:12 EDT 2019 org.apache.commons.math.complex.Complex,160
Mon Sep 02 18:19:57 EDT 2019 org.apache.commons.math.complex.Complex,492
Mon Sep 02 18:19:58 EDT 2019 org.apache.commons.math.complex.Complex,493
Mon Sep 02 18:20:45 EDT 2019 org.apache.commons.math.complex.Complex,425
Mon Sep 02 18:20:46 EDT 2019 org.apache.commons.math.complex.Complex,121
Mon Sep 02 18:20:47 EDT 2019 org.apache.commons.math.complex.Complex,118
Mon Sep 02 18:21:01 EDT 2019 org.apache.commons.math.complex.Complex,421
Mon Sep 02 18:26:31 EDT 2019 org.apache.commons.math.complex.Complex,422
Mon Sep 02 18:26:32 EDT 2019 org.apache.commons.math.util.FastMath,3410
Mon Sep 02 18:27:20 EDT 2019 org.apache.commons.math.complex.Complex,327
Mon Sep 02 18:28:44 EDT 2019 org.apache.commons.math.complex.Complex,328
Mon Sep 02 18:28:45 EDT 2019 org.apache.commons.math.complex.Complex,326
Mon Sep 02 18:28:46 EDT 2019 org.apache.commons.math.complex.Complex,392
Mon Sep 02 18:28:50 EDT 2019 Mon Sep 02 18:28:50 EDT 2019 : org.apache.commons.math.complex.Complex,99=>Find no block
Mon Sep 02 18:28:51 EDT 2019 org.apache.commons.math.complex.Complex,100

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
this.real=real;
this.imaginary=imaginary;
isNaN=Double.isInfinite(imaginary)||Double.isNaN(imaginary);
isInfinite=!isNaN&&(Double.isInfinite(real)||Double.isInfinite(imaginary));
isZero=real==0&&imaginary==0;

Time : 19/09/02 18:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
this.real=real;
this.imaginary=imaginary;
isNaN=Double.isNaN(real)||Double.isInfinite(real);
isInfinite=!isNaN&&(Double.isInfinite(real)||Double.isInfinite(imaginary));
isZero=real==0&&imaginary==0;

Time : 19/09/02 18:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
this.real=real;
this.imaginary=imaginary;
isNaN=Double.isInfinite(real)||Double.isNaN(imaginary);
isInfinite=!isNaN&&(Double.isInfinite(real)||Double.isInfinite(imaginary));
isZero=real==0&&imaginary==0;

Time : 19/09/02 18:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
this.real=real;
this.imaginary=imaginary;
isNaN=Double.isNaN(real)||Double.isInfinite(imaginary);
isInfinite=!isNaN&&(Double.isInfinite(real)||Double.isInfinite(imaginary));
isZero=real==0&&imaginary==0;

Time : 19/09/02 18:35
----------------------------------------
Mon Sep 02 18:38:39 EDT 2019 org.apache.commons.math.complex.Complex,101
Mon Sep 02 18:38:40 EDT 2019 org.apache.commons.math.complex.Complex,103
Mon Sep 02 18:38:42 EDT 2019 org.apache.commons.math.complex.Complex,104
Mon Sep 02 18:38:43 EDT 2019 org.apache.commons.math.complex.Complex,106
Mon Sep 02 18:38:44 EDT 2019 Mon Sep 02 18:38:44 EDT 2019 : org.apache.commons.math.complex.Complex,107=>Find no block
Mon Sep 02 18:38:45 EDT 2019 Mon Sep 02 18:38:45 EDT 2019 : org.apache.commons.math.complex.Complex,58=>Find no block
Mon Sep 02 18:38:46 EDT 2019 Mon Sep 02 18:38:46 EDT 2019 : org.apache.commons.math.complex.Complex,61=>Find no block
Mon Sep 02 18:38:47 EDT 2019 Mon Sep 02 18:38:47 EDT 2019 : org.apache.commons.math.complex.Complex,64=>Find no block
Mon Sep 02 18:38:48 EDT 2019 Mon Sep 02 18:38:48 EDT 2019 : org.apache.commons.math.complex.Complex,66=>Find no block
Mon Sep 02 18:38:49 EDT 2019 Mon Sep 02 18:38:49 EDT 2019 : org.apache.commons.math.complex.Complex,68=>Find no block
Mon Sep 02 18:38:50 EDT 2019 org.apache.commons.math.complex.Complex,323

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(this!=other){
return true;
}

Time : 19/09/02 18:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(this!=null){
return true;
}

Time : 19/09/02 18:42
----------------------------------------
Mon Sep 02 18:44:11 EDT 2019 Mon Sep 02 18:44:11 EDT 2019 : org.apache.commons.math.util.FastMath,80=>Find no block
Mon Sep 02 18:44:12 EDT 2019 Mon Sep 02 18:44:12 EDT 2019 : org.apache.commons.math.util.FastMath,85=>Find no block
Mon Sep 02 18:44:14 EDT 2019 Mon Sep 02 18:44:14 EDT 2019 : org.apache.commons.math.util.FastMath,90=>Find no block
Mon Sep 02 18:44:15 EDT 2019 Mon Sep 02 18:44:15 EDT 2019 : org.apache.commons.math.util.FastMath,95=>Find no block
Mon Sep 02 18:44:16 EDT 2019 Mon Sep 02 18:44:16 EDT 2019 : org.apache.commons.math.util.FastMath,98=>Find no block
Mon Sep 02 18:44:17 EDT 2019 Mon Sep 02 18:44:17 EDT 2019 : org.apache.commons.math.util.FastMath,101=>Find no block
Mon Sep 02 18:44:18 EDT 2019 Mon Sep 02 18:44:18 EDT 2019 : org.apache.commons.math.util.FastMath,110=>Find no block
Mon Sep 02 18:44:19 EDT 2019 Mon Sep 02 18:44:19 EDT 2019 : org.apache.commons.math.util.FastMath,130=>Find no block
Mon Sep 02 18:44:20 EDT 2019 Mon Sep 02 18:44:20 EDT 2019 : org.apache.commons.math.util.FastMath,143=>Find no block
Mon Sep 02 18:44:21 EDT 2019 Mon Sep 02 18:44:21 EDT 2019 : org.apache.commons.math.util.FastMath,153=>Find no block
Mon Sep 02 18:44:22 EDT 2019 Mon Sep 02 18:44:22 EDT 2019 : org.apache.commons.math.util.FastMath,156=>Find no block
Mon Sep 02 18:44:24 EDT 2019 Mon Sep 02 18:44:24 EDT 2019 : org.apache.commons.math.util.FastMath,159=>Find no block
Mon Sep 02 18:44:25 EDT 2019 Mon Sep 02 18:44:25 EDT 2019 : org.apache.commons.math.util.FastMath,162=>Find no block
Mon Sep 02 18:44:26 EDT 2019 Mon Sep 02 18:44:26 EDT 2019 : org.apache.commons.math.util.FastMath,165=>Find no block
Mon Sep 02 18:44:27 EDT 2019 Mon Sep 02 18:44:27 EDT 2019 : org.apache.commons.math.util.FastMath,168=>Find no block
Mon Sep 02 18:44:29 EDT 2019 Mon Sep 02 18:44:29 EDT 2019 : org.apache.commons.math.util.FastMath,171=>Find no block
Mon Sep 02 18:44:30 EDT 2019 Mon Sep 02 18:44:30 EDT 2019 : org.apache.commons.math.util.FastMath,192=>Find no block
Mon Sep 02 18:44:32 EDT 2019 Mon Sep 02 18:44:32 EDT 2019 : org.apache.commons.math.util.FastMath,200=>Find no block
Mon Sep 02 18:44:33 EDT 2019 Mon Sep 02 18:44:33 EDT 2019 : org.apache.commons.math.util.FastMath,203=>Find no block
Mon Sep 02 18:44:34 EDT 2019 Mon Sep 02 18:44:34 EDT 2019 : org.apache.commons.math.util.FastMath,233=>Find no block
Mon Sep 02 18:44:35 EDT 2019 Mon Sep 02 18:44:35 EDT 2019 : org.apache.commons.math.util.FastMath,234=>Find no block
Mon Sep 02 18:44:36 EDT 2019 Mon Sep 02 18:44:36 EDT 2019 : org.apache.commons.math.util.FastMath,235=>Find no block
Mon Sep 02 18:44:37 EDT 2019 Mon Sep 02 18:44:37 EDT 2019 : org.apache.commons.math.util.FastMath,238=>Find no block
Mon Sep 02 18:44:38 EDT 2019 Mon Sep 02 18:44:38 EDT 2019 : org.apache.commons.math.util.FastMath,239=>Find no block
Mon Sep 02 18:44:39 EDT 2019 Mon Sep 02 18:44:39 EDT 2019 : org.apache.commons.math.util.FastMath,242=>Find no block
Mon Sep 02 18:44:41 EDT 2019 Mon Sep 02 18:44:41 EDT 2019 : org.apache.commons.math.util.FastMath,243=>Find no block
Mon Sep 02 18:44:42 EDT 2019 Mon Sep 02 18:44:42 EDT 2019 : org.apache.commons.math.util.FastMath,244=>Find no block
Mon Sep 02 18:44:43 EDT 2019 Mon Sep 02 18:44:43 EDT 2019 : org.apache.commons.math.util.FastMath,245=>Find no block
Mon Sep 02 18:44:44 EDT 2019 Mon Sep 02 18:44:44 EDT 2019 : org.apache.commons.math.util.FastMath,247=>Find no block
Mon Sep 02 18:44:45 EDT 2019 Mon Sep 02 18:44:45 EDT 2019 : org.apache.commons.math.util.FastMath,249=>Find no block
Mon Sep 02 18:44:46 EDT 2019 Mon Sep 02 18:44:46 EDT 2019 : org.apache.commons.math.util.FastMath,250=>Find no block
Mon Sep 02 18:44:47 EDT 2019 Mon Sep 02 18:44:47 EDT 2019 : org.apache.commons.math.util.FastMath,251=>Find no block
Mon Sep 02 18:44:49 EDT 2019 Mon Sep 02 18:44:49 EDT 2019 : org.apache.commons.math.util.FastMath,256=>Find no block
Mon Sep 02 18:44:50 EDT 2019 Mon Sep 02 18:44:50 EDT 2019 : org.apache.commons.math.util.FastMath,257=>Find no block
Mon Sep 02 18:44:51 EDT 2019 Mon Sep 02 18:44:51 EDT 2019 : org.apache.commons.math.util.FastMath,258=>Find no block
Mon Sep 02 18:44:52 EDT 2019 Mon Sep 02 18:44:52 EDT 2019 : org.apache.commons.math.util.FastMath,259=>Find no block
Mon Sep 02 18:44:53 EDT 2019 Mon Sep 02 18:44:53 EDT 2019 : org.apache.commons.math.util.FastMath,263=>Find no block
Mon Sep 02 18:44:54 EDT 2019 Mon Sep 02 18:44:54 EDT 2019 : org.apache.commons.math.util.FastMath,264=>Find no block
Mon Sep 02 18:44:55 EDT 2019 Mon Sep 02 18:44:55 EDT 2019 : org.apache.commons.math.util.FastMath,265=>Find no block
Mon Sep 02 18:44:56 EDT 2019 Mon Sep 02 18:44:56 EDT 2019 : org.apache.commons.math.util.FastMath,269=>Find no block
Mon Sep 02 18:44:57 EDT 2019 Mon Sep 02 18:44:57 EDT 2019 : org.apache.commons.math.util.FastMath,270=>Find no block
Mon Sep 02 18:44:59 EDT 2019 org.apache.commons.math.util.FastMath,1012
Mon Sep 02 18:45:16 EDT 2019 org.apache.commons.math.util.FastMath,1013
Mon Sep 02 18:45:17 EDT 2019 org.apache.commons.math.util.FastMath,1014
Mon Sep 02 18:45:50 EDT 2019 org.apache.commons.math.util.FastMath,1015
Mon Sep 02 18:47:44 EDT 2019 org.apache.commons.math.util.FastMath,1016
Timeout time : 19/09/02 18:48
