=================================================
Project : math_22	start : 19/09/02 13:44
Current failed test : org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive | 19/09/02 13:45
Mon Sep 02 13:46:21 EDT 2019 org.apache.commons.math3.distribution.FDistribution,275
Mon Sep 02 13:46:30 EDT 2019 org.apache.commons.math3.distribution.UniformRealDistribution,184
Mon Sep 02 13:46:37 EDT 2019 org.apache.commons.math3.util.FastMath,1107

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==0){
return F_1_4;
}

Time : 19/09/02 13:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==0){
return F_3_4;
}

Time : 19/09/02 13:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==0){
return F_1_2;
}

Time : 19/09/02 13:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==0){
if(E<0||1/E<0){
return -Math.PI*F_1_2;
}
return F_1_2;
}

Time : 19/09/02 13:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==0){
return x;
}

Time : 19/09/02 13:55
----------------------------------------
Mon Sep 02 13:58:05 EDT 2019 org.apache.commons.math3.distribution.FDistribution,129

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.floor(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 19/09/02 13:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(numeratorDegreesOfFreedom);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 19/09/02 14:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(numeratorDegreesOfFreedom);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.sqrt(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 19/09/02 14:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(numeratorDegreesOfFreedom);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.sqrt(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 19/09/02 14:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(numeratorDegreesOfFreedom);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.exp(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 19/09/02 14:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(numeratorDegreesOfFreedom);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.sqrt(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.sqrt(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 19/09/02 14:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(numeratorDegreesOfFreedom);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.sqrt(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.exp(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 19/09/02 14:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(denominatorDegreesOfFreedom);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 19/09/02 14:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log1p(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 19/09/02 14:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log1p(denominatorDegreesOfFreedom);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 19/09/02 14:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.sqrt(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 19/09/02 14:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.exp(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 19/09/02 14:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(logm+x*logn);

Time : 19/09/02 14:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(-0.5*logn);

Time : 19/09/02 14:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.abs(x);
 final double logn=FastMath.abs(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 19/09/02 14:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.abs(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 19/09/02 14:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.abs(x);
 final double logn=FastMath.abs(numeratorDegreesOfFreedom);
 final double logm=FastMath.abs(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 19/09/02 14:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.abs(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.abs(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 19/09/02 14:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isInfinite(numeratorDegreesOfFreedom)||x==0.0){
return x;
}
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 19/09/02 14:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isInfinite(numeratorDegreesOfFreedom)||x==0.0){
return x;
}
 final double nhalf=x/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 19/09/02 14:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.abs(mhalf);

Time : 19/09/02 14:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.max(mhalf,nhalf);

Time : 19/09/02 14:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.abs(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.max(mhalf,nhalf);

Time : 19/09/02 14:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(x);
 final double logn=FastMath.abs(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.max(mhalf,nhalf);

Time : 19/09/02 14:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.abs(x);
 final double logn=FastMath.abs(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.max(mhalf,nhalf);

Time : 19/09/02 14:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.sqrt(x);
 final double logn=FastMath.sqrt(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 19/09/02 14:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/4;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.sqrt(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 19/09/02 14:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/4;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.sqrt(x);
 final double logn=FastMath.sqrt(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 19/09/02 14:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.signum(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 19/09/02 14:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.max(FastMath.max(mhalf,nhalf),logn);

Time : 19/09/02 14:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.abs(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.max(FastMath.max(mhalf,nhalf),logn);

Time : 19/09/02 14:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(x);
 final double logn=FastMath.abs(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.max(FastMath.max(mhalf,nhalf),logn);

Time : 19/09/02 14:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.abs(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.max(FastMath.max(mhalf,nhalf),logn);

Time : 19/09/02 14:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.abs(x);
 final double logn=FastMath.abs(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.max(FastMath.max(mhalf,nhalf),logn);

Time : 19/09/02 14:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.abs(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.abs(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.max(FastMath.max(mhalf,nhalf),logn);

Time : 19/09/02 15:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(x);
 final double logn=FastMath.abs(numeratorDegreesOfFreedom);
 final double logm=FastMath.abs(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.max(FastMath.max(mhalf,nhalf),logn);

Time : 19/09/02 15:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.abs(x);
 final double logn=FastMath.abs(numeratorDegreesOfFreedom);
 final double logm=FastMath.abs(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.max(FastMath.max(mhalf,nhalf),logn);

Time : 19/09/02 15:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
x=numeratorDegreesOfFreedom;
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 19/09/02 15:06
----------------------------------------
Mon Sep 02 15:11:09 EDT 2019 org.apache.commons.math3.distribution.FDistribution,130
Mon Sep 02 15:11:10 EDT 2019 org.apache.commons.math3.distribution.FDistribution,131
Mon Sep 02 15:11:11 EDT 2019 org.apache.commons.math3.distribution.FDistribution,132
Mon Sep 02 15:11:12 EDT 2019 org.apache.commons.math3.distribution.FDistribution,133
Mon Sep 02 15:11:13 EDT 2019 org.apache.commons.math3.distribution.FDistribution,134
Mon Sep 02 15:11:15 EDT 2019 org.apache.commons.math3.distribution.FDistribution,136
Mon Sep 02 15:11:16 EDT 2019 org.apache.commons.math3.distribution.UniformRealDistribution,109
Mon Sep 02 15:18:52 EDT 2019 org.apache.commons.math3.distribution.UniformRealDistribution,112
Mon Sep 02 15:28:46 EDT 2019 org.apache.commons.math3.distribution.UniformRealDistribution,174
Mon Sep 02 15:31:21 EDT 2019 org.apache.commons.math3.special.Beta,170
Mon Sep 02 15:32:15 EDT 2019 org.apache.commons.math3.distribution.FDistribution,258
Mon Sep 02 15:32:23 EDT 2019 org.apache.commons.math3.util.FastMath,864
Mon Sep 02 15:36:47 EDT 2019 org.apache.commons.math3.util.FastMath,866
Mon Sep 02 15:36:48 EDT 2019 org.apache.commons.math3.util.FastMath,874
Mon Sep 02 15:38:34 EDT 2019 org.apache.commons.math3.util.FastMath,875
Mon Sep 02 15:38:36 EDT 2019 org.apache.commons.math3.random.AbstractWell,72
Mon Sep 02 15:38:42 EDT 2019 Mon Sep 02 15:38:42 EDT 2019 : org.apache.commons.math3.random.AbstractWell,73=>Find no block
Mon Sep 02 15:38:43 EDT 2019 org.apache.commons.math3.random.AbstractWell,155
Mon Sep 02 15:38:47 EDT 2019 org.apache.commons.math3.random.AbstractWell,156
Mon Sep 02 15:38:48 EDT 2019 org.apache.commons.math3.random.AbstractWell,179
Mon Sep 02 15:39:05 EDT 2019 Mon Sep 02 15:39:05 EDT 2019 : org.apache.commons.math3.random.AbstractWell,180=>Find no block
Mon Sep 02 15:39:07 EDT 2019 org.apache.commons.math3.random.Well19937c,57
Mon Sep 02 15:39:11 EDT 2019 Mon Sep 02 15:39:11 EDT 2019 : org.apache.commons.math3.random.Well19937c,58=>Find no block
Mon Sep 02 15:39:12 EDT 2019 Mon Sep 02 15:39:12 EDT 2019 : org.apache.commons.math3.random.AbstractWell,94=>Find no block
Mon Sep 02 15:39:13 EDT 2019 org.apache.commons.math3.random.AbstractWell,99
Mon Sep 02 15:48:42 EDT 2019 org.apache.commons.math3.random.AbstractWell,100
Mon Sep 02 15:48:44 EDT 2019 org.apache.commons.math3.random.AbstractWell,101
Mon Sep 02 15:54:55 EDT 2019 org.apache.commons.math3.random.AbstractWell,102
Mon Sep 02 15:58:11 EDT 2019 org.apache.commons.math3.random.AbstractWell,106
Mon Sep 02 16:01:07 EDT 2019 org.apache.commons.math3.random.AbstractWell,107
Mon Sep 02 16:01:41 EDT 2019 org.apache.commons.math3.random.AbstractWell,108
Mon Sep 02 16:02:16 EDT 2019 org.apache.commons.math3.random.AbstractWell,109
Mon Sep 02 16:02:50 EDT 2019 org.apache.commons.math3.random.AbstractWell,110
Mon Sep 02 16:09:15 EDT 2019 org.apache.commons.math3.random.AbstractWell,111
Timeout time : 19/09/02 16:16
Current failed test : org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive | 19/09/02 16:16
Mon Sep 02 16:17:09 EDT 2019 org.apache.commons.math3.distribution.FDistribution,275
Mon Sep 02 16:17:13 EDT 2019 org.apache.commons.math3.distribution.UniformRealDistribution,184
Mon Sep 02 16:17:18 EDT 2019 org.apache.commons.math3.util.FastMath,1107
Mon Sep 02 16:20:46 EDT 2019 org.apache.commons.math3.distribution.FDistribution,129
Mon Sep 02 16:34:26 EDT 2019 org.apache.commons.math3.distribution.FDistribution,130
Mon Sep 02 16:34:28 EDT 2019 org.apache.commons.math3.distribution.FDistribution,131
Mon Sep 02 16:34:29 EDT 2019 org.apache.commons.math3.distribution.FDistribution,132
Mon Sep 02 16:34:31 EDT 2019 org.apache.commons.math3.distribution.FDistribution,133
Mon Sep 02 16:34:32 EDT 2019 org.apache.commons.math3.distribution.FDistribution,134
Mon Sep 02 16:34:33 EDT 2019 org.apache.commons.math3.distribution.FDistribution,136
Mon Sep 02 16:34:34 EDT 2019 org.apache.commons.math3.distribution.UniformRealDistribution,109
Mon Sep 02 16:42:00 EDT 2019 org.apache.commons.math3.distribution.UniformRealDistribution,112
Mon Sep 02 16:51:29 EDT 2019 org.apache.commons.math3.distribution.UniformRealDistribution,174
Mon Sep 02 16:54:06 EDT 2019 org.apache.commons.math3.special.Beta,170
Mon Sep 02 16:54:55 EDT 2019 org.apache.commons.math3.distribution.FDistribution,258
Mon Sep 02 16:54:59 EDT 2019 org.apache.commons.math3.util.FastMath,864
Mon Sep 02 16:59:19 EDT 2019 org.apache.commons.math3.util.FastMath,866
Mon Sep 02 16:59:20 EDT 2019 org.apache.commons.math3.util.FastMath,874
Mon Sep 02 17:01:01 EDT 2019 org.apache.commons.math3.util.FastMath,875
Mon Sep 02 17:01:02 EDT 2019 org.apache.commons.math3.random.AbstractWell,72
Mon Sep 02 17:01:08 EDT 2019 Mon Sep 02 17:01:08 EDT 2019 : org.apache.commons.math3.random.AbstractWell,73=>Find no block
Mon Sep 02 17:01:09 EDT 2019 org.apache.commons.math3.random.AbstractWell,155
Mon Sep 02 17:01:13 EDT 2019 org.apache.commons.math3.random.AbstractWell,156
Mon Sep 02 17:01:14 EDT 2019 org.apache.commons.math3.random.AbstractWell,179
Mon Sep 02 17:01:31 EDT 2019 Mon Sep 02 17:01:31 EDT 2019 : org.apache.commons.math3.random.AbstractWell,180=>Find no block
Mon Sep 02 17:01:32 EDT 2019 org.apache.commons.math3.random.Well19937c,57
Mon Sep 02 17:01:36 EDT 2019 Mon Sep 02 17:01:36 EDT 2019 : org.apache.commons.math3.random.Well19937c,58=>Find no block
Mon Sep 02 17:01:37 EDT 2019 Mon Sep 02 17:01:37 EDT 2019 : org.apache.commons.math3.random.AbstractWell,94=>Find no block
Mon Sep 02 17:01:38 EDT 2019 org.apache.commons.math3.random.AbstractWell,99
Mon Sep 02 17:10:29 EDT 2019 org.apache.commons.math3.random.AbstractWell,100
Mon Sep 02 17:10:30 EDT 2019 org.apache.commons.math3.random.AbstractWell,101
Mon Sep 02 17:15:22 EDT 2019 org.apache.commons.math3.random.AbstractWell,102
Mon Sep 02 17:17:34 EDT 2019 org.apache.commons.math3.random.AbstractWell,106
Mon Sep 02 17:20:08 EDT 2019 org.apache.commons.math3.random.AbstractWell,107
Mon Sep 02 17:20:42 EDT 2019 org.apache.commons.math3.random.AbstractWell,108
Mon Sep 02 17:21:15 EDT 2019 org.apache.commons.math3.random.AbstractWell,109
Mon Sep 02 17:21:48 EDT 2019 org.apache.commons.math3.random.AbstractWell,110
Mon Sep 02 17:28:11 EDT 2019 org.apache.commons.math3.random.AbstractWell,111
Mon Sep 02 17:37:24 EDT 2019 org.apache.commons.math3.random.AbstractWell,112
Mon Sep 02 17:37:25 EDT 2019 org.apache.commons.math3.random.AbstractWell,113
Mon Sep 02 17:37:26 EDT 2019 org.apache.commons.math3.random.AbstractWell,114
Mon Sep 02 17:37:27 EDT 2019 org.apache.commons.math3.random.AbstractWell,115
Mon Sep 02 17:37:28 EDT 2019 org.apache.commons.math3.random.AbstractWell,116
Mon Sep 02 17:37:30 EDT 2019 org.apache.commons.math3.random.AbstractWell,120
Mon Sep 02 17:45:22 EDT 2019 Mon Sep 02 17:45:22 EDT 2019 : org.apache.commons.math3.random.AbstractWell,122=>Find no block
Mon Sep 02 17:45:23 EDT 2019 org.apache.commons.math3.random.AbstractWell,154
Mon Sep 02 17:45:24 EDT 2019 org.apache.commons.math3.random.AbstractWell,159
Mon Sep 02 18:16:27 EDT 2019 org.apache.commons.math3.random.AbstractWell,161
Mon Sep 02 18:16:28 EDT 2019 org.apache.commons.math3.random.AbstractWell,162
Mon Sep 02 18:16:29 EDT 2019 org.apache.commons.math3.random.AbstractWell,163
Mon Sep 02 18:16:30 EDT 2019 org.apache.commons.math3.random.AbstractWell,164
Mon Sep 02 18:16:31 EDT 2019 org.apache.commons.math3.random.AbstractWell,168
Mon Sep 02 18:26:35 EDT 2019 org.apache.commons.math3.random.AbstractWell,169
Mon Sep 02 18:26:36 EDT 2019 Mon Sep 02 18:26:36 EDT 2019 : org.apache.commons.math3.random.AbstractWell,170=>Find no block
Mon Sep 02 18:26:38 EDT 2019 Mon Sep 02 18:26:38 EDT 2019 : org.apache.commons.math3.random.BitsStreamGenerator,35=>Find no block
Mon Sep 02 18:26:39 EDT 2019 org.apache.commons.math3.random.BitsStreamGenerator,36
Mon Sep 02 18:27:15 EDT 2019 Mon Sep 02 18:27:15 EDT 2019 : org.apache.commons.math3.random.BitsStreamGenerator,37=>Find no block
Mon Sep 02 18:27:16 EDT 2019 org.apache.commons.math3.random.BitsStreamGenerator,165
Mon Sep 02 18:27:17 EDT 2019 Mon Sep 02 18:27:17 EDT 2019 : org.apache.commons.math3.random.BitsStreamGenerator,166=>Find no block
Mon Sep 02 18:27:18 EDT 2019 Mon Sep 02 18:27:18 EDT 2019 : org.apache.commons.math3.random.RandomDataGenerator,128=>Find no block
Mon Sep 02 18:27:19 EDT 2019 Mon Sep 02 18:27:19 EDT 2019 : org.apache.commons.math3.random.RandomDataGenerator,115=>Find no block
Mon Sep 02 18:27:21 EDT 2019 Mon Sep 02 18:27:21 EDT 2019 : org.apache.commons.math3.random.RandomDataGenerator,118=>Find no block
Mon Sep 02 18:27:22 EDT 2019 Mon Sep 02 18:27:22 EDT 2019 : org.apache.commons.math3.random.RandomDataGenerator,129=>Find no block
Mon Sep 02 18:27:23 EDT 2019 Mon Sep 02 18:27:23 EDT 2019 : org.apache.commons.math3.random.RandomDataImpl,108=>Find no block
Mon Sep 02 18:27:24 EDT 2019 org.apache.commons.math3.random.RandomDataImpl,109
Mon Sep 02 18:27:28 EDT 2019 Mon Sep 02 18:27:28 EDT 2019 : org.apache.commons.math3.random.RandomDataImpl,110=>Find no block
Mon Sep 02 18:27:29 EDT 2019 Mon Sep 02 18:27:29 EDT 2019 : org.apache.commons.math3.distribution.AbstractRealDistribution,50=>Find no block
Mon Sep 02 18:27:30 EDT 2019 Mon Sep 02 18:27:30 EDT 2019 : org.apache.commons.math3.distribution.AbstractRealDistribution,55=>Find no block
Mon Sep 02 18:27:31 EDT 2019 Mon Sep 02 18:27:31 EDT 2019 : org.apache.commons.math3.distribution.AbstractRealDistribution,70=>Find no block
Mon Sep 02 18:27:33 EDT 2019 org.apache.commons.math3.distribution.AbstractRealDistribution,71
Mon Sep 02 18:29:02 EDT 2019 Mon Sep 02 18:29:02 EDT 2019 : org.apache.commons.math3.distribution.AbstractRealDistribution,72=>Find no block
Mon Sep 02 18:29:03 EDT 2019 org.apache.commons.math3.special.Gamma,253
Mon Sep 02 18:43:43 EDT 2019 org.apache.commons.math3.special.Gamma,254
Mon Sep 02 18:43:44 EDT 2019 org.apache.commons.math3.special.Gamma,255
Timeout time : 19/09/02 18:47
