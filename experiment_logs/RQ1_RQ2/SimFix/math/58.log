=================================================
Project : math_58	start : 19/09/02 13:44
Current failed test : org.apache.commons.math.optimization.fitting.GaussianFitterTest::testMath519 | 19/09/02 13:44
Mon Sep 02 13:45:51 EDT 2019 org.apache.commons.math.exception.MathRuntimeException,102
Mon Sep 02 13:46:21 EDT 2019 org.apache.commons.math.exception.MathRuntimeException,108
Mon Sep 02 13:47:05 EDT 2019 org.apache.commons.math.exception.MathRuntimeException,114
Mon Sep 02 13:47:46 EDT 2019 org.apache.commons.math.exception.NotStrictlyPositiveException,38
Mon Sep 02 13:47:50 EDT 2019 Mon Sep 02 13:47:50 EDT 2019 : org.apache.commons.math.exception.NotStrictlyPositiveException,39=>Find no block
Mon Sep 02 13:47:52 EDT 2019 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,384

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((lmPar==0)||(ratio>=0.75)){
delta=2*lmNorm;
lmPar*=0.0;
}

Time : 19/09/02 13:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((FastMath.abs(actRed)<=costRelativeTolerance&&preRed<=costRelativeTolerance&&ratio<=2.0)||lmPar<=parRelativeTolerance*lmNorm){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 19/09/02 13:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((lmPar==0)||lmPar<=parRelativeTolerance*lmNorm){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 19/09/02 13:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((FastMath.abs(delta)<=0.1*lmNorm)||((ratio==0)&&(delta<=lmPar))){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 19/09/02 13:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((lmPar==0)||((ratio==0)&&(delta<=lmPar))){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 19/09/02 13:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((lmPar==0)&&(ratio>=0.75)){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 19/09/02 14:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((FastMath.abs(actRed)<=2.2204E-16)&&(lmPar<=2.2204E-16)){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 19/09/02 14:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((lmPar==0)||(lmPar<=2.2204E-16)){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 19/09/02 14:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((FastMath.abs(actRed)<=2.2204E-16)&&(ratio>=0.75)){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 19/09/02 14:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((lmPar==0)&&(lmPar<=2.2204E-16)){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 19/09/02 14:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((FastMath.abs(actRed)<=2.2204E-16)||(lmPar<=2.2204E-16)){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 19/09/02 14:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((rank+1>=rank)||(ratio>=0.75)){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 19/09/02 14:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((lmPar==0)||(delta<=lmPar)){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 19/09/02 14:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((lmPar==0)&&(delta<=lmPar)){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 19/09/02 14:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((rank+1>=rank)||(delta<=lmPar)){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 19/09/02 14:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(lmNorm>ratio||lmNorm<-lmPar){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 19/09/02 14:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((lmPar==0)||lmNorm<-lmPar){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 19/09/02 14:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((delta==0)||(delta>=0.75)){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 19/09/02 14:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((lmPar<=lmNorm)||(lmPar<=ratio)){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 19/09/02 14:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((lmPar==0)||(lmPar<=ratio)){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 19/09/02 14:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((lmPar==0)||(delta>=0.75)){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 19/09/02 14:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((delta==0)||(lmPar<=ratio)){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 19/09/02 14:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((lmPar<=lmNorm)||(delta>=0.75)){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 19/09/02 14:45
----------------------------------------
Mon Sep 02 14:53:38 EDT 2019 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,386
Mon Sep 02 14:53:39 EDT 2019 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,389
Mon Sep 02 14:53:40 EDT 2019 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,390
Mon Sep 02 14:53:41 EDT 2019 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,391
Mon Sep 02 14:53:42 EDT 2019 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,417
Mon Sep 02 15:07:03 EDT 2019 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,418
Mon Sep 02 15:17:49 EDT 2019 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,419
Mon Sep 02 15:17:50 EDT 2019 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,420
Mon Sep 02 15:17:51 EDT 2019 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,422
Mon Sep 02 15:28:44 EDT 2019 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,423
Mon Sep 02 15:30:02 EDT 2019 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,424
Mon Sep 02 15:31:31 EDT 2019 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,425
Mon Sep 02 15:33:02 EDT 2019 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,426
Mon Sep 02 15:33:50 EDT 2019 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,427
Mon Sep 02 15:33:51 EDT 2019 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,516
Mon Sep 02 15:37:57 EDT 2019 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,517

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<=j;++i){
sum+=weightedResidualJacobian[i][pj]*work1[permutation[i]];
}

Time : 19/09/02 15:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<j;++i){
sum+=weightedResidualJacobian[i][j]*work1[permutation[i]];
}

Time : 19/09/02 15:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<j;++i){
sum+=weightedResidualJacobian[i][permutation[pj]]*work1[permutation[i]];
}

Time : 19/09/02 15:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
work2=work2;
for(int i=0;i<=j;++i){
sum+=weightedResidualJacobian[i][pj]*work1[permutation[i]];
}

Time : 19/09/02 16:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=0;j<solvedCols;++j){
int pj=permutation[j];
double sum=0;
for(int i=0;i<=j;++i){
sum+=weightedResidualJacobian[i][pj]*work1[permutation[i]];
}
double s=(work1[pj]-sum)/diagR[pj];
work1[pj]=s;
sum2+=s*s;
}

Time : 19/09/02 16:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=0;j<solvedCols;++j){
int pj=permutation[j];
double sum=0;
for(int i=0;i<j;++i){
sum+=weightedResidualJacobian[i][j]*work1[permutation[i]];
}
double s=(work1[pj]-sum)/diagR[pj];
work1[pj]=s;
sum2+=s*s;
}

Time : 19/09/02 16:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=0;j<solvedCols;++j){
int pj=permutation[j];
double sum=0;
for(int i=0;i<j;++i){
sum+=weightedResidualJacobian[i][pj]*work1[permutation[i]];
}
double s=(work1[pj]-sum)/diagR[j];
work1[pj]=s;
sum2+=s*s;
}

Time : 19/09/02 16:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=0;j<rank;++j){
int pj=permutation[j];
double sum=0;
for(int i=0;i<j;++i){
sum+=weightedResidualJacobian[i][pj]*work1[permutation[i]];
}
double s=(work1[pj]-sum)/diagR[j];
work1[pj]=s;
sum2+=s*s;
}

Time : 19/09/02 16:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(rank==solvedCols){
for(int j=0;j<solvedCols;++j){
int pj=permutation[j];
work1[pj]*=diag[pj]/dxNorm;
}
sum2=0;
for(int j=0;j<solvedCols;++j){
int pj=permutation[j];
double sum=0;
for(int i=0;i<j;++i){
sum+=weightedResidualJacobian[i][pj]*work1[permutation[i]];
}
double s=(work1[pj]-sum)/diagR[j];
work1[pj]=s;
sum2+=s*s;
}
parl=fp/(delta*sum2);
}

Time : 19/09/02 17:15
----------------------------------------
Mon Sep 02 17:20:01 EDT 2019 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,518
Mon Sep 02 17:20:02 EDT 2019 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,519
Mon Sep 02 17:20:04 EDT 2019 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,520
Mon Sep 02 17:20:05 EDT 2019 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,522
Mon Sep 02 17:33:30 EDT 2019 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,523
Mon Sep 02 17:33:31 EDT 2019 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,524
Mon Sep 02 17:33:32 EDT 2019 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,525
Mon Sep 02 17:33:33 EDT 2019 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,526
Mon Sep 02 17:33:34 EDT 2019 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,527
Mon Sep 02 17:33:35 EDT 2019 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,529
Mon Sep 02 17:33:36 EDT 2019 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,530
Mon Sep 02 17:33:37 EDT 2019 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,531
Mon Sep 02 17:33:39 EDT 2019 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,533

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=0;j<solvedCols;++j){
int pj=permutation[j];
double sum=0;
for(int i=0;i<=j;++i){
sum+=weightedResidualJacobian[i][pj]*work1[permutation[i]];
}
double s=(work1[pj]-sum)/diagR[pj];
work1[pj]=s;
sum2+=s*s;
}
parl=fp/(delta*sum2);

Time : 19/09/02 17:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=0;j<solvedCols;++j){
int pj=permutation[j];
double sum=0;
for(int i=0;i<j;++i){
sum+=weightedResidualJacobian[i][j]*work1[permutation[i]];
}
double s=(work1[pj]-sum)/diagR[pj];
work1[pj]=s;
sum2+=s*s;
}
parl=fp/(delta*sum2);

Time : 19/09/02 17:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=0;j<solvedCols;++j){
int pj=permutation[j];
double sum=0;
for(int i=0;i<j;++i){
sum+=weightedResidualJacobian[i][pj]*work1[permutation[i]];
}
double s=(work1[pj]-sum)/diagR[j];
work1[pj]=s;
sum2+=s*s;
}
parl=fp/(delta*sum2);

Time : 19/09/02 18:03
----------------------------------------
Mon Sep 02 18:29:46 EDT 2019 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,537
Timeout time : 19/09/02 18:45
