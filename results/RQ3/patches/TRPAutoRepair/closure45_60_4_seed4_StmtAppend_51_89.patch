--- ./original/com/google/javascript/jscomp/RemoveUnusedVars.java	2018-02-16 00:25:45.000000000 -0500
+++ ./variant86/com/google/javascript/jscomp/RemoveUnusedVars.java	2018-02-16 01:20:14.000000000 -0500
@@ -210,23 +210,27 @@
       case Token.ASSIGN:
         Assign maybeAssign = Assign.maybeCreateAssign(n);
         if (maybeAssign != null) {
-          // Put this in the assign map. It might count as a reference,
-          // but we won't know that until we have an index of all assigns.
-          var = scope.getVar(maybeAssign.nameNode.getString());
-          if (var != null) {
-            assignsByVar.put(var, maybeAssign);
-            assignsByNode.put(maybeAssign.nameNode, maybeAssign);
-
-            if (isRemovableVar(var) &&
-                !maybeAssign.mayHaveSecondarySideEffects) {
-              // If the var is unreferenced and performing this assign has
-              // no secondary side effects, then we can create a continuation
-              // for it instead of traversing immediately.
-              continuations.put(var, new Continuation(n, scope));
-              return;
-            }
-          }
-        }
+			{
+				var = scope.getVar(maybeAssign.nameNode.getString());
+				if (var != null) {
+					assignsByVar.put(var, maybeAssign);
+					assignsByNode.put(maybeAssign.nameNode, maybeAssign);
+					if (isRemovableVar(var) && !maybeAssign.mayHaveSecondarySideEffects) {
+						continuations.put(var, new Continuation(n, scope));
+						return;
+					}
+				}
+			}
+			if (var != null) {
+				if (isRemovableVar(var)) {
+					if (!assignsByNode.containsKey(n)) {
+						markReferencedVar(var);
+					}
+				} else {
+					markReferencedVar(var);
+				}
+			}
+		}
         break;
 
       case Token.CALL:
