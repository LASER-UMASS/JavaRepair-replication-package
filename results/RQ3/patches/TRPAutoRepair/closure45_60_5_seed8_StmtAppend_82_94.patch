--- ./original/com/google/javascript/jscomp/RemoveUnusedVars.java	2018-02-16 00:29:48.000000000 -0500
+++ ./variant127/com/google/javascript/jscomp/RemoveUnusedVars.java	2018-02-16 01:02:02.000000000 -0500
@@ -262,31 +262,27 @@
             return;
           }
         } else {
-
-          // If arguments is escaped, we just assume the worst and continue
-          // on all the parameters.
-          if ("arguments".equals(n.getString()) && scope.isLocal()) {
-            Node lp = scope.getRootNode().getFirstChild().getNext();
-            for (Node a = lp.getFirstChild(); a != null; a = a.getNext()) {
-              markReferencedVar(scope.getVar(a.getString()));
-            }
-          }
-
-          // All name references that aren't declarations or assigns
-          // are references to other vars.
-          if (var != null) {
-            // If that var hasn't already been marked referenced, then
-            // start tracking it.  If this is an assign, do nothing
-            // for now.
-            if (isRemovableVar(var)) {
-              if (!assignsByNode.containsKey(n)) {
-                markReferencedVar(var);
-              }
-            } else {
-              markReferencedVar(var);
-            }
-          }
-        }
+			{
+				if ("arguments".equals(n.getString()) && scope.isLocal()) {
+					Node lp = scope.getRootNode().getFirstChild().getNext();
+					for (Node a = lp.getFirstChild(); a != null; a = a.getNext()) {
+						markReferencedVar(scope.getVar(a.getString()));
+					}
+				}
+				if (var != null) {
+					if (isRemovableVar(var)) {
+						if (!assignsByNode.containsKey(n)) {
+							markReferencedVar(var);
+						}
+					} else {
+						markReferencedVar(var);
+					}
+				}
+			}
+			{
+				markReferencedVar(var);
+			}
+		}
         break;
     }
 
