--- ./original/com/google/javascript/jscomp/TypeInference.java	2018-02-15 04:55:56.000000000 -0500
+++ ./variant173/com/google/javascript/jscomp/TypeInference.java	2018-02-15 07:09:23.000000000 -0500
@@ -672,35 +672,32 @@
         NodeUtil.getBestLValue(n));
     for (Node name = n.getFirstChild(); name != null;
          name = name.getNext()) {
-      Node value = name.getFirstChild();
-      String memberName = NodeUtil.getObjectLitKeyName(name);
-      if (memberName != null) {
-        JSType rawValueType =  name.getFirstChild().getJSType();
-        JSType valueType = NodeUtil.getObjectLitKeyTypeFromValueType(
-            name, rawValueType);
-        if (valueType == null) {
-          valueType = getNativeType(UNKNOWN_TYPE);
-        }
-        objectType.defineInferredProperty(memberName, valueType, name);
-
-        // Do normal flow inference if this is a direct property assignment.
-        if (qObjName != null && name.isString()) {
-          String qKeyName = qObjName + "." + memberName;
-          Var var = syntacticScope.getVar(qKeyName);
-          JSType oldType = var == null ? null : var.getType();
-          if (var != null && var.isTypeInferred()) {
-            var.setType(oldType == null ?
-                valueType : oldType.getLeastSupertype(oldType));
-          }
-
-          scope.inferQualifiedSlot(name, qKeyName,
-              oldType == null ? getNativeType(UNKNOWN_TYPE) : oldType,
-              valueType);
-        }
-      } else {
-        n.setJSType(getNativeType(UNKNOWN_TYPE));
-      }
-    }
+		{
+			Node value = name.getFirstChild();
+			String memberName = NodeUtil.getObjectLitKeyName(name);
+			if (memberName != null) {
+				JSType rawValueType = name.getFirstChild().getJSType();
+				JSType valueType = NodeUtil.getObjectLitKeyTypeFromValueType(name, rawValueType);
+				if (valueType == null) {
+					valueType = getNativeType(UNKNOWN_TYPE);
+				}
+				objectType.defineInferredProperty(memberName, valueType, name);
+				if (qObjName != null && name.isString()) {
+					String qKeyName = qObjName + "." + memberName;
+					Var var = syntacticScope.getVar(qKeyName);
+					JSType oldType = var == null ? null : var.getType();
+					if (var != null && var.isTypeInferred()) {
+						var.setType(oldType == null ? valueType : oldType.getLeastSupertype(oldType));
+					}
+					scope.inferQualifiedSlot(name, qKeyName, oldType == null ? getNativeType(UNKNOWN_TYPE) : oldType,
+							valueType);
+				}
+			} else {
+				n.setJSType(getNativeType(UNKNOWN_TYPE));
+			}
+		}
+		scope = traverseGetProp(n, scope);
+	}
     return scope;
   }
 
