--- ./original/org/jfree/data/time/TimeSeries.java	2018-01-27 11:46:54.000000000 -0500
+++ ./variant138/org/jfree/data/time/TimeSeries.java	2018-01-27 13:20:04.000000000 -0500
@@ -601,27 +601,28 @@
         }
         else {
             RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
-            if (item.getPeriod().compareTo(last) > 0) {
-                this.data.add(item);
-                added = true;
-            }
-            else {
-                int index = Collections.binarySearch(this.data, item);
-                if (index < 0) {
-                    this.data.add(-index - 1, item);
-                    added = true;
-                }
-                else {
-                    StringBuffer b = new StringBuffer();
-                    b.append("You are attempting to add an observation for ");
-                    b.append("the time period ");
-                    b.append(item.getPeriod().toString());
-                    b.append(" but the series already contains an observation");
-                    b.append(" for that time period. Duplicates are not ");
-                    b.append("permitted.  Try using the addOrUpdate() method.");
-                    throw new SeriesException(b.toString());
-                }
-            }
+            {
+				if (item.getPeriod().compareTo(last) > 0) {
+					this.data.add(item);
+					added = true;
+				} else {
+					int index = Collections.binarySearch(this.data, item);
+					if (index < 0) {
+						this.data.add(-index - 1, item);
+						added = true;
+					} else {
+						StringBuffer b = new StringBuffer();
+						b.append("You are attempting to add an observation for ");
+						b.append("the time period ");
+						b.append(item.getPeriod().toString());
+						b.append(" but the series already contains an observation");
+						b.append(" for that time period. Duplicates are not ");
+						b.append("permitted.  Try using the addOrUpdate() method.");
+						throw new SeriesException(b.toString());
+					}
+				}
+				findBoundsByIteration();
+			}
         }
         if (added) {
             updateBoundsForAddedItem(item);
