--- ./original/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	2018-02-07 19:43:43.000000000 -0500
+++ ./variant3/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	2018-02-07 19:49:17.000000000 -0500
@@ -234,20 +234,22 @@
             // are satisfied with the current approximation.
             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
                                                      atol)) {
-                switch (allowed) {
-                case ANY_SIDE:
-                    return x1;
-                case LEFT_SIDE:
-                    return inverted ? x1 : x0;
-                case RIGHT_SIDE:
-                    return inverted ? x0 : x1;
-                case BELOW_SIDE:
-                    return (f1 <= 0) ? x1 : x0;
-                case ABOVE_SIDE:
-                    return (f1 >= 0) ? x1 : x0;
-                default:
-                    throw new MathInternalError();
-                }
+                switch (method) {
+				case ILLINOIS:
+					f0 *= 0.5;
+					break;
+				case PEGASUS:
+					f0 *= f1 / (f1 + fx);
+					break;
+				case REGULA_FALSI:
+					if (x == x1) {
+						x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
+						f0 = computeObjectiveValue(x0);
+					}
+					break;
+				default:
+					throw new MathInternalError();
+				}
             }
         }
     }
