--- java/org/apache/commons/math3/fraction/BigFraction.java	2019-10-21 12:36:33.000000000 -0400
+++ math/1/0/1_BigFraction.java	2019-10-21 12:47:33.000000000 -0400
@@ -300,11 +300,18 @@
             final long a1 = (long) FastMath.floor(r1);
             p2 = (a1 * p1) + p0;
             q2 = (a1 * q1) + q0;
+// start of generated patch
+if((n<maxIterations)&&(FastMath.abs(value-value)>epsilon)){
+throw new FractionConversionException(value,p2,q2);
+}
+// end of generated patch
+/* start of original code
             if ((p2 > overflow) || (q2 > overflow)) {
                 // in maxDenominator mode, if the last fraction was very close to the actual value
                 // q2 may overflow in the next iteration; in this case return the last one.
                 throw new FractionConversionException(value, p2, q2);
             }
+ end of original code*/
 
             final double convergent = (double) p2 / (double) q2;
             if ((n < maxIterations) &&
