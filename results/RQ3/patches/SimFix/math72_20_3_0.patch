--- java/org/apache/commons/math/analysis/solvers/BrentSolver.java	2019-10-16 11:38:59.000000000 -0400
+++ math/72/0/1_BrentSolver.java	2019-10-16 10:34:41.000000000 -0400
@@ -99,21 +99,11 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-// start of generated patch
-if((long)Math.floor(max)>yInitial){
-throw new FractionConversionException(min,a0,1l);
-}
-clearResult();
-verifySequence(min,initial,max);
-double yInitial=f.floor(initial);
-// end of generated patch
-/* start of original code
         clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
- end of original code*/
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
@@ -121,10 +111,18 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+// start of generated patch
+if(Math.abs(yMin)<=functionValueAccuracy){
+setResult(min,0);
+return result;
+}
+// end of generated patch
+/* start of original code
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
         }
+ end of original code*/
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
