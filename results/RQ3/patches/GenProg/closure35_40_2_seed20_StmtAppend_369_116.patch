--- ./original/com/google/javascript/jscomp/TypeInference.java	2018-05-09 18:42:37.000000000 -0400
+++ ./variant11/com/google/javascript/jscomp/TypeInference.java	2018-05-10 16:08:56.000000000 -0400
@@ -683,20 +683,19 @@
         }
         objectType.defineInferredProperty(memberName, valueType, name);
 
-        // Do normal flow inference if this is a direct property assignment.
-        if (qObjName != null && name.isString()) {
-          String qKeyName = qObjName + "." + memberName;
-          Var var = syntacticScope.getVar(qKeyName);
-          JSType oldType = var == null ? null : var.getType();
-          if (var != null && var.isTypeInferred()) {
-            var.setType(oldType == null ?
-                valueType : oldType.getLeastSupertype(oldType));
-          }
-
-          scope.inferQualifiedSlot(name, qKeyName,
-              oldType == null ? getNativeType(UNKNOWN_TYPE) : oldType,
-              valueType);
-        }
+        {
+			if (qObjName != null && name.isString()) {
+				String qKeyName = qObjName + "." + memberName;
+				Var var = syntacticScope.getVar(qKeyName);
+				JSType oldType = var == null ? null : var.getType();
+				if (var != null && var.isTypeInferred()) {
+					var.setType(oldType == null ? valueType : oldType.getLeastSupertype(oldType));
+				}
+				scope.inferQualifiedSlot(name, qKeyName, oldType == null ? getNativeType(UNKNOWN_TYPE) : oldType,
+						valueType);
+			}
+			scope = traverseNew(n, scope);
+		}
       } else {
         n.setJSType(getNativeType(UNKNOWN_TYPE));
       }
