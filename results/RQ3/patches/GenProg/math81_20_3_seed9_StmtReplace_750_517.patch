--- ./original/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-05-10 02:32:05.000000000 -0400
+++ ./variant40/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-05-10 04:12:19.000000000 -0400
@@ -1446,84 +1446,9 @@
 
         case 0 : // no realEigenvalues deflated.
             if (dMin == dN || dMin == dN1) {
-
-                double b1 = Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);
-                double b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);
-                double a2 = work[nn - 7] + work[nn - 5];
-
-                if (dMin == dN && dMin1 == dN1) {
-                    // cases 2 and 3.
-                    final double gap2 = dMin2 - a2 - dMin2 * 0.25;
-                    final double gap1 = a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));
-                    if (gap1 > 0.0 && gap1 > b1) {
-                        tau   = Math.max(dN - (b1 / gap1) * b1, 0.5 * dMin);
-                        tType = -2;
-                    } else {
-                        double s = 0.0;
-                        if (dN > b1) {
-                            s = dN - b1;
-                        }
-                        if (a2 > (b1 + b2)) {
-                            s = Math.min(s, a2 - (b1 + b2));
-                        }
-                        tau   = Math.max(s, 0.333 * dMin);
-                        tType = -3;
-                    }
-                } else {
-                    // case 4.
-                    tType = -4;
-                    double s = 0.25 * dMin;
-                    double gam;
-                    int np;
-                    if (dMin == dN) {
-                        gam = dN;
-                        a2 = 0.0;
-                        if (work[nn - 5]  >  work[nn - 7]) {
-                            return;
-                        }
-                        b2 = work[nn - 5] / work[nn - 7];
-                        np = nn - 9;
-                    } else {
-                        np = nn - 2 * pingPong;
-                        b2 = work[np - 2];
-                        gam = dN1;
-                        if (work[np - 4]  >  work[np - 2]) {
-                            return;
-                        }
-                        a2 = work[np - 4] / work[np - 2];
-                        if (work[nn - 9]  >  work[nn - 11]) {
-                            return;
-                        }
-                        b2 = work[nn - 9] / work[nn - 11];
-                        np = nn - 13;
-                    }
-
-                    // approximate contribution to norm squared from i < nn-1.
-                    a2 = a2 + b2;
-                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {
-                        if(b2 == 0.0) {
-                            break;
-                        }
-                        b1 = b2;
-                        if (work[i4]  >  work[i4 - 2]) {
-                            return;
-                        }
-                        b2 = b2 * (work[i4] / work[i4 - 2]);
-                        a2 = a2 + b2;
-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {
-                            break;
-                        }
-                    }
-                    a2 = cnst3 * a2;
-
-                    // rayleigh quotient residual bound.
-                    if (a2 < cnst1) {
-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);
-                    }
-                    tau = s;
-
-                }
-            } else if (dMin == dN2) {
+				tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);
+				tType -= 11;
+			} else if (dMin == dN2) {
 
                 // case 5.
                 tType = -5;
