--- ./original/org/apache/commons/math/stat/descriptive/moment/Variance.java	2019-10-17 20:37:43.000000000 -0400
+++ ./variant0/org/apache/commons/math/stat/descriptive/moment/Variance.java	2019-10-17 20:40:09.000000000 -0400
@@ -506,27 +506,45 @@
         if (test(values, weights, begin, length)) {
             if (length == 1) {
                 var = 0.0;
-            } else if (length > 1) {
-                double accum = 0.0;
-                double dev = 0.0;
-                double accum2 = 0.0;
-                for (int i = begin; i < begin + length; i++) {
-                    dev = values[i] - mean;
-                    accum += weights[i] * (dev * dev);
-                    accum2 += weights[i] * dev;
-                }
-
-                double sumWts = 0;
-                for (int i = 0; i < weights.length; i++) {
-                    sumWts += weights[i];
-                }
-
-                if (isBiasCorrected) {
-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);
-                } else {
-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;
-                }
-            }
+            } else {
+				if (length > 1) {
+					double accum = 0.0;
+					double dev = 0.0;
+					double accum2 = 0.0;
+					for (int i = begin; i < begin + length; i++) {
+						dev = values[i] - mean;
+						accum += weights[i] * (dev * dev);
+						accum2 += weights[i] * dev;
+					}
+					double sumWts = 0;
+					for (int i = 0; i < weights.length; i++) {
+						sumWts += weights[i];
+					}
+					if (isBiasCorrected) {
+						var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);
+					} else {
+						var = (accum - (accum2 * accum2 / sumWts)) / sumWts;
+					}
+				}
+				if (length == 1) {
+					var = 0.0;
+				} else if (length > 1) {
+					double accum = 0.0;
+					double dev = 0.0;
+					double accum2 = 0.0;
+					for (int i = begin; i < begin + length; i++) {
+						dev = values[i] - mean;
+						accum += dev * dev;
+						accum2 += dev;
+					}
+					double len = length;
+					if (isBiasCorrected) {
+						var = (accum - (accum2 * accum2 / len)) / (len - 1.0);
+					} else {
+						var = (accum - (accum2 * accum2 / len)) / len;
+					}
+				}
+			}
         }
         return var;
     }
