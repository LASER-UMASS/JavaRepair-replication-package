--- ./original/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-05-10 02:05:36.000000000 -0400
+++ ./variant1/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-05-10 03:52:15.000000000 -0400
@@ -1194,8 +1194,38 @@
         }
         lower = Math.max(lower, left - 100 * MathUtils.EPSILON * Math.abs(left));
 
-        // search upper eigenvalue
-        left  = lower - margin;
+        {
+			double d = work[4 * (n - 1) + pingPong];
+			for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
+				if (work[i + 2] <= TOLERANCE_2 * d) {
+					work[i + 2] = -0.0;
+					d = work[i];
+				} else {
+					d *= work[i] / (d + work[i + 2]);
+				}
+			}
+			d = work[pingPong];
+			for (int i = 2 + pingPong; i < 4 * n - 2; i += 4) {
+				final int j = i - 2 * pingPong - 1;
+				work[j] = d + work[i];
+				if (work[i] <= TOLERANCE_2 * d) {
+					work[i] = -0.0;
+					work[j] = d;
+					work[j + 2] = 0.0;
+					d = work[i + 2];
+				} else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j])
+						&& (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
+					final double tmp = work[i + 2] / work[j];
+					work[j + 2] = work[i] * tmp;
+					d *= tmp;
+				} else {
+					work[j + 2] = work[i + 2] * (work[i] / work[j]);
+					d *= work[i + 2] / work[j];
+				}
+			}
+			work[4 * n - 3 - pingPong] = d;
+			pingPong = 1 - pingPong;
+		}
         right = upper + margin;
         for (int i = 0; i < maxIter; ++i) {
 
