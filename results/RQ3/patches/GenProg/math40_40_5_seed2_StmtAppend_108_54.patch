--- ./original/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	2018-05-10 01:14:45.000000000 -0400
+++ ./variant71/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	2018-05-10 01:25:02.000000000 -0400
@@ -272,12 +272,14 @@
 
             } while (Double.isNaN(nextX) && (end - start > 1));
 
-            if (Double.isNaN(nextX)) {
-                // fall back to bisection
-                nextX = xA + 0.5 * (xB - xA);
-                start = signChangeIndex - 1;
-                end   = signChangeIndex;
-            }
+            {
+				if (Double.isNaN(nextX)) {
+					nextX = xA + 0.5 * (xB - xA);
+					start = signChangeIndex - 1;
+					end = signChangeIndex;
+				}
+				signChangeIndex = 2;
+			}
 
             // evaluate the function at the guessed root
             final double nextY = computeObjectiveValue(nextX);
