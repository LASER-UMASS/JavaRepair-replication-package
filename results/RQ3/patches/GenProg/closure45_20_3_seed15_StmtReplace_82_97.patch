--- ./original/com/google/javascript/jscomp/RemoveUnusedVars.java	2018-05-09 18:50:43.000000000 -0400
+++ ./variant58/com/google/javascript/jscomp/RemoveUnusedVars.java	2018-05-09 22:16:11.000000000 -0400
@@ -261,32 +261,8 @@
             continuations.put(var, new Continuation(n, scope));
             return;
           }
-        } else {
-
-          // If arguments is escaped, we just assume the worst and continue
-          // on all the parameters.
-          if ("arguments".equals(n.getString()) && scope.isLocal()) {
-            Node lp = scope.getRootNode().getFirstChild().getNext();
-            for (Node a = lp.getFirstChild(); a != null; a = a.getNext()) {
-              markReferencedVar(scope.getVar(a.getString()));
-            }
-          }
-
-          // All name references that aren't declarations or assigns
-          // are references to other vars.
-          if (var != null) {
-            // If that var hasn't already been marked referenced, then
-            // start tracking it.  If this is an assign, do nothing
-            // for now.
-            if (isRemovableVar(var)) {
-              if (!assignsByNode.containsKey(n)) {
-                markReferencedVar(var);
-              }
-            } else {
-              markReferencedVar(var);
-            }
-          }
-        }
+        } else
+			markReferencedVar(var);
         break;
     }
 
