--- ./original/com/google/javascript/jscomp/TypeInference.java	2018-05-09 18:43:58.000000000 -0400
+++ ./variant385/com/google/javascript/jscomp/TypeInference.java	2018-05-10 17:56:58.000000000 -0400
@@ -392,21 +392,18 @@
         break;
     }
     if (!n.isFunction()) {
-      JSDocInfo info = n.getJSDocInfo();
-      if (info != null && info.hasType()) {
-        JSType castType = info.getType().evaluate(syntacticScope, registry);
-
-        // A stubbed type cast on a qualified name should take
-        // effect for all subsequent accesses of that name,
-        // so treat it the same as an assign to that name.
-        if (n.isQualifiedName() &&
-            n.getParent().isExprResult()) {
-          updateScopeForTypeChange(scope, n, n.getJSType(), castType);
-        }
-
-        n.setJSType(castType);
-      }
-    }
+		{
+			JSDocInfo info = n.getJSDocInfo();
+			if (info != null && info.hasType()) {
+				JSType castType = info.getType().evaluate(syntacticScope, registry);
+				if (n.isQualifiedName() && n.getParent().isExprResult()) {
+					updateScopeForTypeChange(scope, n, n.getJSType(), castType);
+				}
+				n.setJSType(castType);
+			}
+		}
+		scope = traverseReturn(n, scope);
+	}
 
     return scope;
   }
