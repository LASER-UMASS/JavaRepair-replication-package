--- ./original/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-05-10 02:41:08.000000000 -0400
+++ ./variant21/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-05-10 02:43:02.000000000 -0400
@@ -994,57 +994,44 @@
         // step 1: accepting realEigenvalues
         int deflatedEnd = end;
         for (boolean deflating = true; deflating;) {
-
-            if (start >= deflatedEnd) {
-                // the array has been completely deflated
-                return deflatedEnd;
-            }
-
-            final int k = 4 * deflatedEnd + pingPong - 1;
-
-            if ((start == deflatedEnd - 1) ||
-                ((start != deflatedEnd - 2) &&
-                 ((work[k - 5] <= TOLERANCE_2 * (sigma + work[k - 3])) ||
-                  (work[k - 2 * pingPong - 4] <= TOLERANCE_2 * work[k - 7])))) {
-
-                // one eigenvalue found, deflate array
-                work[4 * deflatedEnd - 4] = sigma + work[4 * deflatedEnd - 4 + pingPong];
-                deflatedEnd -= 1;
-
-            } else if ((start == deflatedEnd - 2) ||
-                (work[k - 9] <= TOLERANCE_2 * sigma) ||
-                (work[k - 2 * pingPong - 8] <= TOLERANCE_2 * work[k - 11])) {
-
-                // two realEigenvalues found, deflate array
-                if (work[k - 3] > work[k - 7]) {
-                    final double tmp = work[k - 3];
-                    work[k - 3] = work[k - 7];
-                    work[k - 7] = tmp;
-                }
-
-                if (work[k - 5] > TOLERANCE_2 * work[k - 3]) {
-                    double t = 0.5 * ((work[k - 7] - work[k - 3]) + work[k - 5]);
-                    double s = work[k - 3] * (work[k - 5] / t);
-                    if (s <= t) {
-                        s = work[k - 3] * work[k - 5] / (t * (1 + Math.sqrt(1 + s / t)));
-                    } else {
-                        s = work[k - 3] * work[k - 5] / (t + Math.sqrt(t * (t + s)));
-                    }
-                    t = work[k - 7] + (s + work[k - 5]);
-                    work[k - 3] *= work[k - 7] / t;
-                    work[k - 7]  = t;
-                }
-                work[4 * deflatedEnd - 8] = sigma + work[k - 7];
-                work[4 * deflatedEnd - 4] = sigma + work[k - 3];
-                deflatedEnd -= 2;
-            } else {
-
-                // no more realEigenvalues found, we need to iterate
-                deflating = false;
-
-            }
-
-        }
+			{
+				if (start >= deflatedEnd) {
+					return deflatedEnd;
+				}
+				final int k = 4 * deflatedEnd + pingPong - 1;
+				if ((start == deflatedEnd - 1)
+						|| ((start != deflatedEnd - 2) && ((work[k - 5] <= TOLERANCE_2 * (sigma + work[k - 3]))
+								|| (work[k - 2 * pingPong - 4] <= TOLERANCE_2 * work[k - 7])))) {
+					work[4 * deflatedEnd - 4] = sigma + work[4 * deflatedEnd - 4 + pingPong];
+					deflatedEnd -= 1;
+				} else if ((start == deflatedEnd - 2) || (work[k - 9] <= TOLERANCE_2 * sigma)
+						|| (work[k - 2 * pingPong - 8] <= TOLERANCE_2 * work[k - 11])) {
+					if (work[k - 3] > work[k - 7]) {
+						final double tmp = work[k - 3];
+						work[k - 3] = work[k - 7];
+						work[k - 7] = tmp;
+					}
+					if (work[k - 5] > TOLERANCE_2 * work[k - 3]) {
+						double t = 0.5 * ((work[k - 7] - work[k - 3]) + work[k - 5]);
+						double s = work[k - 3] * (work[k - 5] / t);
+						if (s <= t) {
+							s = work[k - 3] * work[k - 5] / (t * (1 + Math.sqrt(1 + s / t)));
+						} else {
+							s = work[k - 3] * work[k - 5] / (t + Math.sqrt(t * (t + s)));
+						}
+						t = work[k - 7] + (s + work[k - 5]);
+						work[k - 3] *= work[k - 7] / t;
+						work[k - 7] = t;
+					}
+					work[4 * deflatedEnd - 8] = sigma + work[k - 7];
+					work[4 * deflatedEnd - 4] = sigma + work[k - 3];
+					deflatedEnd -= 2;
+				} else {
+					deflating = false;
+				}
+			}
+			dN2 = 0;
+		}
 
         final int l = 4 * deflatedEnd + pingPong - 1;
 
