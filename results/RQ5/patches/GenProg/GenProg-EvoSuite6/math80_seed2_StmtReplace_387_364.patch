--- ./original/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-11-27 22:51:51.000000000 -0500
+++ ./variant58/org/apache/commons/math/linear/EigenDecompositionImpl.java	2018-11-28 01:45:02.000000000 -0500
@@ -885,44 +885,8 @@
 
             pingPong = 0;
             int maxIter = 30 * (n0 - i0);
-            for (int k = 0; i0 < n0; ++k) {
-                if (k >= maxIter) {
-                    throw new InvalidMatrixException(new MaxIterationsExceededException(maxIter));
-                }
-
-                // perform one step
-                n0 = goodStep(i0, n0);
-                pingPong = 1 - pingPong;
-
-                // check for new splits after "ping" steps
-                // when the last elements of qd array are very small
-                if ((pingPong == 0) && (n0 - i0 > 3) &&
-                    (work[4 * n0 - 1] <= TOLERANCE_2 * diagMax) &&
-                    (work[4 * n0 - 2] <= TOLERANCE_2 * sigma)) {
-                    int split  = i0 - 1;
-                    diagMax    = work[4 * i0];
-                    offDiagMin = work[4 * i0 + 2];
-                    double previousEMin = work[4 * i0 + 3];
-                    for (int i = 4 * i0; i < 4 * n0 - 16; i += 4) {
-                        if ((work[i + 3] <= TOLERANCE_2 * work[i]) ||
-                            (work[i + 2] <= TOLERANCE_2 * sigma)) {
-                            // insert a split
-                            work[i + 2]  = -sigma;
-                            split        = i / 4;
-                            diagMax      = 0;
-                            offDiagMin   = work[i + 6];
-                            previousEMin = work[i + 7];
-                        } else {
-                            diagMax      = Math.max(diagMax, work[i + 4]);
-                            offDiagMin   = Math.min(offDiagMin, work[i + 2]);
-                            previousEMin = Math.min(previousEMin, work[i + 3]);
-                        }
-                    }
-                    work[4 * n0 - 2] = offDiagMin;
-                    work[4 * n0 - 1] = previousEMin;
-                    i0 = split + 1;
-                }
-            }
+            for (int k = 0; i0 < n0; ++k)
+				sigmaLow = 0;
 
         }
 
