--- java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	2019-09-02 13:42:10.000000000 -0400
+++ math/71/0/1_RungeKuttaIntegrator.java	2019-09-02 13:49:05.000000000 -0400
@@ -171,6 +171,16 @@
         interpolator.storeTime(stepStart + stepSize);
         if (manager.evaluateStep(interpolator)) {
             final double dt = manager.getEventTime() - stepStart;
+// start of generated patch
+if(Math.abs(dt)<=Math.ulp(stepStart)){
+System.arraycopy(y,0,yTmp,0,y0.length);
+stepSize=0;
+loop=false;
+}else {
+stepSize=dt;
+}
+// end of generated patch
+/* start of original code
             if (Math.abs(dt) <= Math.ulp(stepStart)) {
                 // we cannot simply truncate the step, reject the current computation
                 // and let the loop compute another state with the truncated step.
@@ -182,6 +192,7 @@
                 // reject the step to match exactly the next switch time
                 stepSize = dt;
             }
+ end of original code*/
         } else {
           loop = false;
         }
