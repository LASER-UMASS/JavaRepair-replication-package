--- ./original/org/apache/commons/math3/optimization/linear/SimplexSolver.java	2016-10-18 22:45:33.000000000 +0000
+++ ./variant6/org/apache/commons/math3/optimization/linear/SimplexSolver.java	2016-10-18 23:29:54.000000000 +0000
@@ -115,16 +115,8 @@
         } else if (minRatioPositions.size() > 1) {
             // there's a degeneracy as indicated by a tie in the minimum ratio test
 
-            // 1. check if there's an artificial variable that can be forced out of the basis
-                for (Integer row : minRatioPositions) {
-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
-                        int column = i + tableau.getArtificialVariableOffset();
-                        final double entry = tableau.getEntry(row, column);
-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
-                            return row;
-                        }
-                    }
-                }
+            {
+				}
 
             // 2. apply Bland's rule to prevent cycling:
             //    take the row for which the corresponding basic variable has the smallest index
