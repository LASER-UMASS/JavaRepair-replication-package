--- /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ3_closure115_2_0/closure/closure_115_buggy/src/com/google/javascript/jscomp/FunctionInjector.java	2019-11-07 16:49:32.000000000 -0500
+++ patch_RQ4_2_0/closure/115/1/1_FunctionInjector.java	2019-11-07 17:03:31.000000000 -0500
@@ -727,9 +727,16 @@
       // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
         if (cArg != null) {
+// start of generated patch
+if(cArg==null&&NodeUtil.canBeSideEffected(cArg)){
+return CanInlineResult.NO;
+}
+// end of generated patch
+/* start of original code
           if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
             return CanInlineResult.NO;
           }
+ end of original code*/
           // Check for arguments that are evaluated more than once.
           // Note: Unlike block inlining, there it is not possible that a
           // parameter reference will be in a loop.
